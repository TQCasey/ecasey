cscope 15 $HOME/ecasey -q 0000001947 0000208630
	@boot/high_vect.S

6 
	~<2440/p‹ts.h
>

8 .
	gãxt


9 .
	gcode
 32

10 
	g_v°¨t
:

11 
b
 
_ª£t


12 
b
 
_undef_öt°ru˘


13 
b
 
_so·w¨e_öå


14 
b
 
_„tch_abt


15 
b
 
_d©a_abt


16 
b
 
_ª£rved


17 
b
 
_úq


18 
b
 
_fiq


20 
ª£t
:

22 .
ma¸o
 
h™dÀ
 
úq_ƒ


23 
ldr
 
r13
,=
IRQ_TABLE


24 
add
 
r13
,
	gr13
,#\
úq_ƒ


25 
ldr
 
	gr13
,[
r13
]

26 
mov
 
	gpc
,
	gr13


27 .
	gídm


29 .
	gcode
 32

30 
	g_ª£t
:

31 
h™dÀ
 0

32 
_undef_öt°ru˘
:

33 
h™dÀ
 4

34 
_so·w¨e_öå
:

35 
h™dÀ
 8

36 
_„tch_abt
:

37 
h™dÀ
 12

38 
_d©a_abt
:

39 
h™dÀ
 16

40 
_ª£rved
:

41 
h™dÀ
 20

42 
_úq
:

43 
h™dÀ
 24

44 
_fiq
:

45 
h™dÀ
 28

	@boot/led.c

1 
	~<2440/2440addr.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<sys/ty≥s.h
>

5 
	$Àd_c⁄f
 ()

7 
rGPBCON
 &= ~((3<<10)|(3<<12)|(3<<14)|(3<<16));

8 
rGPBCON
 |= ((1<<10)|(1<<12)|(1<<14)|(1<<16));

10 
	}
}

12 
	$Àd_›t
 (
i32
 
Àd_ƒ
,i32 
vÆ
)

14 
Àd_ƒ
 &= 3;

15 
vÆ
 = (val > 0);

16 
Àd_ƒ
 += 5;

18 i‡(
rGPBDAT
 & (1 << 
Àd_ƒ
)) {

19 i‡(!
vÆ
)

20 
rGPBDAT
 &~(1<<
Àd_ƒ
);

22 i‡(
vÆ
)

23 
rGPBDAT
 |(1<<
Àd_ƒ
);

25 
	}
}

	@boot/loader.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<2440/p‹ts.h
>

6 
	$lﬂdî_°¨t
 ()

9 
	`c›y_«nd_to_sdøm
 (
LOADK_START
,
LOADER_IMG
,
LOADER_SIZE
);

10 
	}
}

	@boot/loaderk.c

7 
	~<2440/2440addr.h
>

8 
	~<2440/drvs.h
>

9 
	~<2440/p‹ts.h
>

10 
	~<eˇ£y/kî√l.h
>

11 
	~<2440/ˇche.h
>

13 
°¨t_mmu
 ();

16 
	$lﬂd_kî√l
 ()

18 
	`°¨t_mmu
 ();

19 
	`Àd_c⁄f
 ();

20 
	`u¨t_c⁄f
 (0,0,0);

22 
	`¥ötk
 ( "\n$ > Booting......\n" );

23 
	`¥ötk
 ( "$ > mmuáctived ! !\n" );

25 
	`Àd_›t
 (0,1);

26 
	`Àd_›t
 (1,1);

27 
	`Àd_›t
 (2,1);

28 
	`Àd_›t
 (3,1);

31 
	`¥ötk
 ( "$ >Üoading kernel ....\n" );

32 
	`c›y_«nd_to_sdøm
 (
KERNEL_CODE_START
,

33 
KERNEL_IMG
,

34 
KERNEL_IMG_SIZE
);

36 
	`¥ötk
 ( "$ >Üoading kernel done ! \n$ > StartÅo boot kernel ....\n" );

37 
	}
}

	@boot/nand.c

5 
	~<sys/ty≥s.h
>

7 
	#rNFCONF
 (*(volatile *)0x4E000000)

8 
	#rNFCONT
 (*(volatile *)0x4E000004)

9 
	#rNFCMD
 (*(volatile *)0x4E000008)

10 
	#rNFADDR
 (*(volatile *)0x4E00000C)

11 
	#rNFDATA
 (*(volatile *)0x4E000010)

12 
	#rNFDATA8
 (*(volatile *)0x4E000010)

13 
	#NFDATA
 (0x4E000010)

14 
	#rNFMECCD0
 (*(volatile *)0x4E000014)

15 
	#rNFMECCD1
 (*(vﬁ©ûê*)0x4E000018)

	)

16 
	#rNFSECCD
 (*(volatile *)0x4E00001C)

17 
	#rNFSTAT
 (*(volatile *)0x4E000020)

18 
	#rNFESTAT0
 (*(vﬁ©ûê*)0x4E000024)

	)

19 
	#rNFESTAT1
 (*(vﬁ©ûê*)0x4E000028)

	)

20 
	#rNFMECC0
 (*(vﬁ©ûê*)0x4E00002C)

	)

21 
	#rNFMECC1
 (*(vﬁ©ûê*)0x4E000030)

	)

22 
	#rNFSECC
 (*(vﬁ©ûê*)0x4E000034)

	)

23 
	#rNFSBLK
 (*(volatile *)0x4E000038)

24 
	#rNFEBLK
 (*(volatile *)0x4E00003C)

25 

	)

26 
	#rGPACON
 (*(volatile *)0x56000000)

27 
	#rGPADAT
 (*(volatile *)0x56000004)

28 

	)

29 
	#BYTES_PER_PAGE
 2048

	)

30 
	#SP_BYTES_PER_PAGE
 64

	)

31 
	#PAGES_PER_BLK
 64

	)

32 
	#BLKS_PER_NANDF
 2048

	)

34 
	#NFCONF_INIT
 0xF830

	)

35 
	#NEED_EXT_ADDR
 1

	)

37 
	#NF_READ1
 0x00

	)

38 
	#NF_READ2
 0x30

	)

40 
	#NF_READ_CPY_BACK1
 0x00

	)

41 
	#NF_READ_CPY_BACK2
 0X35

	)

43 
	#NF_READ_ID
 0x90

	)

44 
	#NF_RESET
 0xFF

	)

46 
	#NF_PAGE_WRITE1
 0x80

	)

47 
	#NF_PAGE_WRITE2
 0x10

	)

49 
	#NF_RANDOM_WRITE
 0x85

	)

51 
	#NF_RANDOM_READ1
 0x05

	)

52 
	#NF_RANDOM_READ2
 0xE0

	)

54 
	#NF_READ_STATUS
 0x70

	)

56 
	#NF_BLK_ERASE1
 0x60

	)

57 
	#NF_BLK_ERASE2
 0xD0

	)

59 
	#STATUS_READY
 0x40

	)

60 
	#STATUS_ERROR
 0x01

	)

62 
	#NF_CMD
(
cmd
Ë{
rNFCMD
 = (cmd);}

	)

63 
	#NF_ADDR
(
addr
Ë{
rNFADDR
 = (addr);}

	)

64 
	#NF_WRDATA
(
d©a
Ë{
rNFDATA
 = (d©a); }

	)

66 
	#NF_nFCE_L
(Ë{
rNFCONT
 &~(1<<1);}

	)

67 
	#NF_nFCE_H
(Ë{
rNFCONT
 |(1<<1);}

	)

69 
	#NF_CLR_RB
(Ë{
rNFSTAT
 |(1<<2); }

	)

70 
	#NF_WAIT_RB
(Ë{!(
rNFSTAT
&(1<<2)));}

	)

72 
	#NF_RSTECC
(Ë{
rNFCONT
 |(1<<4);}

	)

73 
	#NF_RDMECC0
(Ë(
rNFMECC0
)

	)

74 
	#NF_RDMECC1
(Ë(
rNFMECC1
)

	)

75 
	#NF_RDSECC
(Ë(
rNFSECC
)

	)

76 
	#NF_RDDATA
(Ë(
rNFDATA
)

	)

77 
	#NF_RDDATA8
(Ë(
rNFDATA8
)

	)

79 
	#NF_WAITRB
(Ë{!(
rNFSTAT
&(1<<0)));}

	)

81 
	#NF_MECC_U∆ock
(Ë{
rNFCONT
 &~(1<<5); }

	)

82 
	#NF_MECC_Lock
(Ë{
rNFCONT
 |(1<<5); }

	)

83 
	#NF_SECC_U∆ock
(Ë{
rNFCONT
 &~(1<<6); }

	)

84 
	#NF_SECC_Lock
(Ë{
rNFCONT
 |(1<<6); }

	)

86 
	#«nd_ªad_byã
(Ë(
rNFDATA8
)

	)

87 
	#«nd_wrôe_byã
(
ch
Ë((
rNFDATA8
 = ch))

	)

89 
	#pNFCONF
 
rNFCONF


	)

90 
	#pNFCMD
 
rNFCMD


	)

91 
	#pNFADDR
 
rNFADDR


	)

92 
	#pNFDATA
 
rNFDATA


	)

93 
	#pNFSTAT
 
rNFSTAT


	)

94 
	#pNFECC
 
rNFECC0


	)

96 
	#NF_CE_ON
(Ë
	`NF_nFCE_L
()

	)

97 
	#NF_CE_OFF
(Ë
	`NF_nFCE_H
()

	)

98 
	#NF_DATA_R
(Ë
rNFDATA


	)

99 
	#NF_ECC
(Ë
rNFECC0


	)

102 
	#TACLS
 1

	)

103 
	#TWRPH0
 4

	)

104 
	#TWRPH1
 0

	)

107 
i32
 
	$«nd_ª£t
 ()

109 
	`NF_CE_ON
 ();

110 
	`NF_CLR_RB
 ();

111 
	`NF_CMD
 (
NF_RESET
);

112 
	`NF_WAIT_RB
 ();

113 
	`NF_CE_OFF
 ();

115 
	}
}

117 
u32
 
	$Œ_«nd_ªad_∑ge
 (*
to
,
u32
 
°¨t_addr
)

119 
u8
 *
p
 = (u8*)
to
;

120 
i32
 
i
 ;

122 
	`NF_CE_ON
 ();

123 
	`NF_CLR_RB
 ();

124 
	`NF_CMD
 (
NF_READ1
);

125 
	`NF_ADDR
 (0x00);

126 
	`NF_ADDR
 (0x00);

127 
	`NF_ADDR
((
°¨t_addr
>>0)&0xFF);

128 
	`NF_ADDR
((
°¨t_addr
>>8)&0xFF);

129 
	`NF_ADDR
((
°¨t_addr
>>16)&0xFF);

130 
	`NF_CMD
 (
NF_READ2
);

131 
	`NF_WAIT_RB
 ();

132 
i
 = 0; i < 
BYTES_PER_PAGE
 ; i ++)

133 
p
 [
i
] = 
	`«nd_ªad_byã
 ();

134 
	`NF_CE_OFF
 ();

136 
	}
}

139 
	$«nd_öô
 ()

142 
rGPACON
 &= ~(0x3f<<17);

143 
rGPACON
 |= (0x3F<<17);

144 
rNFCONF
 = (
TACLS
<<12)|(
TWRPH0
<<8)|(
TWRPH1
<<4)|(0<<0);

145 
rNFCONT
 = ((1<<4)|(1<<1)|(1<<0));

146 
rNFSTAT
 = 0;

147 
	`«nd_ª£t
();

148 
	}
}

153 
u32
 
	$c›y_«nd_to_sdøm
 (
u32
 
sdøm_addr
,u32 
«nd_addr
,u32 
img_size
)

155 
u32
 
∑ges
 = ((
img_size
&0x7FFË!0Ë+ (img_size>>11),
i
 = 0;

157 
i
 = 0 ; i < 
∑ges
 ; i ++,
sdøm_addr
 += 2048 )

158 
	`Œ_«nd_ªad_∑ge
 ((*)
sdøm_addr
,(
«nd_addr
 >> 11Ë+ 
i
);

160 
	}
}

	@boot/start.S

6 
	~<asm/iﬂddr.h
>

7 
	~<2440/p‹ts.h
>

9 .
	gãxt


10 .
globÆ
 
	g_°¨t


11 .
lﬂdî_°¨t
,
«nd_öô
,
lﬂd_kî√l


12 .
code
 32

13 
_°¨t
:

14 
b
 
ª£t


15 
b
 
_undef_öt°ru˘


16 
b
 
_so·w¨e_öå


17 
b
 
_„tch_abt


18 
b
 
_d©a_abt


19 
b
 
_ª£rved


20 
b
 
_úq


21 
b
 
_fiq


24 
ª£t
:

25 
m§
 
˝§_c
,#SVC_MODE|
NO_INTR


26 
ldr
 
•
, =1024*4

28 
ldr
 
r0
,=
WTCON


29 
ldr
 
r1
,=0x00

30 
°r
 
r1
,[
r0
]

32 
ldr
 
r0
,=
INTMSK


33 
ldr
 
r1
,=0xFFFFFFFF

34 
°r
 
r1
,[
r0
]

36 
ldr
 
r0
,=
INTSUBMSK


37 
ldr
 
r1
,=0x7FFF

38 
°r
 
r1
,[
r0
]

40 
ldr
 
r0
,=
LOCKTIME


41 
ldr
 
r1
,=0xFFFFFFFF

42 
°r
 
r1
,[
r0
]

44 
ldr
 
r0
,=
UPLLCON


45 
ldr
 
r1
,=((56<<12)|(2<<4)|(1<<0))

46 
°r
 
r1
,[
r0
]

48 
ldr
 
r0
,=
MPLLCON


49 
ldr
 
r1
,=((92<<12)+(1<<4)+1)

50 
°r
 
r1
,[
r0
]

53 
ldr
 
r0
,=
CLKDIVN


54 
ldr
 
r1
,=0x05

55 
°r
 
r1
,[
r0
]

57 
mrc
 
p15
,0,
r1
,
c1
,
c0
,0

58 
‹r
 
r1
,r1,#0
xc0000000


59 
m¸
 
p15
,0,
r1
,
c1
,
c0
,0

61 
n›


62 
n›


63 
n›


64 
n›


65 
n›


66 
n›


68 
bl
 
mem£tup


69 
bl
 
«nd_öô


70 
bl
 
lﬂdî_°¨t


71 
ldr
 
Ã
,=
_ídlﬂd


72 
ldr
 
pc
,=
lﬂd_kî√l


73 
_ídlﬂd
:

74 
ldr
 
pc
,=
KERNEL_CODE_START


75 
b
 .

78 
mem£tup
:

79 
ldr
 
r1
,=
BWSCON


80 
ldr
 
r0
,=
mem_cfg_vÆ


81 
ldr
 
r2
,=13

82 .
lﬂd
:

83 
ldr
 
r4
,[
r0
],#4

84 
°r
 
r4
,[
r1
],#4

85 
subs
 
r2
,r2,#1

86 
cmp
 
r2
,#0

87 
bgt
 .
lﬂd


88 
mov
 
pc
,
Ã


98 .
ma¸o
 
h™dÀ
 
úq_ƒ


99 
ldr
 
r13
,=
IRQ_TABLE


100 
add
 
r13
,r13,#\
úq_ƒ


101 
ldr
 
r13
,[r13]

102 
mov
 
pc
,
r13


103 .
ídm


105 .
code
 32

106 
_undef_öt°ru˘
:

107 
h™dÀ
 4

108 
_so·w¨e_öå
:

109 
h™dÀ
 8

110 
_„tch_abt
:

111 
h™dÀ
 12

112 
_d©a_abt
:

113 
h™dÀ
 16

114 
_ª£rved
:

115 
h™dÀ
 20

116 
_úq
:

117 
h™dÀ
 24

118 
_fiq
:

119 
h™dÀ
 28

129 
mem_cfg_vÆ
:

130 .(0 | 
DW_B1
 | 
DW_B2
 | 
DW_B3
 | 
DW_B4
 | 
DW_B5
 | 
DW_B6
 | 
DW_B7
)

131 .(
B0_Tacs
 | 
B0_Tcos
 | 
B0_Tacc
 | 
B0_Tcoh
 | 
B0_Tah
 | 
B0_Ta˝
 | 
B0_PMC
)

132 .(
B1_Tacs
 | 
B1_Tcos
 | 
B1_Tacc
 | 
B1_Tcoh
 | 
B1_Tah
 | 
B1_Ta˝
 | 
B1_PMC
)

133 .(
B2_Tacs
 | 
B2_Tcos
 | 
B2_Tacc
 | 
B2_Tcoh
 | 
B2_Tah
 | 
B2_Ta˝
 | 
B2_PMC
)

134 .(
B3_Tacs
 | 
B3_Tcos
 | 
B3_Tacc
 | 
B3_Tcoh
 | 
B3_Tah
 | 
B3_Ta˝
 | 
B3_PMC
)

135 .(
B4_Tacs
 | 
B4_Tcos
 | 
B4_Tacc
 | 
B4_Tcoh
 | 
B4_Tah
 | 
B4_Ta˝
 | 
B4_PMC
)

136 .(
B5_Tacs
 | 
B5_Tcos
 | 
B5_Tacc
 | 
B5_Tcoh
 | 
B5_Tah
 | 
B5_Ta˝
 | 
B5_PMC
)

137 .(
B6_MT
 | 
B6_Trcd
 | 
B6_SCAN
)

138 .(
B7_MT
 | 
B7_Trcd
 | 
B7_SCAN
)

139 .(
REFEN
 | 
TREFMD
 | 
TΩ
 | 
Tchr
 | 
T§c
)

140 .(
BURST_EN
 | 
SCKE_EN
 | 
SCLK_EN
 | 
BK6_7_MAP
)

141 .(
WBL
 | 
TM
 | 
CL
 | 
BT
 | 
BL
)

142 .(
WBL
 | 
TM
 | 
CL
 | 
BT
 | 
BL
)

	@fs/blk_rw.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

8 
i32
 
rdªad
 (*
buf
,
u32
 
blk_ƒ
,u32 
blks_˙t
);

9 
i32
 
rdwrôe
 (*
buf
,
u32
 
blk_ƒ
,u32 
blks_˙t
);

10 
i32
 
sd_rw
 (
u8
 
rw
,
u32
 
blk_ƒ
,u32 
blks_˙t
,*
buf
);

11 
u32
 
«nd_rw
 (
u8
 
rw
,u32 
blkno
,*
buf
);

13 
LOCAL
 
i32
 
	$øm_rw
 (
u8
 
rw
,
u32
 
blk_ƒ
,u32 
blks_˙t
,*
buf
)

15 i‡(
READ
 =
rw
)

16 
	`rdªad
 (
buf
,
blk_ƒ
,1);

17  (
	`rdwrôe
 (
buf
,
blk_ƒ
,1));

18 
	}
}

20 
i32
 
	$Œ_rw_blk
 (
u8
 
rw
,
u16
 
dev_no
,
u32
 
blk_ƒ
,u32 
blks_˙t
,*
buf
)

22 
dev_no
)

24 
DEV_RAM
:

25  (
	`øm_rw
 (
rw
,
blk_ƒ
,
blks_˙t
,
buf
));

26 
DEV_NAND
:

27  (
	`«nd_rw
 (
rw
,
blk_ƒ
,
buf
));

28 
DEV_SDCARD
:

29  (
	`sd_rw
 (
rw
,
blk_ƒ
,
blks_˙t
,
buf
));

34 
	}
}

	@fs/bmap.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

7 
LOCAL
 
INLINE
 
u8
 
	$£tb
 (
u8
 *
addr
,
u32
 
bôno
)

9 
u8
 
ªt
,
ƒ
 = 
bôno
&7;

11 
addr
 +(
bôno
>>3);

12 
ªt
 = ((*
addr
Ë& (1<<
ƒ
)) >>Çr;

13 *
addr
 |(1<<
ƒ
);

14  (
ªt
);

15 
	}
}

17 
LOCAL
 
INLINE
 
u8
 
	$˛rb
 (
u8
 *
addr
,
u32
 
bôno
)

19 
u8
 
ªt
,
ƒ
 = 
bôno
&7;

21 
addr
 +(
bôno
>>3);

22 
ªt
 = ((*
addr
Ë& (1<<
ƒ
)) >>Çr;

23 *
addr
 &~(1<<
ƒ
);

24  (
ªt
);

25 
	}
}

27 
LOCAL
 
INLINE
 
u32
 
	$föd_fú°_zîo
 (
u8
 *
p
,
u32
 
bôno
)

29 
u32
 
i
 = 
bôno
>>3 ,
j
 = bitno&7 ;

31 ; 
i
 < 
BLK_SIZE
 ;i ++ ) {

32 i‡(0xFF =
p
[
i
]) ;

33 ; 
j
 < 8 ; j ++)

34 i‡(!(
p
[
i
] & (1<<
j
)))

35  ((
i
<<3Ë+ 
j
);

36 
j
 = 0;

39 
	}
}

41 
MEM_SUPER_BLOCK
 *
gë_sblk
 (
u16
);

42 
¸ash
 (c⁄° *
fmt
,...);

43 
BUFFER_HEAD
 *
gë_blk
 (
u16
,
u32
);

44 
bªl£
 (
BUFFER_HEAD
*);

46 
	$‰ì_block
 (
u16
 
dev_no
,
u32
 
blk_ƒ
)

48 
MEM_SUPER_BLOCK
 *
sb
 = 
NULL
;

49 
BUFFER_HEAD
 *
tmp
 = 
NULL
;

51 i‡(!
dev_no
 || !(
sb
 = 
	`gë_sblk
 (dev_no)))

52 
	`¸ash
 ( "free block onÇonexistent dev !\n" );

53 i‡(
blk_ƒ
 < 
sb
->
sb_fú°_d©az⁄e
 || blk_ƒ >sb->
sb_nz⁄es
)

54 
	`¸ash
 ("freeÇon-zoned zone !\n") ;

55 i‡((
tmp
 = 
	`gë_blk
 (
dev_no
,
blk_ƒ
))) {

56 i‡(
tmp
->
bh_˙t
 != 1)

57 
	`¸ash
 ("‰ì block %d,cou¡ = %d\n",
blk_ƒ
,
tmp
->
bh_˙t
) ;

58 
tmp
->
bh_dút
 =Åmp->
bh_vÆid
 = 
Ál£
;

59 
	`bªl£
 (
tmp
);

61 
blk_ƒ
 -
sb
->
sb_fú°_d©az⁄e
;

62 i‡(!
	`˛rb
 (
sb
->
sb_zm≠_bh
[
blk_ƒ
>>
BLK_BITS_SFT
]->
bh_buf
,blk_ƒ&
BLK_BITS_MSK
))

63 
	`¸ash
 ( "bm≠ (blk_ƒ : %dËÆªady fªê!\n",
blk_ƒ
 );

64 
sb
->
sb_zm≠_bh
[
blk_ƒ
>>
BLK_BITS_SFT
]->
bh_dút
 = 
åue
;

65 
	}
}

67 
u32
 
	$√w_block
 (
u16
 
dev_no
)

69 
MEM_SUPER_BLOCK
 *
sb
;

70 
BUFFER_HEAD
 *
tmp
 ;

71 
u32
 
i
,
j
,
k
,
l
;

73 i‡(!
dev_no
 || !(
sb
 = 
	`gë_sblk
 (dev_no)))

74 
	`¸ash
 ("new block fromÇonexistent dev!\n");

75 
j
 = 
sb
->
sb_pos
 >> 
BLK_BITS_SFT
;

76 
k
 = 
sb
->
sb_pos
 & 
BLK_BITS_MSK
;

77 
i
 = 0 ; i < 
sb
->
sb_zm≠_blocks
 ; i ++) {

78 i‡((
tmp
 = 
sb
->
sb_zm≠_bh
[
j
])) {

79 
l
 = 
	`föd_fú°_zîo
 (
tmp
->
bh_buf
,
k
);

80 i‡((
l
 !(-1)Ë&& (((
j
 << 
BLK_BITS_SFT
Ë+Ü + 
sb
->
sb_fú°_d©az⁄e
Ë< sb->
sb_nz⁄es
))

83 
k
 = 0;

84 
j
 = (j+1Ë% 
sb
->
sb_zm≠_blocks
;

86 i‡(
i
 >
sb
->
sb_zm≠_blocks
 || !
tmp
 || 
l
 == (-1))

88 i‡(
	`£tb
 (
tmp
->
bh_buf
,
l
))

89 
	`¸ash
 ("√w block: bô %dáÃódy busy!\n",
l
);

90 
tmp
->
bh_dút
 = 
åue
;

91 
sb
->
sb_pos
 = (
j
 << 
BLK_BITS_SFT
Ë+ 
l
;

92 
l
 +(
j
 << 
BLK_BITS_SFT
Ë+ 
sb
->
sb_fú°_d©az⁄e
;

93 i‡(
l
 >
sb
->
sb_nz⁄es
)

95 i‡(!(
tmp
 = 
	`gë_blk
 (
dev_no
,
l
)))

96 
	`¸ash
 ("new block : get blk failed !\n");

97 
	`mem£t
 (
tmp
->
bh_buf
,0,
BLK_SIZE
);

98 
tmp
->
bh_dút
 =Åmp->
bh_vÆid
 = 
åue
;

99 
	`bªl£
 (
tmp
);

100  (
l
);

101 
	}
}

102 
MEM_INODE
 *
gë_em±y_öode
 ();

104 
MEM_INODE
* 
	$√w_öode
 (
u16
 
dev_no
)

106 
MEM_SUPER_BLOCK
 *
sb
 ;

107 
BUFFER_HEAD
 *
im≠
;

108 
MEM_INODE
 *
m_öode
;

109 
u32
 
i
,
j
 = 
BLK_SIZE
 << 3;

111 i‡(!(
sb
 = 
	`gë_sblk
 (
dev_no
)))

112 
	`¸ash
 ( "new inode fromÇonexistent dev!\n" ) ;

113 
i
 = 0 ; i < 
sb
->
sb_im≠_blocks
 ; i ++)

114 i‡((
im≠
 = 
sb
->
sb_im≠_bh
[
i
]))

115 i‡((
j
 = 
	`föd_fú°_zîo
 (
im≠
->
bh_buf
,0)) != (-1))

117 i‡(
i
 >
sb
->
sb_im≠_blocks
 || !
im≠
 || 
j
 == (-1))

118  (
NULL
);

119 i‡(
	`£tb
 (
im≠
->
bh_buf
,
j
))

120 
	`¸ash
 ( "√w inodê: bô %dáÃódy së !\n",(
i
 << 
BLK_BITS_SFT
Ë+ 
j
 );

121 
im≠
->
bh_dút
 = 
åue
;

122 i‡(!(
m_öode
 = 
	`gë_em±y_öode
 ()))

123 
	`¸ash
 ( "getÉmpty inode failed !\n" );

124 
m_öode
->
i_˙t
 = 1;

125 
m_öode
->
i_dút
 = 
åue
;

126 
m_öode
->
i_vÆid
 = 
åue
;

127 
m_öode
->
i_∆öks
 = 1;

128 
m_öode
->
i_dev
 = 
dev_no
;

129 
m_öode
->
i_locked
 = 
Ál£
;

130 
m_öode
->
i_magic
 = 
I_MAGIC
;

131 
m_öode
->
i_uid
 = 
UID
;

132 
m_öode
->
i_gid
 = 
GID
;

133 
m_öode
->
i_num
 = (
i
<<
BLK_BITS_SFT
Ë+ 
j
 ;

134 
m_öode
->
i_mtime
 = m_öode->
i_acc_time
 = m_öode->
i_¸t_time
 = 
CUR_TIME
;

135  (
m_öode
);

136 
	}
}

138 
i32
 
	$‰ì_öode
 (
MEM_INODE
 *
öode
)

140 
MEM_SUPER_BLOCK
 *
sb
 ;

141 
BUFFER_HEAD
 *
tmp
 ;

143 i‡(!
öode
)

145 i‡(!(
sb
 = 
	`gë_sblk
 (
öode
->
i_dev
)))

146 
	`¸ash
 ( "free inode fromÇonexistent dev !\n" ) ;

147 i‡(!
öode
->
i_dev
) {

148 
	`mem£t
 (
öode
,0,(
MEM_INODE
));

151 i‡(
öode
->
i_˙t
 || inode->
i_∆öks
)

152 
	`¸ash
 ( "free busy inode");

153 i‡(!(
sb
 = 
	`gë_sblk
 (
öode
->
i_dev
)))

154 
	`¸ash
 ( "freeÇonexistent dev inode !\n" );

155 i‡(!(
tmp
 = 
sb
->
sb_im≠_bh
[
öode
->
i_num
>>
BLK_BITS_SFT
]))

156 
	`¸ash
 ( "im≠ block %dÇŸÉxi°íà!\n",
öode
->
i_num
>>
BLK_BITS_SFT
 );

157 i‡(!
	`˛rb
 (
tmp
->
bh_buf
,
öode
->
i_num
&
BLK_BITS_MSK
))

158 
	`¸ash
 ( "‰ì_öodê: bô %dáÃódy fªê!\n",
öode
->
i_num
&
BLK_BITS_MSK
 );

159 
tmp
->
bh_dút
 = 
åue
;

160 
	`mem£t
 (
öode
,0,(
MEM_INODE
));

162 
	}
}

	@fs/buffer.c

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

7 
	~<°dio.h
>

8 
	~<°rög.h
>

9 
	~<°d¨g.h
>

10 
	~<2440/p‹ts.h
>

12 
	#BUFFER_SIZE
 (
FS_BUFFER_SIZE
)

	)

13 
	#BUF_START
 (
USR_FS_BUFFER
)

	)

14 
	#BUF_END
 (
BUF_START
 + 
BUFFER_SIZE
)

	)

15 
	#NR_HASH
 254

	)

16 
	#OUT_BLKS
 20

	)

18 
i32
 
	gNR_BUFFERS
 = 0;

19 
LOCAL
 
BUFFER_HEAD
 *
	g‰ì_li°
 = 
NULL
;

20 
LOCAL
 
BUFFER_HEAD
 *
	ghash
[
NR_HASH
] = {0};

22 
	#gë_úow
(
dev_no
,
blk_no
Ë(((dev_no)^(blk_no))%
NR_HASH
)

	)

23 
	#hash_row
(
dev_no
,
blk_no
Ë(
hash
[
	`gë_úow
 (dev_no,blk_no)])

	)

25 
¸ash
 (c⁄° *
fmt
,...);

26 
u32
 
sync_blks
 (u32 
blks_˙t
) ;

28 
LOCAL
 
BUFFER_HEAD
* 
	$add_hash
 (
BUFFER_HEAD
 *
p
)

30 
u16
 
dev_no
 = 
p
->
bh_dev
;

31 
u32
 
blk_no
 = 
p
->
bh_blk_ƒ
;

32 
i32
 
i
 = 
	`gë_úow
 (
dev_no
,
blk_no
);

34 i‡(!
p
 || !p->
bh_dev
)

35 
	`¸ash
 ( "bad bufferárgument !\n" );

36 i‡(!
hash
[
i
]) {

37 
p
->
hash_√xt
 =Ö->
hash_¥ev
 =Ö;

38 
hash
[
i
] = 
p
;

40 
hash
[
i
]->
hash_¥ev
->
hash_√xt
 = 
p
;

41 
p
->
hash_¥ev
 = 
hash
[
i
]->hash_prev;

42 
hash
[
i
]->
hash_¥ev
 = 
p
;

43 
p
->
hash_√xt
 = 
hash
[
i
];

45 
p
->
bh_hashed
 = 
åue
;

46  (
p
);

47 
	}
}

49 
BUFFER_HEAD
 *
	$gë_buf„r
 (
u16
 
dev_no
,
u32
 
blk_no
)

51 
BUFFER_HEAD
 *
ªt
 = 
NULL
;

53 
åue
) {

54 i‡(
‰ì_li°
) {

55 
ªt
 = 
‰ì_li°
->
‰ì_√xt
;

56 i‡(
ªt
 =
‰ì_li°
)

57 
‰ì_li°
 = 
NULL
 ;

59 
‰ì_li°
->
‰ì_¥ev
->
‰ì_√xt
 = free_list->free_next;

60 
‰ì_li°
->
‰ì_√xt
->
‰ì_¥ev
 = free_list->free_prev;

61 
ªt
 = 
‰ì_li°
;

62 
‰ì_li°
 = fªe_li°->
‰ì_√xt
;

64 
ªt
->
‰ì_√xt
 =Ñë->
‰ì_¥ev
 = 
NULL
;

65 
ªt
->
bh_dev
 = 
dev_no
;

66 
ªt
->
bh_blk_ƒ
 = 
blk_no
;

67  (
	`add_hash
 (
ªt
)) ;

69 
	`sync_blks
 (
OUT_BLKS
);

71  (
ªt
);

72 
	}
}

74 
BUFFER_HEAD
 *
	$föd_buf„r
 (
u16
 
dev_no
,
u32
 
blk_no
)

76 
BUFFER_HEAD
 *
q
,*
p
;

78 
i32
 
i
 = 
	`gë_úow
(
dev_no
,
blk_no
);

79 i‡(!
hash
[
i
])

80  (
NULL
);

81 
q
 = 
hash
[
i
]->
hash_¥ev
 ;

82 
p
 = 
hash
[
i
];

84  
åue
 ) {

85 i‡(
dev_no
 =
p
->
bh_dev
 && 
blk_no
 =p->
bh_blk_ƒ
)

86  (
p
);

87 i‡(
dev_no
 =
q
->
bh_dev
 && 
blk_no
 =q->
bh_blk_ƒ
)

88  (
q
);

89 i‡(
p
->
hash_√xt
 =
q
) ;

90 i‡(
p
 =
q
) ;

91 
p
 =Ö->
hash_√xt
;

92 
q
 = q->
hash_¥ev
;

94  (
NULL
);

95 
	}
}

97 
	$‰ì_buf„r
 (
BUFFER_HEAD
 *
p
)

99 
BUFFER_HEAD
 *
q
;

100 
i32
 
i
 = 
	`gë_úow
 (
p
->
bh_dev
,p->
bh_blk_ƒ
);

101 i‡(!
p
 || !p->
bh_dev
 || !(
q
 = 
hash
[
i
]))

103 i‡(
p
->
bh_˙t
)

104 
	`¸ash
 ( "free buffer dev 0x%x,blk_no %d with count = %d !\n",

105 
p
->
bh_dev
,p->
bh_blk_ƒ
,p->
bh_˙t
 );

106 i‡(
p
->
hash_√xt
 ==Ö)

107 
hash
[
i
] = 
NULL
;

109 
p
->
hash_¥ev
->
hash_√xt
 =Ö->hash_next;

110 
p
->
hash_√xt
->
hash_¥ev
 =Ö->hash_prev;

111 i‡(
hash
 [
i
] =
p
)

112 
hash
 [
i
] = 
p
->
hash_√xt
;

114 i‡(!
‰ì_li°
){

115 
p
->
‰ì_√xt
 =Ö->
‰ì_¥ev
 =Ö;

116 
‰ì_li°
 = 
p
;

118 
‰ì_li°
->
‰ì_¥ev
->
‰ì_√xt
 = 
p
;

119 
p
->
‰ì_¥ev
 = 
‰ì_li°
->free_prev;

120 
p
->
‰ì_√xt
 = 
‰ì_li°
;

121 
‰ì_li°
->
‰ì_¥ev
 = 
p
;

123 
p
->
bh_˙t
 = 0;

124 
p
->
bh_dút
 = 
Ál£
;

125 
p
->
bh_vÆid
 = 
Ál£
;

126 
p
->
bh_locked
 = 
Ál£
;

127 
p
->
bh_blk_ƒ
 = 0;

128 
p
->
bh_dev
 = 0;

129 
p
->
hash_√xt
 =Ö->
hash_¥ev
 = 
NULL
;

130 
p
->
bh_hashed
 = 
Ál£
;

131 
	}
}

133 
i32
 
	$öô_buf„r
 ()

135 
BUFFER_HEAD
 *
bh
 = (BUFFER_HEAD*)
BUF_START
;

136 
u8
 *
buf
 = (u8*)(
BUF_END
 - 
BLK_SIZE
);

137 
i32
 
i
 = 0;

140  (
u8
*)(
bh
+1Ë<(
buf
) ) {

141 
bh
->
bh_dev
 = 0;

142 
bh
->
bh_dút
 = 0;

143 
bh
->
bh_locked
 = 
Ál£
;

144 
bh
->
bh_vÆid
 = 
Ál£
;

145 
bh
->
bh_˙t
 = 0;

146 
bh
->
bh_buf
 = 
buf
;

147 
bh
->
bh_hashed
 = 
Ál£
;

148 
bh
->
bh_blk_ƒ
 = 0;

149 
bh
->
‰ì_¥ev
 = bh-1;

150 
bh
->
‰ì_√xt
 = bh+1;

151 
bh
 ++;

152 
buf
 -
BLK_SIZE
;

153 
NR_BUFFERS
 ++;

155 
‰ì_li°
 = (
BUFFER_HEAD
*)
BUF_START
;

156 
‰ì_li°
->
‰ì_¥ev
 = --
bh
;

157 
bh
->
‰ì_√xt
 = 
‰ì_li°
;

158 
i
 < 
NR_HASH
Ë
hash
[i++] = 
NULL
;

159  (
NR_BUFFERS
);

160 
	}
}

162 
	$bªl£
 (
BUFFER_HEAD
 *
bh_‰ì
)

164 i‡(!
bh_‰ì
)  ;

165 i‡(!(
bh_‰ì
->
bh_˙t
 --))

166 
	`¸ash
 ( "brelse free buffer !\n" );

167 i‡(!
bh_‰ì
->
bh_˙t
)

168 i‡(!
bh_‰ì
->
bh_dút
 || !bh_‰ì->
bh_vÆid
)

169 
	`‰ì_buf„r
 (
bh_‰ì
);

170 
	}
}

173 
BUFFER_HEAD
 *
	$gë_blk
 (
u16
 
dev_no
,
u32
 
blk_no
)

175 
BUFFER_HEAD
 *
tmp
 = 
NULL
;

177 i‡(!(
tmp
 = 
	`föd_buf„r
 (
dev_no
,
blk_no
))) {

178 i‡((
tmp
 = 
	`gë_buf„r
 (
dev_no
,
blk_no
))) {

179 
tmp
->
bh_locked
 = 
Ál£
;

180 
tmp
->
bh_˙t
 ++;

181 
tmp
->
bh_dev
 = 
dev_no
;

182 
tmp
->
bh_vÆid
 = 
Ál£
;

183 
tmp
->
bh_dút
 = 
Ál£
;

184 
tmp
->
bh_blk_ƒ
 = 
blk_no
;

185  (
tmp
);

188  (
NULL
);

190 
tmp
->
bh_˙t
 ++;

191  (
tmp
);

192 
	}
}

194 
i32
 
Œ_rw_blk
 (
u8
,
u16
,
u32
,u32,*);

196 
BUFFER_HEAD
 *
	$bªad
 (
u16
 
dev_no
,
u32
 
blk_no
)

198 
BUFFER_HEAD
 *
tmp
 ;

199 i‡(!(
tmp
 = 
	`gë_blk
 (
dev_no
,
blk_no
)))

200 
	`¸ash
 ( "bread :Ço more free buffer !\n" );

201 i‡(
tmp
->
bh_vÆid
)

202  (
tmp
);

203 i‡(!
	`Œ_rw_blk
 (
READ
,
dev_no
,
blk_no
,1,(*)(
tmp
->
bh_buf
)))

204  (
NULL
);

205 
tmp
->
bh_vÆid
 = 
åue
;

206  (
tmp
);

207 
	}
}

210 
BUFFER_HEAD
* 
	$bªada
 (
u16
 
dev_no
,
u32
 
blk_no
 ,...)

212 
va_li°
 
va_p
 ;

213 
BUFFER_HEAD
 *
bh
,*
tmp
;

214 
	`va_°¨t
 (
va_p
,
blk_no
);

216 i‡(!(
bh
 = 
	`bªad
 (
dev_no
,
blk_no
)))

217 
	`¸ash
 ( "breada : bread failed !\n" );

218 (
blk_no
 = 
	`va_¨g
(
va_p
,
u32
)) >= 0)

219 i‡((
tmp
 = 
	`bªad
 (
dev_no
,
blk_no
)Ë&&Åmp->
bh_vÆid
)

220 
tmp
->
bh_˙t
 --;

221  (
bh
);

222 
	}
}

225 
	$sync_dev_blks
 (
u16
 
dev_no
)

227 
u32
 
i
;

228 
BUFFER_HEAD
 *
bh
 = (BUFFER_HEAD*)
BUF_START
;

230 
i
 = 0;ò< 
NR_BUFFERS
 ; i++) {

231 i‡(
bh
[
i
].
bh_dút
 && bh[i].
bh_vÆid
 && (bh[i].
bh_dev
 =
dev_no
)) {

232 
	`Œ_rw_blk
 (
WRITE
,
bh
[
i
].
bh_dev
,bh[i].
bh_blk_ƒ
,1,bh[i].
bh_buf
);

233 
bh
[
i
].
bh_dút
 = 
Ál£
;

234 i‡(!
bh
[
i
].
bh_˙t
)

235 
	`‰ì_buf„r
 (&
bh
[
i
]) ;

238 
	}
}

240 
LOCAL
 
u32
 
	gpos
 = 0;

243 
u32
 
	$sync_blks
 (
u32
 
blks_˙t
)

245 
u32
 
˙t
 = 0,
i
 = 0;

246 
BUFFER_HEAD
 *
bh
 = (BUFFER_HEAD*)
BUF_START
;

248 i‡(
blks_˙t
 > 
NR_BUFFERS
)

249 
blks_˙t
 = 
NR_BUFFERS
 - 1;

250 
i
 = 0; i < 
NR_BUFFERS
; i ++) {

251 
pos
 = (po†+ 1Ë% 
NR_BUFFERS
;

252 i‡(!
bh
[
pos
].
bh_hashed
)

254 i‡(
bh
[
pos
].
bh_dút
 && bh[pos].
bh_vÆid
) {

255 
	`Œ_rw_blk
 (
WRITE
,
bh
[
pos
].
bh_dev
,bh[pos].
bh_blk_ƒ
,1,bh[pos].
bh_buf
);

256 
bh
[
pos
].
bh_dút
 = 
Ál£
;

258 i‡(!
bh
[
pos
].
bh_˙t
) {

259 
	`‰ì_buf„r
 (&
bh
[
pos
]) ;

260 i‡((
˙t
 ++ >
blks_˙t
))

264  (
˙t
);

265 
	}
}

	@fs/crash.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°d¨g.h
>

4 
	~<sys/ty≥s.h
>

6 
i32
 
	$¸ash
 (
RO
 
i8
 *
fmt
,...)

8 
va_li°
 
va_p
 = (*)0;

9 
i8
 
buf
[1024] = {"crash : "};

10 
i32
 
Àn
 ;

12 
	`va_°¨t
 (
va_p
,
fmt
);

13 
Àn
 = 
	`v•rötf
 (
buf
+8,
fmt
,
va_p
);

14 
	`va_íd
 (
va_p
);

16 
	`¥ötf
 (
buf
);

18  (
Àn
);

19 
	}
}

23 
i32
 
	$w¨n
 (
RO
 
i8
 *
fmt
,...)

25 
va_li°
 
va_p
 = (*)0;

26 
i8
 
buf
[1024] = {"warn : "};

27 
i32
 
Àn
 ;

29 
	`va_°¨t
 (
va_p
,
fmt
);

30 
Àn
 = 
	`v•rötf
 (
buf
+7,
fmt
,
va_p
);

31 
	`va_íd
 (
va_p
);

33 
	`¥ötf
 (
buf
);

34  (
Àn
);

35 
	}
}

	@fs/errno.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

9 
LOCAL
 
RO
 
i8
 *
	gîr_°r
 [] = {

34 
	$≥º
 (
i32
 
î∫o
)

36 i‡(
î∫o
 >= 0)

38 
î∫o
 = -errno;

39 
	`¥ötf
 ("%s\n",
îr_°r
 [
î∫o
 % ((err_str))]);

40 
	}
}

	@fs/exec.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<eˇ£y/fs.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<eˇ£y/exec.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<î∫o.h
>

11 
	#__DEBUG_ELF__


	)

13 
i32
 
do_›í
 (i32 
pid
,
RO
 
i8
 *
∑th
,i32 
Êag
,i32 
mode
);

14 
i32
 
do_˛o£
 (i32 
pid
,i32 
fd
);

15 
i32
 
do_ªad
 (
u32
 
pid
,i32 
fd
,
i8
 * 
buf
,i32 
cou¡
);

17 
i32
 
	$ñÊﬂd
 (
i32
 
pid
,
i8
 *
bö
,
u32
 
size
,c⁄° i8 *
∑th
)

19 
i8
 
tmp
 [1024];

20 
ñf32_ehdr
 *
≥
 ;

21 
ñf32_phdr
 *
ph
 ;

22 
i32
 
fd
 ,
Àn
;

23 
RO
 
i8
 *
p
;

25 i‡(!
∑th
 || !
bö
 || !
size
)

26  (-
ENOPATH
);

27 
fd
 = 
	`do_›í
 (
pid
,
∑th
,
O_RDONLY
,0);

28 i‡(
fd
 < 0)

29  (-
EOPNFAILD
);

31 i‡(!(
Àn
 = 
	`do_ªad
 (
pid
,
fd
,
tmp
,(tmp)))) {

32 
	`do_˛o£
 (
pid
,
fd
);

33  (-
EBADRD
);

35 
≥
 = (
ñf32_ehdr
 *)
tmp
;

36 i‡((
≥
->
e_idít
 [0] !0x7FË|| 
	`°∫cmp
 ("ELF",(
i8
*)&(pe->e_ident [1]),3)) {

37 
	`do_˛o£
 (
pid
,
fd
);

38  (-
ENOTELF
);

40 #ifde‡
__DEBUG_ELF__


42 
	`¥ötf
 ( "==================================\n" );

43 
	`¥ötf
 ( "magi¯%c%c%¯\n",
≥
->
e_idít
 [1],pe->e_ident [2],pe->e_ident [3] );

44 i‡(!
≥
->
e_idít
 [4]) {

45 
	`do_˛o£
 (
pid
,
fd
);

46  (-
EOINVALID
);

48 
	`¥ötf
 ( "˛as†%d bô†obje˘ \n",(
≥
->
e_idít
 [4] == 1) ? 32:64 );

49 i‡(!
≥
->
e_idít
 [5]) {

50 
	`do_˛o£
 (
pid
,
fd
);

51  (-
EOINVALID
);

53 
	`¥ötf
 ( "ídü = %†\n",(
≥
->
e_idít
 [5] != 1) ? "big":"small" );

54 
	`¥ötf
 ( "vî = %d.0\n",
≥
->
e_idít
 [6] );

57 
≥
->
e_ty≥
)

59 1 : 
p
 = "relocational" ; ;

60 2 : 
p
 = "executable" ; ;

61 3 : 
p
 = "dynamicÜib" ; ;

62 4 : 
p
 = "core" ; ;

63 0xFF00 : 
p
 = "lowÖroc" ; ;

64 0xFFFF : 
p
 = "highÖroc" ; ;

66 
	`do_˛o£
 (
pid
,
fd
);

67  (-
EOINVALID
);

69 
	`¥ötf
 ( "ty≥ = %†fûê\n",
p
 );

71 
≥
->
e_machöe
)

73 1 : 
p
 = "AT&T WE32100" ; ;

74 2 : 
p
 = "SPARC" ; ;

75 3 : 
p
 = "Intel" ; ;

76 4 : 
p
 = "Moto68K" ; ;

77 5 : 
p
 = "Moto88K" ; ;

78 7 : 
p
 = "Intel80860" ; ;

79 8 : 
p
 = "MIPS RS3000" ; ;

80 10 : 
p
 = "MIPS RS4000" ; ;

81 0x28 : 
p
 = "ARM" ; ;

83 
	`do_˛o£
 (
pid
,
fd
);

84  (-
EOUNDEF
);

86 
	`¥ötf
 ( "mach = %†\n",
p
 );

88 
	`¥ötf
 ( "íåy = 0x%0x \n",
≥
->
e_íåy
 );

90 
	`¥ötf
 ( "phof‡0x%0x \n",
≥
->
e_phoff
 );

92 
	`¥ötf
 ( "scof‡0x%0x \n",
≥
->
e_shoff
 );

94 
	`¥ötf
 ( "esizê0x%0xB \n",
≥
->
e_ehsize
 );

96 
	`¥ötf
 ( "psizê0x%0xB \n",
≥
->
e_phítsize
 );

98 
	`¥ötf
 ( "ssizê0x%0xB \n",
≥
->
e_shítsize
 );

100 
	`¥ötf
 ( "ph_ƒ = 0x%x \n",
≥
->
e_phnum
 );

102 
	`¥ötf
 ( "scidx = 0x%0x \n",
≥
->
e_sh°∫dx
 );

105 
	`¥ötf
 ( "==================================\n" );

106 
ph
 = (
ñf32_phdr
 *)(
tmp
 + 
≥
->
e_phoff
);

108 
ph
->
p_ty≥
)

110 0 : 
p
 = "unused" ; ;

111 1 : 
p
 = "loadable" ; ;

112 2 : 
p
 = "dynamic" ; ;

113 3 : 
p
 = "interp" ; ;

114 4 : 
p
 = "note" ; ;

115  : 
p
 = "reserved" ; ;

117 
	`¥ötf
 ( "±y≥ = %†\n",
p
 );

119 
	`¥ötf
 ( "sgof‡0x%0x \n",
ph
->
p_off£t
 );

121 
	`¥ötf
 ( "sgvad = 0x%0x \n",
ph
->
p_vaddr
 );

123 
	`¥ötf
 ( "sg∑d = 0x%0x \n",
ph
->
p_∑ddr
 );

125 
	`¥ötf
 ( "sgfsz = 0x%0x \n",
ph
->
p_fûesz
 );

127 
	`¥ötf
 ( "sgmsz = 0x%0x \n",
ph
->
p_memsz
 );

129 
	`¥ötf
 ( "sgÆg = 0x%0x \n",(
ñf32_w‹d
)
ph
->
p_Æign
 );

131 
ph
->
p_Êags
)

135 5: 
p
 = "r-x" ; ;

139 7: 
p
 = "rwx" ; ;

140  : 
p
 = "undefined" ; ;

142 
	`¥ötf
 ( "≥rm = %†\n",
p
 );

144 i‡(
≥
->
e_idít
 [4] != 1) {

145 
	`do_˛o£
 (
pid
,
fd
);

146  (-
EONOSURPOT
);

148 i‡((
≥
->
e_ty≥
 != 2) && (pe->e_type != 3)) {

149 
	`do_˛o£
 (
pid
,
fd
);

150  (-
EONOSURPOT
);

152 i‡((
≥
->
e_machöe
 != 0x28) && (pe->e_machine != 3)) {

153 
	`do_˛o£
 (
pid
,
fd
);

154  (-
EONOSURPOT
);

157 
	`do_˛o£
 (
pid
,
fd
);

159 
	}
}

	@fs/fcntl.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

11 
i32
 
do_˛o£
 (i32 
pid
,i32 
fd
);

13 
LOCAL
 
i32
 
	$dupfd
 (
i32
 
pid
,i32 
fd
,i32 
°¨t
)

15 i‡((
fd
 >
MAX_FILPS
Ë|| !
	`pfûp
 (
pid
,fdË|| (
°¨t
 >= MAX_FILPS))

16  (-
EBADFD
);

17 
°¨t
 < 
MAX_FILPS
) {

18 i‡(
	`pfûp
 (
pid
,
°¨t
))

19 
°¨t
 ++;

23 i‡(
°¨t
 >
MAX_FILPS
)

24  (-
ENOFD
);

25 (
	`pfûp
 (
pid
,
fd
Ëpfû∞’id,
°¨t
))->
f_˙t
 ++;

26  (
°¨t
);

27 
	}
}

29 
i32
 
	$do_dupfd
 (
i32
 
pid
,i32 
fd
)

31  (
	`dupfd
 (
pid
,
fd
,0));

32 
	}
}

34 
i32
 
	$do_dup2
 (
i32
 
pid
,i32 
ﬁd
,i32 
√w
)

36 
	`do_˛o£
 (
pid
,
√w
);

37  (
	`dupfd
 (
pid
,
ﬁd
,
√w
));

38 
	}
}

	@fs/frw.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

9 
MEM_SUPER_BLOCK
 *
gë_sblk
 (
u16
);

10 
¸ash
 (c⁄° *
fmt
,...);

11 
BUFFER_HEAD
 *
gë_blk
 (
u16
,
u32
);

12 
bªl£
 (
BUFFER_HEAD
*);

13 
BUFFER_HEAD
* 
bªada
 (
u16
 
dev_no
,
u32
 
blk_no
 ,...) ;

14 
u32
 
bm≠
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
) ;

15 
u32
 
¸óã_block
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
,
u8
 *
¸óãd
) ;

16 
BUFFER_HEAD
 *
bªad
 (
u16
 
dev_no
,
u32
 
blk_no
) ;

18 
u32
 
	$fûe_rd
 (
MEM_INODE
 * 
öode
,
fûe_°
* 
this_fûe
,
i8
 * 
buf
,
i32
 
cou¡
)

20 
i32
 
À·
,
ch¨s
,
ƒ
;

21 
BUFFER_HEAD
 * 
bh
;

23 i‡(!
this_fûe
 || ((
À·
 = 
cou¡
Ë<0Ë|| !
buf
)

25 
À·
 > 0) {

26 i‡((
ƒ
 = 
	`bm≠
 (
öode
,(
this_fûe
->
f_pos
)>>
BLK_SIZE_SFT
))) {

27 i‡(!(
bh
 = 
	`bªad
 (
öode
->
i_dev
,
ƒ
)))

29 } 
bh
 = 
NULL
;

31 
ƒ
 = 
this_fûe
->
f_pos
 & 
BLK_SIZE_MSK
;

32 
ch¨s
 = 
BLK_SIZE
 - 
ƒ
;

33 i‡(
ch¨s
 > 
À·
)

34 
ch¨s
 = 
À·
;

35 
this_fûe
->
f_pos
 +
ch¨s
;

36 
À·
 -
ch¨s
;

37 i‡(
bh
) {

38 
i8
 * 
p
 = (i8*)(
ƒ
 + 
bh
->
bh_buf
);

39 
ch¨s
-->0)

40 *
buf
 ++ = *
p
 ++;

41 
	`bªl£
(
bh
);

44 
ch¨s
-->0)

45 *
buf
 ++ = 0x00;

48 
öode
->
i_acc_time
 = 
CUR_TIME
;

49  ((
cou¡
 - 
À·
)?(count -Üeft) : 0);

50 
	}
}

52 
u32
 
	$fûe_wr
 (
MEM_INODE
 *
m_wr
,
fûe_°
 *
this_fûe
,
i8
 *
buf
,
i32
 
˙t
)

54 i‡(!
this_fûe
 || (
˙t
 <0Ë|| !
buf
)

56 
u64
 
pos
 = 0;

58 i‡(
this_fûe
->
f_Êags
 & 
O_APPEND
)

59 
pos
 = 
m_wr
->
i_size
;

61 
pos
 = 
this_fûe
->
f_pos
;

63 
BUFFER_HEAD
 *
bh
;

64 
u32
 
blk_no
 = 0,
off£t
 = 0;

65 
i32
 
ch¨s
 = 0,
wrôãn
 = 0;

66 
i8
 *
p
 = 
NULL
;

67 
u8
 
¸óãd
 = 
Ál£
;

69 
˙t
 > 0) {

70 i‡(!(
blk_no
 = 
	`¸óã_block
 (
m_wr
,(
this_fûe
->
f_pos
>>
BLK_SIZE_SFT
),&
¸óãd
)))

72 i‡(!(
bh
 = 
	`bªad
 (
m_wr
->
i_dev
,
blk_no
)) )

74 
off£t
 = 
pos
 & 
BLK_SIZE_MSK
;

75 
ch¨s
 = 
BLK_SIZE
- 
off£t
;

76 i‡(
ch¨s
 > 
˙t
)

77 
ch¨s
 = 
˙t
 ;

78 
p
 = (
i8
*)(
bh
->
bh_buf
 + 
off£t
) ;

83 
pos
 +
ch¨s
 ;

84 i‡–
pos
 > 
m_wr
->
i_size
 ) {

85 
m_wr
->
i_size
 = 
pos
;

86 
m_wr
->
i_dút
 = 
åue
;

88 
˙t
 -
ch¨s
 ;

89 
wrôãn
 +
ch¨s
 ;

90 
this_fûe
->
f_pos
 +
ch¨s
;

91  
ch¨s
 -- > 0 )

92 *
p
 ++ = *
buf
 ++;

93 
bh
->
bh_dút
 = 
åue
;

94 
	`bªl£
 (
bh
);

96 
m_wr
->
i_mtime
 = 
CUR_TIME
;

100 i‡(!(
this_fûe
->
f_Êags
 & 
O_APPEND
 )) {

101 
this_fûe
->
f_pos
 = 
pos
;

102 
m_wr
->
i_¸t_time
 = 
CUR_TIME
;

104  (
wrôãn
);

105 
	}
}

	@fs/getline.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/exec.h
>

7 
i32
 
	$gë¨gv
 (
RO
 
i8
 *
§c
,i8 
¨gv
[][
NR_SRC_SIZE
])

9 
i8
 *
p
 = (i8*)
§c
;

10 
i32
 
¨gc
 = 0,
i
 = 0;

12 *
p
) {

13 *
p
 && ((*p == ' ') || (*p == '\t')))Ö ++;

14 *
p
 && (*∞!' 'Ë&& (*∞!'\t')Ë
¨gv
[
¨gc
][
i
++] = *p ++;

15 
¨gv
[
¨gc
][
i
] = '\0';

16 
i
 = 0;

17 
¨gc
 ++;

19  (
¨gc
);

20 
	}
}

	@fs/inode.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

6 
	~<sys/°©.h
>

8 
MEM_INODE
 
	göode_èbÀ
[
NR_INODE_BUF
] ;

10 
MEM_SUPER_BLOCK
 *
gë_sblk
 (
u16
 
dev_no
);

11 
¸ash
 (c⁄° *
fmt
,...);

12 
BUFFER_HEAD
* 
bªad
 (
u16
,
u32
);

13 
bªl£
 (
BUFFER_HEAD
 *);

14 
w¨n
 (c⁄° *
fmt
,...);

17 
LOCAL
 
	$ªad_dev_öode
 (
MEM_INODE
 *
m_öode
)

19 
u32
 
öode_blk_ƒ
,
öode_bô_ƒ
;

20 
MEM_SUPER_BLOCK
 *
sb
;

21 
BUFFER_HEAD
 *
bh
;

23 i‡(!
m_öode
 || !m_öode->
i_dev
 || m_öode->
i_vÆid
)

25 i‡(!(
sb
 = 
	`gë_sblk
 (
m_öode
->
i_dev
)))

26 
	`¸ash
 ( "read inode fromÇonexistent dev !" );

27 
öode_blk_ƒ
 = 
m_öode
->
i_num
 / 
INODES_PER_BLK
;

28 
öode_bô_ƒ
 = 
m_öode
->
i_num
 % 
INODES_PER_BLK
;

29 
öode_blk_ƒ
 = 2 + 
sb
->
sb_im≠_blocks
 + sb->
sb_zm≠_blocks
 + inode_blk_nr;

30 i‡(!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,
öode_blk_ƒ
)))

31 
	`¸ash
 ("read_dev_i bread failed !");

32 
	`mem˝y
 (
m_öode
,((
DEV_INODE
*)
bh
->
bh_buf
Ë+ 
öode_bô_ƒ
,(DEV_INODE)) ;

33 
	`bªl£
 (
bh
);

34 
m_öode
->
i_vÆid
 = 
åue
;

35 
	}
}

37 
LOCAL
 
	$wrôe_dev_öode
 (
MEM_INODE
 *
m_öode
)

39 
u32
 
öode_blk_ƒ
,
öode_bô_ƒ
;

40 
MEM_SUPER_BLOCK
 *
sb
 ;

41 
BUFFER_HEAD
 *
bh
;

43 i‡(!
m_öode
 || !m_öode->
i_dev
 || !m_öode->
i_dút
)

45 i‡–!(
sb
 = 
	`gë_sblk
 (
m_öode
->
i_dev
)))

46 
	`¸ash
 ( "to write inode without dev !\n" );

47 
öode_blk_ƒ
 = 
m_öode
->
i_num
 / 
INODES_PER_BLK
;

48 
öode_bô_ƒ
 = 
m_öode
->
i_num
 % 
INODES_PER_BLK
;

49 
öode_blk_ƒ
 = 2 + 
sb
->
sb_im≠_blocks
 + sb->
sb_zm≠_blocks
 + inode_blk_nr;

50 i‡(!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,
öode_blk_ƒ
)))

51 
	`¸ash
 ("read_dev_i bread failed !\n");

52 
	`mem˝y
 (((
DEV_INODE
*)
bh
->
bh_buf
Ë+ 
öode_bô_ƒ
,
m_öode
,(DEV_INODE)) ;

53 
bh
->
bh_dút
 = 
åue
;

54 
	`bªl£
 (
bh
);

55 
m_öode
->
i_dút
 = 
Ál£
;

56 
m_öode
->
i_vÆid
 = 
åue
;

57 
	}
}

59 
	$sync_dev_öodes
 ()

61 
u32
 
i
;

62 
i
 = 0 ; i < 
NR_INODE_BUF
 ; i++) {

63 i‡(
öode_èbÀ
[
i
].
i_˙t
) ;

64 i‡(
öode_èbÀ
[
i
].
i_dút
 && inode_èbÀ[i].
i_vÆid
) {

65 
	`wrôe_dev_öode
 (
öode_èbÀ
+
i
);

66 
	`mem£t
 (
öode_èbÀ
+
i
,0,(
MEM_INODE
));

69 
	}
}

71 
MEM_INODE
 *
	$gë_em±y_öode
 ()

73 
i32
 
i
;

74 
åue
) {

75 
i
 = 0 ; i < 
NR_INODE_BUF
 ; i++) {

76 i‡(
öode_èbÀ
[
i
].
i_˙t
) ;

77 i‡(
öode_èbÀ
[
i
].
i_dút
 && inode_èbÀ[i].
i_vÆid
)

79 
	`mem£t
 (
öode_èbÀ
+
i
,0,(
MEM_INODE
));

80  (
öode_èbÀ
+
i
);

82 
	`sync_dev_öodes
 ();

84  (
NULL
);

85 
	}
}

87 
MEM_SUPER_BLOCK
 
su≥r_blk
 [
NR_SBLKS
];

88 
˛ór_iblks
 (
MEM_INODE
 *
m_öode
) ;

89 
i32
 
‰ì_öode
 (
MEM_INODE
 *
öode
) ;

90 
MEM_INODE
* 
√w_öode
 (
u16
 
dev_no
) ;

92 
	$ùut
 (
MEM_INODE
 *
m_puti
)

94 i‡(!
m_puti
 || !m_puti->
i_˙t
)

96 i‡(!
m_puti
->
i_dev
) {

97 
m_puti
->
i_˙t
 --;

100 i‡(!(-- 
m_puti
->
i_˙t
)) {

101 i‡(!
m_puti
->
i_∆öks
) {

102 
	`˛ór_iblks
 (
m_puti
);

103 
	`‰ì_öode
 (
m_puti
);

106 i‡(
m_puti
->
i_dút
 && m_puti->
i_vÆid
)

107 
	`wrôe_dev_öode
 (
m_puti
);

109 
	}
}

111 
LOCAL
 
u8
 
	$gëbô
 (
u8
 *
addr
,
u32
 
bôno
)

113 
u8
 
ƒ
 = 
bôno
&7;

115 
addr
 +(
bôno
>>3);

116  (((*
addr
Ë& (1<<
ƒ
)) >>Çr);

117 
	}
}

119 
MEM_INODE
* 
	$igë
 (
u16
 
dev_no
,
u32
 
öode_ƒ
)

121 
MEM_INODE
 *
m_öode
;

122 
BUFFER_HEAD
 *
tmp
;

123 
u32
 
i
,
j
;

124 
MEM_SUPER_BLOCK
 *
sb
 ;

128 i‡(!(
sb
 = 
	`gë_sblk
 (
dev_no
)))

129 
	`¸ash
 ( "iget with bad dev or bad inr!" );

130 i‡(!(
tmp
 = 
sb
->
sb_im≠_bh
[
öode_ƒ
>>
BLK_BITS_SFT
]))

131 
	`¸ash
 ( "im≠ block %dÇŸÉxi°íà!",
öode_ƒ
>>
BLK_BITS_SFT
 );

132 i‡(!
	`gëbô
 (
tmp
->
bh_buf
,
öode_ƒ
 & 
BLK_BITS_MSK
)) {

133 
	`w¨n
 ( "igëá invÆid©êöodêƒ %d ",
öode_ƒ
 );

134  (
NULL
);

136 
i
 = 0; i < 
NR_INODE_BUF
 ;i ++) {

137 
m_öode
 = &
öode_èbÀ
[
i
];

138 i‡(!
m_öode
->
i_vÆid
)

140 i‡(
m_öode
->
i_dev
 =
dev_no
 && m_öode->
i_num
 =
öode_ƒ
) {

141 
m_öode
->
i_˙t
 ++;

142 i‡(
m_öode
->
i_mou¡ed
) {

143 
j
 = 0 ; j < 
NR_SBLKS
 ; j++)

144 i‡(
su≥r_blk
 [
j
].
sb_i_mou¡ed
 =
m_öode
) {

145 
dev_no
 = 
su≥r_blk
 [
j
].
sb_dev
;

146 
öode_ƒ
 = 
ROOT_IND_NR
;

147 
	`ùut
 (
m_öode
);

148 
_READ_DEV
;

151  (
m_öode
);

154 
_READ_DEV
:

157 i‡((
m_öode
 = 
	`gë_em±y_öode
 ())) {

158 
	`mem£t
 (
m_öode
,0,(
MEM_INODE
));

159 
m_öode
->
i_˙t
 = 1;

160 
m_öode
->
i_dev
 = 
dev_no
;

161 
m_öode
->
i_num
 = 
öode_ƒ
;

162 
	`ªad_dev_öode
 (
m_öode
);

163  (
m_öode
);

165  (
NULL
);

166 
	}
}

168 
MEM_SUPER_BLOCK
 
su≥r_blk
 [
NR_SBLKS
];

170 
	$öô_isˇche
 ()

172 
	`mem£t
 (
öode_èbÀ
,0,(inode_table));

173 
	`mem£t
 (
su≥r_blk
,0,
NR_SBLKS
 * ((
MEM_SUPER_BLOCK
)));

174 
	}
}

176 
MEM_INODE
 *
√w_öode
 (
u16
);

177 
i32
 
‰ì_öode
 (
MEM_INODE
 *);

178 
u32
 
√w_block
 (
u16
);

179 
‰ì_block
 (
u16
,
u32
);

181 
LOCAL
 
u32
 
	$_bm≠
 (
MEM_INODE
 *
m_öode
,
u32
 
fûe_blk_no
,
u8
 *
f¸t
)

183 
BUFFER_HEAD
 *
bh
 ;

184 
u32
 
blk_no
 = 0, *
p
 = 
NULL
;

186 i‡(!
m_öode
 || !m_öode->
i_dev
)

187 
	`¸ash
 ( "_bamp : bad dev" );

188 i‡(!
m_öode
->
i_vÆid
)

189 
	`¸ash
 ("_bm≠ :bad inodê(dev 0x%x,ö∏%d)!\n",
m_öode
->
i_dev
,m_öode->
i_num
);

190 i‡(
fûe_blk_no
 >7 + 
NR_BLK_OBJS
 + NR_BLK_OBJS * NR_BLK_OBJS)

191 
	`¸ash
 ( "_bmap : blk_no isÅoo big !\n" );

192 i‡(
fûe_blk_no
 < 7) {

193 i‡(*
f¸t
 && !
m_öode
->
i_z⁄e
[
fûe_blk_no
]) {

194 i‡((
m_öode
->
i_z⁄e
[
fûe_blk_no
] = 
	`√w_block
 (m_öode->
i_dev
))) {

195 *
f¸t
 = 0xFF;

196 
m_öode
->
i_¸t_time
 = 
CUR_TIME
;

197 
m_öode
->
i_dút
 = 
åue
;

200  (
m_öode
->
i_z⁄e
[
fûe_blk_no
]);

202 
fûe_blk_no
 -= 7 ;

203 i‡(
fûe_blk_no
 < 
NR_BLK_OBJS
) {

204 i‡(*
f¸t
 && !
m_öode
->
i_z⁄e
[7]) {

205 i‡((
m_öode
->
i_z⁄e
[7] = 
	`√w_block
 (m_öode->
i_dev
))) {

206 
m_öode
->
i_dút
 = 
åue
;

207 
m_öode
->
i_¸t_time
 = 
CUR_TIME
;

210 i‡((!
m_öode
->
i_z⁄e
[7])||!(
bh
 = 
	`bªad
(m_öode->
i_dev
,m_inode->i_zone[7])))

215 
p
 = (
u32
*)(
bh
->
bh_buf
);

216 
blk_no
 = 
p
[
fûe_blk_no
];

217 i‡(*
f¸t
 && !
blk_no
) {

218 i‡((
blk_no
 = 
	`√w_block
 (
m_öode
->
i_dev
))) {

219 *
f¸t
 = 0xFF;

220 
p
[
fûe_blk_no
] = (
u32
)
blk_no
;

221 
bh
->
bh_dút
 = 
åue
;

224 
	`bªl£
 (
bh
);

225  (
blk_no
) ;

227 
fûe_blk_no
 -
NR_BLK_OBJS
 ;

228 i‡(*
f¸t
 && !
m_öode
->
i_z⁄e
[8]) {

229 i‡((
m_öode
->
i_z⁄e
[8] = 
	`√w_block
 (m_öode->
i_dev
))) {

230 
m_öode
->
i_dút
 = 
åue
;

231 
m_öode
->
i_¸t_time
 = 
CUR_TIME
;

234 i‡((!
m_öode
->
i_z⁄e
[8])||!(
bh
 = 
	`bªad
(m_öode->
i_dev
,m_inode->i_zone[8])))

236 
p
 = (
u32
*)(
bh
->
bh_buf
);

237 
blk_no
 = 
p
[
fûe_blk_no
>>
BLK_OBJ_SFT
];

238 i‡(*
f¸t
 && !
blk_no
) {

239 i‡((
blk_no
 = 
	`√w_block
 (
m_öode
->
i_dev
))) {

240 
p
[
fûe_blk_no
 >> 
BLK_OBJ_SFT
] = 
blk_no
 ;

241 
bh
->
bh_dút
 = 
åue
;

244 
	`bªl£
 (
bh
);

245 i‡(!
blk_no
||!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,blk_no)))

247 
p
 = (
u32
*)(
bh
->
bh_buf
);

248 
blk_no
 = 
p
[
fûe_blk_no
 & 
BLK_OBJ_MSK
];

249 i‡(!
blk_no
 && *
f¸t
) {

250 i‡((
blk_no
 = 
	`√w_block
 (
m_öode
->
i_dev
))) {

251 *
f¸t
 = 0xFF;

252 
p
[
fûe_blk_no
 & 
BLK_OBJ_MSK
] = 
blk_no
;

253 
bh
->
bh_dút
 = 
åue
;

256 
	`bªl£
 (
bh
);

257  (
blk_no
);

258 
	}
}

260 
u32
 
	$bm≠
 (
MEM_INODE
 *
m_öode
,
u32
 
fûe_blk_no
)

262 
u8
 
tmp
 = 
Ál£
;

263  (
	`_bm≠
 (
m_öode
,
fûe_blk_no
,&
tmp
));

264 
	}
}

266 
u32
 
	$¸óã_block
 (
MEM_INODE
 *
m_öode
,
u32
 
fûe_blk_no
,
u8
 *
¸óãd
)

268 i‡(
¸óãd
) {

269 *
¸óãd
 = 
åue
;

270  (
	`_bm≠
 (
m_öode
,
fûe_blk_no
,
¸óãd
));

273 
	}
}

276 
LOCAL
 
	$‰ì_öd
 (
u16
 
dev_no
,
u32
 
blk_no
)

278 
u32
 *
p
 = 
NULL
,
i
 = 0;

280 i‡(!
dev_no
 || !
blk_no
)

282 
BUFFER_HEAD
 *
bh
;

284 i‡((
bh
 = 
	`bªad
 (
dev_no
,
blk_no
))) {

285 
p
 = (
u32
*)(
bh
->
bh_buf
);

286 
i
 = 0 ; i < 
NR_BLK_OBJS
 ; i ++)

287 i‡(
p
[
i
])

288 
	`‰ì_block
 (
dev_no
,
p
[
i
]);

289 
	`bªl£
 (
bh
);

291 
	`‰ì_block
 (
dev_no
,
blk_no
);

292 
	}
}

294 
LOCAL
 
	$‰ì_död
 (
u16
 
dev_no
,
u32
 
blk_no
)

296 i‡(!
dev_no
 || !
blk_no
)

298 
BUFFER_HEAD
 *
bh
;

299 
u32
 *
p
,
i
 = 0 ;

301 i‡((
bh
 = 
	`bªad
 (
dev_no
,
blk_no
))) {

302 
p
 = (
u32
*)(
bh
->
bh_buf
);

303 
i
 = 0 ; i < 
NR_BLK_OBJS
 ; i ++)

304 i‡(
p
[
i
])

305 
	`‰ì_öd
 (
dev_no
,
p
[
i
]);

306 
	`bªl£
 (
bh
);

308 
	`‰ì_block
 (
dev_no
,
blk_no
);

309 
	}
}

311 
	$˛ór_iblks
 (
MEM_INODE
 *
m_öode
)

313 
u8
 
i
 = 0;

315 i‡(!
m_öode
 ||!m_öode->
i_dev
)

317 i‡(!
	`S_ISREG
 (
m_öode
->
i_mode
Ë|| 
	`S_ISDIR
(m_inode->i_mode))

319 
i
 = 0 ; i < 7 ; i ++) {

320 i‡(
m_öode
->
i_z⁄e
[
i
]) {

321 
	`‰ì_block
 (
m_öode
->
i_dev
,m_öode->
i_z⁄e
[
i
]);

322 
m_öode
->
i_z⁄e
[
i
] = 0;

325 
	`‰ì_öd
 (
m_öode
->
i_dev
,m_öode->
i_z⁄e
[7]);

326 
	`‰ì_död
(
m_öode
->
i_dev
,m_öode->
i_z⁄e
[8]);

327 
m_öode
->
i_z⁄e
[7] = m_inode->i_zone[8] = 0;

328 
m_öode
->
i_size
 = 0;

329 
m_öode
->
i_mtime
 = m_öode->
i_acc_time
 = 
CUR_TIME
;

330 
	}
}

332 
	$‰ì_fûe_blk
 (
MEM_INODE
 *
m_öode
,
u32
 
fûe_blk_no
)

334 i‡(!
m_öode
)

336 
BUFFER_HEAD
 *
bh
 ;

337 
u32
 
blk_no
 = 0;

338 
u32
 *
p
 = 
NULL
;

340 i‡(!
m_öode
->
i_dev
)

341 
	`¸ash
 ( "‰ì fûêblk %d o¿n⁄-exi°íàdev.\n",
fûe_blk_no
 );

342 i‡(!
m_öode
->
i_˙t
)

343 
	`¸ash
 ( "free from invalidate inode\n" );

344 i‡(
fûe_blk_no
 >7 + 
NR_BLK_OBJS
 + NR_BLK_OBJS * NR_BLK_OBJS)

345 
	`¸ash
 ( "free_file_blk : blk_no isÅoo big !\n" );

346 i‡(
fûe_blk_no
 < 7) {

347 
	`‰ì_block
 (
m_öode
->
i_dev
,m_öode->
i_z⁄e
[
fûe_blk_no
]);

348 
m_öode
->
i_z⁄e
[
fûe_blk_no
] = 0;

349 
m_öode
->
i_dút
 = 
åue
;

352 
fûe_blk_no
 -= 7 ;

353 i‡(
fûe_blk_no
 < 
NR_BLK_OBJS
) {

354 i‡(!
m_öode
->
i_z⁄e
[7])

356 i‡(!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,m_öode->
i_z⁄e
[7])))

358 
p
 = (
u32
*)(
bh
->
bh_buf
);

359 
blk_no
 = 
p
[
fûe_blk_no
];

360 
	`‰ì_block
 (
m_öode
->
i_dev
,
blk_no
);

361 
p
[
fûe_blk_no
] = 0;

362 
bh
->
bh_dút
 = 
åue
;

363 
	`bªl£
 (
bh
);

366 
fûe_blk_no
 -
NR_BLK_OBJS
 ;

367 i‡(!
m_öode
->
i_z⁄e
[8])

369 i‡(!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,m_öode->
i_z⁄e
[8])))

371 
p
 = (
u32
*)(
bh
->
bh_buf
);

372 
blk_no
 = 
p
[
fûe_blk_no
>>
BLK_OBJ_SFT
];

373 
	`bªl£
 (
bh
);

374 i‡(!
blk_no
)

376 i‡(!(
bh
 = 
	`bªad
 (
m_öode
->
i_dev
,
blk_no
)))

378 
p
 = (
u32
*)(
bh
->
bh_buf
);

379 
blk_no
 = 
p
[
fûe_blk_no
 & 
BLK_OBJ_MSK
];

380 
	`‰ì_block
 (
m_öode
->
i_dev
,
blk_no
);

381 
p
[
fûe_blk_no
 & 
BLK_OBJ_MSK
] = 0;

382 
bh
->
bh_dút
 = 
åue
;

383 
	`bªl£
 (
bh
);

384 
	}
}

	@fs/iocntl.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

11 
i32
 
	$do_io˘l
 (
i32
 
pid
,i32 
fd
,
u32
 
cmd
,u32 
¨g
)

13  (-
EBADFSCALL
);

14 
	}
}

	@fs/main.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<eˇ£y/fs.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<eˇ£y/exec.h
>

9 
	~<2440/p‹ts.h
>

11 
LOCAL
 
i8
 
	gbuf
[
NR_ARGC
 * 
NR_SRC_SIZE
] = {0};

12 
LOCAL
 
i8
 
	g¨gv
[
NR_ARGC
][
NR_SRC_SIZE
];

13 
u32
 
gëchs
 (
i8
 *
buf
,u32);

14 
i32
 
gë¨gv
 (
RO
 
i8
* 
§c
,i8 
¨gv
[][
NR_SRC_SIZE
]);

16 
	#LECHO
(
buf
Ë
	`puts
(buf)

	)

18 
i32
 
öô_buf„r
 ();

19 
öô_isˇche
 ();

20 
öô_·bl
 ();

21 
u32
 
sync_blks
 (u32 
blks_˙t
) ;

22 
lﬂd_roŸfs
 (
u16
 
dev_no
);

23 
put_roŸfs
 (
u16
 
dev_no
);

24 
w¨n
 (
RO
 
i8
 *
fmt
,...);

25 
≥º
 (
i32
 
î∫o
);

26 
sync_dev_öodes
 ();

27 
i32
 
sync_é
 ();

28 
i32
 
¸óã_ømdsk
 ();

30 
i32
 
do_mkdú
 (
RO
 
i8
 *
∑th
 ,
u16
 
mode
) ;

31 
i32
 
do_rmdú
 (
RO
 
i8
 *
∑th
) ;

32 
i32
 
do_ls
 (
RO
 
i8
 *
∑th
);

33 
i32
 
do_chdú
 (
RO
 
i8
 *
∑th
);

34 
i32
 
do_chroŸ
 (
RO
 
i8
 *
∑th
);

35 
i32
 
do_chmod
 (
RO
 
i8
 *
∑th
,
u16
 
mode
);

36 
i32
 
do_mknod
 (
RO
 
i8
* 
∑th
,
u16
 
mode
,u16 
dev
);

37 
i32
 
do_˛o£
 (i32 
pid
,i32 
fd
);

38 
i32
 
do_›í
 (i32 
pid
,
RO
 
i8
 *
∑th
,i32 
Êag
,i32 
mode
);

39 
i32
 
do_dum≤od
 (
RO
 
i8
 *
∑th
);

40 
i32
 
do_hlök
 (
RO
 
i8
 *
ﬁd_«me
,RO i8 *
√w_«me
) ;

41 
i32
 
do_unhlök
 (
RO
 
i8
* 
«me
) ;

42 
i32
 
do_wrôe
 (
u32
 
pid
,i32 
fd
,
i8
 * 
buf
,i32 
cou¡
);

43 
i32
 
do_ªad
 (
u32
 
pid
,i32 
fd
,
i8
 * 
buf
,i32 
cou¡
);

44 
i32
 
do_l£ek
 (
u32
 
pid
,i32 
fd
,u32 
off£t
,i32 
‹igö
);

45 
i32
 
do_mou¡
 (
RO
 
i8
 *
dev_«me
,RO i8 *
dú_«me
,
u32
 
rw
);

46 
i32
 
do_umou¡
 (
RO
 
i8
 *
dú_«me
);

47 
i32
 
do_f°©
 (i32 
pid
,i32 
fd
,
°©
 *
p
) ;

48 
i32
 
do_°©
 (
RO
 
i8
 *
‚ame
,
°©
 *
p
);

49 
i32
 
do_dupfd
 (i32,i32);

50 
i32
 
do_dup2
 (i32,i32,i32);

51 
¥oc_°
 *
¥oc
;

52 
i32
 
ñÊﬂd
 (i32 
pid
,
i8
 *
bö
,
u32
 
size
,
RO
 i8 *
∑th
) ;

54 
	$maö
 ()

56 
u16
 
dev
 = 
DEV_NAND
;

57 
i32
 
ªt
,
Àn
,
i
;

59 
	`¥ötf
 ( "$ >ÅŸÆ buf„r†%d \n",
	`öô_buf„r
 () );

60 
	`öô_isˇche
 ();

61 
	`öô_·bl
 ();

62 
	`lﬂd_roŸfs
 (
dev
);

63 
	`¸óã_ømdsk
 ();

65 
åue
) {

66 
	`PROMOT
 ();

67 
	`mem£t
 (
¨gv
,0,(argv));

68 
	`mem£t
 (
buf
,0,(buf));

69 
	`gëchs
 (
buf
,(buf));

70 
	`gë¨gv
 (
buf
,(
	`i8
 (*Ë[
NR_SRC_SIZE
])
¨gv
);

72 i‡(!
	`°rcmp
 (
¨gv
[0],"q")) {

74 } i‡(!
	`°rcmp
 (
¨gv
[0], "mkdir")) {

75 
	`≥º
 (
	`do_mkdú
 (
¨gv
[1],0));

76 } i‡(!
	`°rcmp
 (
¨gv
[0],"rmdir")) {

77 
	`≥º
 (
	`do_rmdú
 (
¨gv
[1]));

78 } i‡(!
	`°rcmp
 (
¨gv
[0],"ls")) {

79 
	`≥º
 (
	`do_ls
 (
¨gv
[1]));

80 } i‡(!
	`°rcmp
 (
¨gv
[0],"cd")) {

81 
	`≥º
 (
	`do_chdú
 (
¨gv
[1]));

82 } i‡(!
	`°rcmp
 (
¨gv
[0],"chroot")) {

83 
	`≥º
 (
	`do_chroŸ
 (
¨gv
[1]));

84 } i‡(!
	`°rcmp
 (
¨gv
[0],"chmod")) {

85 
	`≥º
 (
	`do_chmod
 (
¨gv
[1],0));

86 } i‡(!
	`°rcmp
 (
¨gv
[0],"mount")) {

87 
	`≥º
 (
	`do_mou¡
 (
¨gv
[1],argv[2],1));

88 } i‡(!
	`°rcmp
 (
¨gv
[0],"umount")) {

89 
	`≥º
 (
	`do_umou¡
 (
¨gv
[1]));

90 } i‡(!
	`°rcmp
 (
¨gv
[0],"mknod")) {

91 
u16
 
mod
;

92 i‡(!
	`°rcmp
 (
¨gv
[1],"-b"))

93 
mod
 = 
I_BLOCK_SPECIAL
;

94 i‡(!
	`°rcmp
 (
¨gv
[1],"-c"))

95 
mod
 = 
I_CHAR_SPECIAL
;

97 
	`¥ötf
 ( "wrongÇodeÅype !\n" );

100 
	`≥º
 (
	`do_mknod
 (
¨gv
[2],
mod
,
	`©oi
 (argv[3])));

101 } i‡(!
	`°rcmp
 (
¨gv
[0],"ln")) {

102 
	`≥º
 (
	`do_hlök
 (
¨gv
[1],argv[2]));

103 } i‡(!
	`°rcmp
 (
¨gv
[0],"rm")) {

104 
	`≥º
 (
	`do_unhlök
 (
¨gv
[1]));

105 } i‡(!
	`°rcmp
 (
¨gv
[0],"dpnod")) {

106 
	`≥º
 (
	`do_dum≤od
 (
¨gv
[1]));

107 } i‡(!
	`°rcmp
 (
¨gv
[0],"cat")) {

108 
i32
 
fd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[1],
O_RDONLY
,0);

109 i‡(
fd
 < 0) {

110 
	`¥ötf
 ( "open file failed !\n" );

113 (
ªt
 = 
	`do_ªad
 (
¥oc
->
pid
,
fd
,
buf
,(buf))))

114 
i
 = 0; i < 
ªt
 ;i++)

115 
	`¥ötf
 ( "%c",
buf
[
i
]);

116 
	`do_˛o£
 (
¥oc
->
pid
,
fd
);

117 } i‡(!
	`°rcmp
 (
¨gv
[0],"cp")) {

118 
i32
 
fdrd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[1],
O_RDONLY
,0);

119 i‡(
fdrd
 < 0) {

120 
	`¥ötf
 ( "open file failed !\n" );

123 
i32
 
fd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[2],
O_CREAT
 | 
O_RDWR
,0);

124 i‡(
fd
 < 0) {

125 
	`¥ötf
 ( "open file failed !\n" );

126 
	`do_˛o£
 (
¥oc
->
pid
,
fdrd
);

129 (
Àn
 = 
	`do_ªad
 (
¥oc
->
pid
,
fdrd
,
buf
,(buf))))

130 
	`do_wrôe
 (
¥oc
->
pid
,
fd
,
buf
,
Àn
);

131 
	`do_˛o£
 (
¥oc
->
pid
,
fd
);

132 
	`do_˛o£
 (
¥oc
->
pid
,
fdrd
);

133 } i‡(!
	`°rcmp
 (
¨gv
[0],"mv")) {

134 
i32
 
fdrd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[1],
O_RDONLY
,0);

135 i‡(
fdrd
 < 0) {

136 
	`¥ötf
 ( "open file failed !\n" );

139 
i32
 
fd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[2],
O_CREAT
 | 
O_RDWR
,0);

140 i‡(
fd
 < 0) {

141 
	`¥ötf
 ( "open file failed !\n" );

142 
	`do_˛o£
 (
¥oc
->
pid
,
fdrd
);

145 (
Àn
 = 
	`do_ªad
 (
¥oc
->
pid
,
fdrd
,
buf
,(buf))))

146 
	`do_wrôe
 (
¥oc
->
pid
,
fd
,
buf
,
Àn
);

147 
	`do_˛o£
 (
¥oc
->
pid
,
fd
);

148 
	`do_˛o£
 (
¥oc
->
pid
,
fdrd
);

149 
	`do_unhlök
 (
¨gv
[1]);

150 } i‡(!
	`°rcmp
 (
¨gv
[0],"load")) {

151 
	`≥º
 (
	`ñÊﬂd
 (
¥oc
->
pid
,
buf
,(buf),
¨gv
[1]));

152 } i‡(!
	`°rcmp
 (
¨gv
[0],"write")) {

153 
i32
 
fd
 = 
	`do_›í
 (
¥oc
->
pid
,
¨gv
[1],
O_CREAT
 | 
O_RDWR
,0);

154 i‡(
fd
 < 0) {

155 
	`¥ötf
 ( "open file failed !\n" );

158 
	`do_wrôe
 (
¥oc
->
pid
,
fd
,
buf
,(buf));

159 
	`do_˛o£
 (
¥oc
->
pid
,
fd
);

161 
	`¥ötf
 ( "commandÇot found !\n" );

164 
	`put_roŸfs
 (
dev
);

165 
	`sync_dev_öodes
 ();

166 
	`sync_blks
 (-1);

167 
	`sync_é
 ();

168 
	`¥ötf
 ( "sync done !\n" );

169 
åue
);

170 
	}
}

	@fs/namei.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

10 
u32
 
bm≠
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
) ;

11 
u32
 
¸óã_block
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
,
u8
 *
¸óãd
);

12 
BUFFER_HEAD
* 
bªad
 (
u16
,
u32
);

13 
bªl£
 (
BUFFER_HEAD
 *);

14 
ùut
 (
MEM_INODE
 *);

16 
BUFFER_HEAD
 *
gë_blk
 (
u16
 
dev_no
,
u32
 
blk_no
) ;

17 
MEM_SUPER_BLOCK
* 
gë_sblk
 (
u16
 
dev_no
) ;

19 
¸ash
 (c⁄° *
fmt
,...) ;

20 
¥oc_°
 *
¥oc
;

23 
BUFFER_HEAD
 *
	$föd_íåy
 (
MEM_INODE
 **
m_dú
,
i8
 *
íåy_«me
,

24 
u32
 
«me_Àn
,
DIR_ENTRY
 **
bh_de_±r
)

30 
MEM_SUPER_BLOCK
 *
sb
;

32 i‡(!
m_dú
 || !(*m_dúË|| !
bh_de_±r
 || !(*m_dú)->
i_dev
)

33  (
NULL
);

34 i‡(!
«me_Àn
)

35  ((*)((*
bh_de_±r
Ë
NULL
));

36 i‡(
«me_Àn
 > (
NAME_LEN
))

37 
«me_Àn
 = 
NAME_LEN
 - 1;

38 
BUFFER_HEAD
 *
bh
;

39 
i32
 
§c_Àn
,
i
,
j
,
blk_no
,
blk_ƒ
 = ((*
m_dú
)->
i_size
 + 
BLK_SIZE
 - 1) >> 12;

40 
DIR_ENTRY
 *
de_±r
 = 
NULL
;

42 i‡(!
	`°∫cmp
 (
íåy_«me
,"..",2)) {

43 i‡((*
m_dú
)->
i_num
 =
ROOT_IND_NR
) {

44 
sb
 = 
	`gë_sblk
 ((*
m_dú
)->
i_dev
);

45 i‡(
sb
->
sb_i_mou¡ed
) {

46 
	`ùut
 (*
m_dú
);

47 *
m_dú
 = 
sb
->
sb_i_mou¡ed
;

48 (*
m_dú
)->
i_˙t
 ++;

50 } i‡(((*
m_dú
)->
i_dev
 =
¥oc
->
roŸ
.
dev
Ë&& ((*m_dú)->
i_num
 =¥oc->roŸ.
ör
)) {

51 
«me_Àn
 = 1;

54 
i
 = 0 ; i < (
NR_BLK_OBJS
 * NR_BLK_OBJS + NR_BLK_OBJS + 7Ë&& 
blk_ƒ
 > 0; i ++) {

55 i‡(!(
blk_no
 = 
	`bm≠
 ((*
m_dú
),
i
)))

57 
bh
 = 
	`bªad
 ((*
m_dú
)->
i_dev
,
blk_no
);

58 
blk_ƒ
 --;

59 i‡(!
bh
)

61 
de_±r
 = (
DIR_ENTRY
*)(
bh
->
bh_buf
);

62 
j
 = 0 ; j < 
ENTRIES_PER_BLK
 ; j ++) {

63 i‡(
	`IND_EMPTY
(
de_±r
[
j
].
öode_ƒ
Ë&& !de_±r[j].
«me
[0])

65 
§c_Àn
 = 
	`°æí
 (
de_±r
[
j
].
«me
);

66 i‡(
«me_Àn
 > 
§c_Àn
)

67 
§c_Àn
 = 
«me_Àn
;

68 i‡(!
	`°∫cmp
 (
de_±r
[
j
].
«me
,
íåy_«me
,
§c_Àn
)) {

69 (*
bh_de_±r
Ë&
de_±r
[
j
];

70  (
bh
);

73 
	`bªl£
 (
bh
);

75  (
NULL
);

76 
	}
}

79 
BUFFER_HEAD
 *
	$add_íåy
 (
MEM_INODE
 *
m_dú
,
i8
 *
íåy_«me
,

80 
u32
 
«me_Àn
,
DIR_ENTRY
 **
bh_de_±r
)

82 i‡(!
m_dú
 || !
bh_de_±r
 || !m_dú->
i_dev
)

83  (
NULL
);

84 i‡(!
«me_Àn
)

85  ((*)((*
bh_de_±r
Ë
NULL
));

86 i‡(
«me_Àn
 > (
NAME_LEN
))

87 
«me_Àn
 = 
NAME_LEN
 - 1;

88 
BUFFER_HEAD
 *
bh
;

89 
i32
 
i
,
j
,
blk_no
;

90 
DIR_ENTRY
 *
de_±r
 = 
NULL
;

91 
u8
 
¸ãd
 = 
åue
;

93 
i
 = 0 ; i < (
NR_BLK_OBJS
 * NR_BLK_OBJS + NR_BLK_OBJS + 7); i ++) {

94 i‡(!(
blk_no
 = 
	`¸óã_block
 (
m_dú
,
i
,&
¸ãd
)))

95  (
NULL
) ;

96 i‡(
¸ãd
 == 0xFF) {

97 
m_dú
->
i_size
 +
BLK_SIZE
;

98 
m_dú
->
i_¸t_time
 = 
CUR_TIME
;

99 
m_dú
->
i_dút
 = 
åue
;

101 i‡(!(
bh
 = 
	`bªad
 (
m_dú
->
i_dev
,
blk_no
)))

103 
de_±r
 = (
DIR_ENTRY
*)(
bh
->
bh_buf
);

104 
j
 = 0 ; j < 
ENTRIES_PER_BLK
 ; j ++) {

105 i‡(
	`IND_EMPTY
 (
de_±r
[
j
].
öode_ƒ
Ë&& !de_±r[j].
«me
[0]) {

106 
m_dú
->
i_mtime
 = 
CUR_TIME
;

107 
m_dú
->
i_dút
 = 
åue
;

108 
	`°∫˝y
 (
de_±r
[
j
].
«me
,
íåy_«me
,
«me_Àn
);

109 
de_±r
[
j
].
«me
[
«me_Àn
] = '\0';

110 (*
bh_de_±r
Ë&
de_±r
[
j
];

111 
bh
->
bh_dút
 = 
åue
;

112  (
bh
);

115 
	`bªl£
 (
bh
);

117  (
NULL
);

118 
	}
}

120 
MEM_INODE
 *
igë
 (
u16
,
u32
);

121 
ùut
 (
MEM_INODE
 *);

124 
LOCAL
 
MEM_INODE
 *
	$gë_œ°_dú
 (
RO
 
i8
 *
∑th
)

126 i‡(!
∑th
Ë (
NULL
);

128 
MEM_INODE
 *
m_dú
;

129 
i8
 *
p
 = (i8*)
∑th
,
c
 ;

130 
BUFFER_HEAD
 *
bh
;

131 
DIR_ENTRY
 *
bh_de_±r
 ;

132 
u16
 
dev_no
 ;

133 
u32
 
öode_ƒ
,
«me_Àn
 = 0;

135 i‡(
∑th
[0] == '/' ) {

136 
m_dú
 = 
	`igë
 (
¥oc
->
roŸ
.
dev
,¥oc->roŸ.
ör
);

137 
∑th
 ++ ;

139 
m_dú
 = 
	`igë
 (
¥oc
->
cwd
.
dev
,¥oc->cwd.
ör
);

140 i‡(!
m_dú
)

141  (
NULL
);

142 
åue
) {

143 
p
 = (
i8
*)
∑th
;

144 i‡(!
	`S_ISDIR
(
m_dú
->
i_mode
)) {

145 
	`ùut
 (
m_dú
);

149 
«me_Àn
 = 0;(
c
 = *
∑th
 ++ ) && (c != '/');Çame_len ++);

150 i‡(!
c
)

151  (
m_dú
);

152 i‡(!(
bh
 = 
	`föd_íåy
 (&
m_dú
,
p
,
«me_Àn
,&
bh_de_±r
))) {

153 
	`ùut
 (
m_dú
);

156 
öode_ƒ
 = 
bh_de_±r
->inode_nr;

157 
dev_no
 = 
m_dú
->
i_dev
;

158 
	`ùut
 (
m_dú
);

159 
	`bªl£
 (
bh
);

160 i‡(!(
m_dú
 = 
	`igë
 (
dev_no
,
öode_ƒ
)))

163  (
NULL
);

164 
	}
}

166 
LOCAL
 
MEM_INODE
 *
	$dú_«mei
 (
RO
 
i8
 *
∑th
,
u32
 *
«me_Àn
,RO i8**
«me
)

168 
MEM_INODE
 *
m_dú
;

169 
RO
 
i8
 *
ba£_«me
;

170 
i8
 
ch
;

172 i‡(!(
m_dú
 = 
	`gë_œ°_dú
 (
∑th
)))

173  (
NULL
);

174 
ba£_«me
 = 
∑th
;

175 (
ch
 = *
∑th
 ++))

176 i‡–'/' =
ch
 )

177 
ba£_«me
 = 
∑th
;

178 *
«me_Àn
 = 
∑th
 - 
ba£_«me
 - 1;

179 *
«me
 = 
ba£_«me
 ;

180  (
m_dú
);

181 
	}
}

183 
MEM_INODE
 *
	$«mei
 (
RO
 
i8
 *
∑th
)

185 
RO
 
i8
 *
ba£
;

186 
u16
 
dev_no
;

187 
u32
 
öode_ƒ
,
«me_Àn
 = 0;

188 
DIR_ENTRY
 *
bh_de_±r
;

189 
BUFFER_HEAD
 *
bh
;

190 
MEM_INODE
 *
m_dú
;

192 i‡(!(
m_dú
 = 
	`dú_«mei
 (
∑th
,&
«me_Àn
,&
ba£
)))

193  (
NULL
);

194 i‡(!
«me_Àn
)

195  (
m_dú
);

196 i‡(!(
bh
 = 
	`föd_íåy
 (&
m_dú
,(
i8
*)
ba£
,
«me_Àn
,&
bh_de_±r
))) {

197 
	`ùut
 (
m_dú
);

198  (
NULL
);

200 
öode_ƒ
 = 
bh_de_±r
->inode_nr;

201 
dev_no
 = 
m_dú
->
i_dev
;

202 
	`bªl£
 (
bh
);

203 
	`ùut
 (
m_dú
);

204 i‡((
m_dú
 = 
	`igë
 (
dev_no
,
öode_ƒ
))) {

205 
m_dú
->
i_acc_time
 = 
CUR_TIME
;

208  (
m_dú
);

209 
	}
}

211 
¸ash
 (
RO
 
i8
 *
fmt
,...);

212 
MEM_INODE
 *
√w_öode
 (
u16
);

213 
u32
 
√w_block
 (
u16
);

214 
‰ì_block
 (
u16
,
u32
);

217 
i32
 
	$do_mkdú
 (
RO
 
i8
 *
∑th
 ,
u16
 
mode
)

219 
RO
 
i8
 *
ba£
;

220 
u32
 
«mñí
 ;

221 
MEM_INODE
 *
m_¥ev_dú
,*
m_√w_dú
;

222 
BUFFER_HEAD
 *
bh
,*
√w_dú_block
 ;

223 
DIR_ENTRY
 *
bh_de_±r
;

225 i‡(!(
m_¥ev_dú
 = 
	`dú_«mei
 (
∑th
,&
«mñí
,&
ba£
)))

226  (-
ENOPATH
);

227 i‡(!
«mñí
) {

228 
	`ùut
 (
m_¥ev_dú
);

229  (-
ENOPATH
);

232 i‡((
bh
 = 
	`föd_íåy
 (&
m_¥ev_dú
,(
i8
*)
ba£
,
«mñí
,&
bh_de_±r
))) {

233 
	`bªl£
 (
bh
);

234 
	`ùut
 (
m_¥ev_dú
);

235  (-
EPDUP
);

237 i‡(!(
m_√w_dú
 = 
	`√w_öode
 (
m_¥ev_dú
->
i_dev
))) {

238 
	`ùut
 (
m_¥ev_dú
);

239  (-
ENOSRC
);

241 i‡(!(
m_√w_dú
->
i_z⁄e
[0] = 
	`√w_block
 (m_√w_dú->
i_dev
))) {

242 
	`ùut
 (
m_¥ev_dú
);

243 
m_√w_dú
->
i_∆öks
 = 0;

244 
	`ùut
 (
m_√w_dú
);

245  (-
ENOSRC
);

247 
m_√w_dú
->
i_size
 = 
BLK_SIZE
;

248 
m_√w_dú
->
i_mtime
 = m_√w_dú->
i_acc_time
 = 
CUR_TIME
;

249 
m_√w_dú
->
i_dút
 = 
åue
;

250 i‡(!(
√w_dú_block
 = 
	`bªad
 (
m_√w_dú
->
i_dev
,m_√w_dú->
i_z⁄e
[0]))) {

251 
	`ùut
 (
m_¥ev_dú
);

252 
	`‰ì_block
 (
m_√w_dú
->
i_dev
,m_√w_dú->
i_z⁄e
[0]);

253 
m_√w_dú
->
i_∆öks
 = 0 ;

254 
	`ùut
 (
m_√w_dú
);

255  (-
EBADRD
);

257 
bh_de_±r
 = (
DIR_ENTRY
*)(
√w_dú_block
->
bh_buf
);

258 
bh_de_±r
[0].
öode_ƒ
 = 
m_√w_dú
->
i_num
;

259 
bh_de_±r
[0].
«me
[0] = '.';

260 
bh_de_±r
[0].
«me
[1] = '\0';

262 
bh_de_±r
[1].
öode_ƒ
 = 
m_¥ev_dú
->
i_num
 ;

263 
bh_de_±r
[1].
«me
[0] = '.';

264 
bh_de_±r
[1].
«me
[1] = '.';

265 
bh_de_±r
[1].
«me
[2] = '\0';

267 
m_√w_dú
->
i_∆öks
 = 2;

268 
√w_dú_block
->
bh_dút
 = 
åue
;

269 
	`bªl£
 (
√w_dú_block
);

271 
m_√w_dú
->
i_mode
 = 
I_DIRECTORY
;

272 
m_√w_dú
->
i_uid
 = 
UID
;

273 
m_√w_dú
->
i_gid
 = 
GID
;

274 
m_√w_dú
->
i_magic
 = 
I_MAGIC
;

275 
m_√w_dú
->
i_dút
 = 
åue
;

276 
m_√w_dú
->
i_vÆid
 = 
åue
;

280 i‡(!(
bh
 = 
	`add_íåy
 (
m_¥ev_dú
,(
i8
*)
ba£
,
«mñí
,&
bh_de_±r
))) {

281 
	`ùut
 (
m_¥ev_dú
);

282 
	`‰ì_block
 (
m_√w_dú
->
i_dev
,m_√w_dú->
i_z⁄e
[0]);

283 
m_√w_dú
->
i_∆öks
 = 0;

284 
	`ùut
 (
m_√w_dú
);

285  (-
ENOSRC
);

287 
bh_de_±r
->
öode_ƒ
 = 
m_√w_dú
->
i_num
;

288 
bh
->
bh_dút
 = 
åue
;

290 
m_¥ev_dú
->
i_∆öks
 ++;

291 
m_¥ev_dú
->
i_dút
 = 
åue
;

292 
m_¥ev_dú
->
i_vÆid
 = 
åue
;

293 
	`ùut
 (
m_¥ev_dú
);

294 
	`ùut
 (
m_√w_dú
);

295 
	`bªl£
 (
bh
);

297 
	}
}

299 
LOCAL
 
u8
 
	$is_dú_em±y
 (
MEM_INODE
 *
m_dú
)

301 i‡(!
m_dú
 || !m_dú->
i_dev
)

302  (
åue
);

303 
BUFFER_HEAD
 *
bh
;

304 
i32
 
i
,
j
,
blk_no
,
blk_ƒ
 = (
m_dú
->
i_size
 + 
BLK_SIZE
 - 1) >> 12;

305 
DIR_ENTRY
 *
de_±r
 = 
NULL
;

307 
i
 = 0 ; i < (
NR_BLK_OBJS
 * NR_BLK_OBJS + NR_BLK_OBJS + 7Ë&& 
blk_ƒ
 > 0; i ++) {

308 i‡(!(
blk_no
 = 
	`bm≠
 (
m_dú
,
i
)))

310 
bh
 = 
	`bªad
 (
m_dú
->
i_dev
,
blk_no
);

311 
blk_ƒ
 --;

312 i‡(!
bh
) ;

313 
de_±r
 = (
DIR_ENTRY
*)(
bh
->
bh_buf
);

314 
j
 = 2 ; j < 
ENTRIES_PER_BLK
 ; j ++)

315 i‡(
de_±r
[
j
].
«me
[0])

316  (
Ál£
);

317 
	`bªl£
 (
bh
);

319  (
åue
);

320 
	}
}

322 
LOCAL
 
u8
 
	$li°_dú
 (
MEM_INODE
 **
m_dú
)

324 i‡(!
m_dú
 || !(*m_dúË|| !(*m_dú)->
i_dev
)

326 
BUFFER_HEAD
 *
bh
;

327 
i32
 
i
,
j
,
blk_no
,
blk_ƒ
 = ((*
m_dú
)->
i_size
 + 
BLK_SIZE
 - 1) >> 12;

328 
DIR_ENTRY
 *
de_±r
 = 
NULL
;

331 
i
 = 0 ; i < (
NR_BLK_OBJS
 * NR_BLK_OBJS + NR_BLK_OBJS + 7Ë&& 
blk_ƒ
 > 0; i ++) {

332 i‡(!(
blk_no
 = 
	`bm≠
 ((*
m_dú
),
i
)))

334 
bh
 = 
	`bªad
 ((*
m_dú
)->
i_dev
,
blk_no
);

335 
blk_ƒ
 --;

336 i‡(!
bh
)

338 
de_±r
 = (
DIR_ENTRY
*)(
bh
->
bh_buf
);

339 
j
 = 0; j < 
ENTRIES_PER_BLK
 ; j ++) {

340 i‡(
de_±r
[
j
].
«me
[0]) {

345 
	`¥ötf
 ( "%† ",
de_±r
[
j
].
«me
 );

350 
	`bªl£
 (
bh
);

352 
	`¥ötf
 ( "\n" );

354 
	}
}

356 
w¨n
 (c⁄° *
fmt
,...);

358 
i32
 
	$do_rmdú
 (
RO
 
i8
 *
∑th
)

360 
MEM_INODE
 *
m_¥ev_dú
,*
m_this_dú
;

361 
u32
 
«me_Àn
 = 0;

362 
RO
 
i8
 *
ba£
 ;

363 
BUFFER_HEAD
 *
bh
;

364 
DIR_ENTRY
 *
bh_de_±r
;

366 i‡(!(
m_¥ev_dú
 = 
	`dú_«mei
 (
∑th
,&
«me_Àn
,&
ba£
)))

367  (-
ENOPATH
);

368 i‡(!
«me_Àn
) {

369 
	`ùut
 (
m_¥ev_dú
);

370  (-
ENOPATH
);

372 i‡(!(
bh
 = 
	`föd_íåy
 (&
m_¥ev_dú
,(
i8
*)
ba£
,
«me_Àn
,&
bh_de_±r
))) {

373 
	`ùut
 (
m_¥ev_dú
);

374  (-
ENOPATH
);

376 i‡(!(
m_this_dú
 = 
	`igë
 (
m_¥ev_dú
->
i_dev
,
bh_de_±r
->
öode_ƒ
))){

377 
	`ùut
 (
m_¥ev_dú
);

378 
	`bªl£
 (
bh
);

379  (-
ENOPATH
);

381 i‡(
m_¥ev_dú
 =
m_this_dú
) {

382 
	`ùut
 (
m_¥ev_dú
);

383 
	`ùut
 (
m_this_dú
);

384 
	`bªl£
 (
bh
);

385  (-
ENOPERM
);

387 i‡(
m_this_dú
->
i_dev
 !
m_¥ev_dú
->i_dev || m_this_dú->
i_˙t
 > 1) {

388 
	`w¨n
 ( "ö∏˙à%d > 1.",
m_this_dú
->
i_˙t
 );

389 
	`ùut
 (
m_¥ev_dú
);

390 
	`ùut
 (
m_this_dú
);

391 
	`bªl£
 (
bh
);

392  (-
EOBUSY
);

394 i‡(
m_this_dú
->
i_num
 =
ROOT_IND_NR
) {

395 
	`ùut
 (
m_¥ev_dú
);

396 
	`ùut
 (
m_this_dú
);

397 
	`bªl£
 (
bh
);

398  (-
ENOPERM
);

400 i‡(!
	`S_ISDIR
 (
m_this_dú
->
i_mode
)) {

401 
	`ùut
 (
m_¥ev_dú
);

402 
	`ùut
 (
m_this_dú
);

403 
	`bªl£
 (
bh
);

404  (-
ENOTD
);

406 i‡(!
	`is_dú_em±y
 (
m_this_dú
)) {

407 
	`ùut
 (
m_¥ev_dú
);

408 
	`ùut
 (
m_this_dú
);

409 
	`bªl£
 (
bh
);

410  (-
ENOTEMPT
);

412 i‡(
m_this_dú
->
i_∆öks
 != 2) {

413 
	`w¨n
 ( "rm dúÜök†i†%d ",
m_this_dú
->
i_∆öks
 ) ;

414 
	`ùut
 (
m_¥ev_dú
);

415 
	`ùut
 (
m_this_dú
);

416 
	`bªl£
 (
bh
);

418 
bh_de_±r
->
öode_ƒ
 = 0;

419 
	`mem£t
 (
bh_de_±r
->
«me
,0,
NAME_LEN
);

420 
bh
->
bh_dút
 = 
åue
;

421 
	`bªl£
 (
bh
);

423 
m_this_dú
->
i_∆öks
 = 0;

424 
m_this_dú
->
i_dút
 = 
Ál£
;

428 
m_¥ev_dú
->
i_∆öks
 -- ;

429 
m_¥ev_dú
->
i_mtime
 = 
m_this_dú
->
i_acc_time
 = 
CUR_TIME
;

430 
m_¥ev_dú
->
i_dút
 = 
åue
;

434 
	`ùut
 (
m_¥ev_dú
);

435 
	`ùut
 (
m_this_dú
);

437 
	}
}

439 
i32
 
	$do_ls
 (
RO
 
i8
 *
∑th
)

441 i‡(!
∑th
)

442  (-
ENOPATH
);

443 
MEM_INODE
 *
m_¥ev_dú
;

445 i‡(!(
m_¥ev_dú
 = 
	`«mei
 (
∑th
)))

446  (-
ENOPATH
);

447 i‡(!
	`S_ISDIR
 (
m_¥ev_dú
->
i_mode
)) {

448 
	`ùut
 (
m_¥ev_dú
);

449  (-
ENOTD
);

451 
	`li°_dú
 (&
m_¥ev_dú
);

452 
	`ùut
 (
m_¥ev_dú
);

454 
	}
}

456 
i32
 
	$do_chdú
 (
RO
 
i8
 *
∑th
)

458 
MEM_INODE
 *
m_öode
;

460 i‡(!(
m_öode
 = 
	`«mei
 (
∑th
)))

461  (-
ENOPATH
);

462 i‡(!
	`S_ISDIR
(
m_öode
->
i_mode
)) {

463 
	`ùut
 (
m_öode
);

464  (-
ENOTD
);

466 
¥oc
->
cwd
.
ör
 = 
m_öode
->
i_num
;

467 
¥oc
->
cwd
.
dev
 = 
m_öode
->
i_dev
;

468 
	`ùut
 (
m_öode
);

469  (
¥oc
->
cwd
.
ör
);

470 
	}
}

472 
i32
 
	$do_chroŸ
 (
RO
 
i8
 *
∑th
)

474 
MEM_INODE
 *
m_öode
;

476 i‡(!(
m_öode
 = 
	`«mei
 (
∑th
)))

477  (-
ENOPATH
);

478 i‡(!
	`S_ISDIR
(
m_öode
->
i_mode
)) {

479 
	`ùut
 (
m_öode
);

480  (-
ENOTD
);

482 
¥oc
->
roŸ
.
ör
 = 
m_öode
->
i_num
;

483 
¥oc
->
roŸ
.
dev
 = 
m_öode
->
i_dev
;

484 
	`ùut
 (
m_öode
);

485  (
¥oc
->
roŸ
.
ör
);

486 
	}
}

488 
i32
 
	$do_chmod
 (
RO
 
i8
 *
∑th
,
u16
 
mode
)

491 
	}
}

493 
˛ór_iblks
 (
MEM_INODE
 *
m_öode
) ;

496 
i32
 
	$›í_«mei
 (
RO
 
i8
 *
∑th
,
u16
 
Êag
,u16 
mode
,
MEM_INODE
 **
de°_öode
)

498 
RO
 
i8
 *
ba£
 ;

499 
u32
 
öode_ƒ
 = 0,
«me_Àn
;

500 
u16
 
dev_no
;

501 
MEM_INODE
 *
m_¥ev_dú
,*
m_√w_öode
 ;

502 
BUFFER_HEAD
 *
bh
;

503 
DIR_ENTRY
 *
bh_de_±r
;

505 i‡((
Êag
 & 
O_RDONLY
Ë&& !(Êag&
O_ACCMODE
))

506 
Êag
 |
O_WRONLY
;

507 
mode
 |
I_REGULAR
;

508 i‡(!(
m_¥ev_dú
 = 
	`dú_«mei
 (
∑th
,&
«me_Àn
,&
ba£
)))

509  (-
ENOPATH
);

510 i‡(!
«me_Àn
) {

511 i‡(!(
Êag
 & (
O_ACCMODE
|
O_CREAT
|
O_TRUNC
))) {

512 (*
de°_öode
Ë
m_¥ev_dú
;

515 
	`ùut
 (
m_¥ev_dú
);

516  (-
ENOPATH
);

518 i‡(!(
bh
 = 
	`föd_íåy
 (&
m_¥ev_dú
,(
i8
*)
ba£
,
«me_Àn
,&
bh_de_±r
))) {

519 i‡(!(
Êag
 & 
O_CREAT
)) {

520 
	`ùut
 (
m_¥ev_dú
);

521  (-
ENOPATH
);

523 i‡(!(
m_√w_öode
 = 
	`√w_öode
 (
m_¥ev_dú
->
i_dev
))) {

524 
	`ùut
 (
m_¥ev_dú
);

525  (-
ENOSRC
);

527 
m_√w_öode
->
i_uid
 = 
UID
;

528 
m_√w_öode
->
i_gid
 = 
GID
;

529 
m_√w_öode
->
i_mode
 = 
mode
;

530 
m_√w_öode
->
i_dút
 = 
åue
;

531 
m_√w_öode
->
i_vÆid
 = 
åue
;

533 i‡(!(
bh
 = 
	`add_íåy
 (
m_¥ev_dú
,(
i8
*)
ba£
,
«me_Àn
,&
bh_de_±r
))) {

534 
m_√w_öode
->
i_∆öks
 = 0;

535 
	`ùut
 (
m_√w_öode
);

536 
	`ùut
 (
m_¥ev_dú
);

537  (-
ENOSRC
);

539 
bh_de_±r
->
öode_ƒ
 = 
m_√w_öode
->
i_num
;

540 
bh
->
bh_dút
 = 
åue
;

541 
	`bªl£
 (
bh
);

542 
	`ùut
 (
m_¥ev_dú
);

543 (*
de°_öode
Ë
m_√w_öode
;

549 
öode_ƒ
 = 
bh_de_±r
->inode_nr;

550 
dev_no
 = 
m_¥ev_dú
->
i_dev
;

551 
	`ùut
 (
m_¥ev_dú
);

552 
	`bªl£
 (
bh
);

553 i‡(
Êag
 & 
O_EXCL
)

555 i‡(!(
m_√w_öode
 = 
	`igë
 (
dev_no
,
öode_ƒ
)))

557 i‡(
	`S_ISDIR
 (
m_√w_öode
->
i_mode
Ë&& (
Êag
 & 
O_ACCMODE
)){

558 
	`ùut
 (
m_√w_öode
);

559  (-
EDIR
);

561 
m_√w_öode
->
i_acc_time
 = 
CUR_TIME
;

562 i‡(
Êag
 & 
O_TRUNC
)

563 
	`˛ór_iblks
 (
m_√w_öode
);

564 *
de°_öode
 = 
m_√w_öode
 ;

566 
	}
}

569 
i32
 
	$do_hlök
 (
RO
 
i8
 *
ﬁd_«me
,RO i8 *
√w_«me
)

571 
DIR_ENTRY
 *
de
;

572 
MEM_INODE
 *
m_ﬁd_öode
,*
m_√w_¥ev_dú
 ;

573 
RO
 
i8
 *
ba£
;

574 
u32
 
«mñí
 = 0;

575 
BUFFER_HEAD
 *
bh
;

577 i‡(!(
m_ﬁd_öode
 = 
	`«mei
 (
ﬁd_«me
)))

578  (-
ENOPATH
);

579 i‡(
	`S_ISDIR
 (
m_ﬁd_öode
->
i_mode
)) {

580 
	`ùut
 (
m_ﬁd_öode
);

581  (-
EDIR
);

583 i‡(!(
m_√w_¥ev_dú
 = 
	`dú_«mei
 (
√w_«me
,&
«mñí
,&
ba£
))){

584 
	`ùut
 (
m_ﬁd_öode
);

585  (-
ENOPATH
);

587 i‡(!
«mñí
) {

588 
	`ùut
 (
m_ﬁd_öode
);

589 
	`ùut
 (
m_√w_¥ev_dú
);

590  (-
ENOPATH
);

592 i‡((
m_ﬁd_öode
->
i_dev
 !
m_√w_¥ev_dú
->i_dev)) {

593 
	`w¨n
 ( "bad dev %x !%x \n",
m_ﬁd_öode
->
i_dev
,
m_√w_¥ev_dú
->i_dev );

594 
	`ùut
 (
m_ﬁd_öode
);

595 
	`ùut
 (
m_√w_¥ev_dú
);

596  (-
ENOPERM
);

598 i‡((
bh
 = 
	`föd_íåy
 (&
m_√w_¥ev_dú
,(
i8
*)
ba£
,
«mñí
,&
de
))) {

599 
	`bªl£
 (
bh
);

600 
	`ùut
 (
m_ﬁd_öode
);

601 
	`ùut
 (
m_√w_¥ev_dú
);

602  (-
EPDUP
);

604 i‡(!(
bh
 = 
	`add_íåy
 (
m_√w_¥ev_dú
,(
i8
*)
ba£
,
«mñí
,&
de
))) {

605 
	`ùut
 (
m_ﬁd_öode
);

606 
	`ùut
 (
m_√w_¥ev_dú
);

607  (-
ENOSRC
);

609 
de
->
öode_ƒ
 = 
m_ﬁd_öode
->
i_num
;

610 
bh
->
bh_dút
 = 
åue
;

611 
	`bªl£
 (
bh
);

612 
	`ùut
 (
m_√w_¥ev_dú
);

614 
m_ﬁd_öode
->
i_∆öks
 ++;

615 
m_ﬁd_öode
->
i_acc_time
 = 
CUR_TIME
;

616 
m_ﬁd_öode
->
i_dút
 = 
åue
;

617 
	`ùut
 (
m_ﬁd_öode
);

619 
	}
}

622 
i32
 
	$do_unhlök
 (
RO
 
i8
* 
«me
)

624 
RO
 
i8
 *
ba£
;

625 
u32
 
«mñí
 ;

626 
MEM_INODE
 *
m_¥ev_dú
,*
m_this_öode
;

627 
BUFFER_HEAD
 *
bh
;

628 
DIR_ENTRY
 *
bh_de_±r
;

630 i‡(!(
m_¥ev_dú
 = 
	`dú_«mei
 (
«me
,&
«mñí
,&
ba£
)))

631  (-
ENOPATH
);

632 i‡(!
«mñí
) {

633 
	`ùut
 (
m_¥ev_dú
);

634  (-
ENOPATH
);

636 i‡(!(
bh
 = 
	`föd_íåy
 (&
m_¥ev_dú
,(
i8
*)
ba£
,
«mñí
,&
bh_de_±r
))) {

637 
	`ùut
 (
m_¥ev_dú
);

638  (-
ENOPATH
);

640 i‡(!(
m_this_öode
 = 
	`igë
 (
m_¥ev_dú
->
i_dev
,
bh_de_±r
->
öode_ƒ
))) {

641 
	`ùut
 (
m_¥ev_dú
);

642 
	`bªl£
 (
bh
);

643  (-
ENOPATH
);

645 i‡(
	`S_ISDIR
 (
m_this_öode
->
i_mode
)) {

646 
	`ùut
 (
m_this_öode
);

647 
	`ùut
 (
m_¥ev_dú
);

648 
	`bªl£
 (
bh
);

649  (-
EDIR
);

651 i‡(!
m_this_öode
->
i_∆öks
) {

652 
	`w¨n
 ( "delÇon-existent file (dev 0x%x,inr %d) withÜinks = 0 !",

653 
m_this_öode
->
i_dev
,m_this_öode->
i_num
 );

654 
m_this_öode
->
i_∆öks
 = 1;

656 
bh_de_±r
->
öode_ƒ
 = 0;

657 
	`mem£t
 (
bh_de_±r
->
«me
,0,
NAME_LEN
);

658 
bh
->
bh_dút
 = 
åue
;

659 
	`bªl£
 (
bh
);

660 
m_this_öode
->
i_∆öks
 --;

661 
m_this_öode
->
i_dút
 = 
åue
;

662 
m_this_öode
->
i_mtime
 = 
CUR_TIME
;

663 
	`ùut
 (
m_this_öode
);

664 
	`ùut
 (
m_¥ev_dú
);

666 
	}
}

669 
i32
 
	$do_mknod
 (
RO
 
i8
* 
∑th
,
u16
 
mode
,u16 
dev
)

671 
RO
 
i8
 *
ba£«me
;

672 
u32
 
«mñí
 = 0;

673 
MEM_INODE
 *
m_dú
,*
m_öode
;

674 
BUFFER_HEAD
 *
bh
;

675 
DIR_ENTRY
 *
de
;

677 i‡(!(
m_dú
 = 
	`dú_«mei
 (
∑th
,&
«mñí
,&
ba£«me
)))

678  (-
ENOPATH
);

679 i‡(!
«mñí
) {

680 
	`ùut
 (
m_dú
);

681  (-
ENOPATH
);

683 i‡((
bh
 = 
	`föd_íåy
 (&
m_dú
,(
i8
*)
ba£«me
,
«mñí
,&
de
))) {

684 
	`bªl£
 (
bh
);

685 
	`ùut
 (
m_dú
);

686  (-
EPDUP
);

688 i‡(!(
m_öode
 = 
	`√w_öode
 (
m_dú
->
i_dev
))) {

689 
	`ùut
 (
m_dú
);

690  (-
ENOSRC
);

692 
m_öode
->
i_mode
 = 
mode
;

693 i‡(
	`S_ISBLK
 (
mode
Ë|| 
	`S_ISCHR
 (mode))

694 
m_öode
->
i_z⁄e
[0] = 
dev
;

695 
m_öode
->
i_mtime
 = m_öode->
i_acc_time
 = 
CUR_TIME
;

696 
m_öode
->
i_dút
 = 
åue
;

698 i‡(!(
bh
 = 
	`add_íåy
 (
m_dú
,(
i8
*)
ba£«me
,
«mñí
,&
de
))) {

699 
	`ùut
 (
m_dú
);

700 
m_öode
->
i_∆öks
 = 0;

701 
	`ùut
 (
m_öode
);

702  (-
ENOSRC
);

704 
de
->
öode_ƒ
 = 
m_öode
->
i_num
;

705 
bh
->
bh_dút
 = 
åue
;

706 
	`ùut
 (
m_dú
);

707 
	`ùut
 (
m_öode
);

708 
	`bªl£
 (
bh
);

710 
	}
}

712 
LOCAL
 
	$idump
 (
MEM_INODE
 *
p
)

714 
i32
 
i
 = 0;

716 i‡(
p
) {

717 
	`¥ötf
 ( "öode->modê = 0x%-8x \n",
p
->
i_mode
 );

718 
	`¥ötf
 ( "öode->uid = 0x%-8x \n",
p
->
i_uid
 );

719 
	`¥ötf
 ( "öode->gid = 0x%-8x \n",
p
->
i_gid
 );

720 
	`¥ötf
 ( "öode->sizê = 0x%-8x \n",
p
->
i_size
 );

721 
	`¥ötf
 ( "öode->∆ök†0x%-8x \n",
p
->
i_∆öks
 );

722 
	`¥ötf
 ( "öode->i_˙à = 0x%-8x \n",
p
->
i_˙t
 );

723 
	`¥ötf
 ( "öode->i_magic0x%-8x \n",
p
->
i_magic
 );

724 
i
 = 0;i < 9 ; i++)

725 
	`¥ötf
 ( "öode->i_z⁄e[%d]0x%-8x \n",
i
,
p
->
i_z⁄e
[i] );

727 
	}
}

729 
i32
 
	$do_dum≤od
 (
RO
 
i8
 *
∑th
)

731 
MEM_INODE
 *
m_dú
;

733 i‡(!(
m_dú
 = 
	`«mei
 (
∑th
)))

734  (-
ENOPATH
);

735 i‡(
	`S_ISREG
 (
m_dú
->
i_mode
)) {

736 
	`idump
 (
m_dú
);

737 
	`ùut
 (
m_dú
);

739 } i‡(
	`S_ISBLK
 (
m_dú
->
i_mode
)) {

740 
	`¥ötf
 ( "dev_nÿ0x%x \n",
m_dú
->
i_z⁄e
[0] );

741 
	`ùut
 (
m_dú
);

744 
	`ùut
 (
m_dú
);

745  (-
ENOPERM
);

748 
	}
}

750 
i32
 
	$pushd
 (
RO
 
i8
 *
∑th
)

752 
MEM_INODE
 *
m_öode
;

754 i‡(!
∑th
 || !(
m_öode
 = 
	`«mei
 (path)))

755  (-
ENOPATH
);

756 i‡(!
	`S_ISDIR
 (
m_öode
->
i_mode
)) {

757 
	`ùut
 (
m_öode
);

758  (-
ENOTD
);

760 i‡((
	`°æí
 (
¥oc
->
pwd
Ë+ såÀ¿(
∑th
)Ë>
PWD_LEN
) {

761 
	`ùut
 (
m_öode
);

762  (-
EOISFULL
);

764 
	`°rˇt
 (
¥oc
->
pwd
,
∑th
);

765 
	`ùut
 (
m_öode
);

767 
	}
}

769 
i8
 *
	$p›d
 ()

771  (
¥oc
->
pwd
);

772 
	}
}

774 
i8
 *
	$£td
 (
RO
 
i8
 *
∑th
)

776  (
¥oc
->
pwd
);

777 
	}
}

779 
i8
 *
	$gëpwd
 ()

781  (
¥oc
->
pwd
);

782 
	}
}

	@fs/open.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

10 
fûe_°
 
	gfûe_èbÀ
[
MAX_OPEN_FILES
];

11 
fûe_°
 *
	gfûp
[
NR_TASKS
][
MAX_FILPS
];

13 
i32
 
›í_«mei
 (
RO
 
i8
*,
u16
,u16,
MEM_INODE
**);

14 
i32
 
¸ash
 (
RO
 
i8
*,...);

15 
ùut
 (
MEM_INODE
 *);

17 
	$öô_·bl
 ()

19 
	`mem£t
 (
fûe_èbÀ
,0,(file_table));

20 
	`mem£t
 (
fûp
,0,(filp));

21 
	}
}

23 
fûe_°
 *
	$gë_‰ì_·bl
 ()

25 
i32
 
i
 = 0;

27 
i
 = 0; i < 
MAX_OPEN_FILES
 ; i ++)

28 i‡(!
fûe_èbÀ
[
i
].
f_˙t
)

29  (
fûe_èbÀ
+
i
);

30  (
NULL
);

31 
	}
}

33 
LOCAL
 
i32
 
	$gë_‰ì_fd
 (
i32
 
pid
)

35 
i32
 
i
 = 0;

37 
i
 = 0; i < 
MAX_FILPS
 ; i++)

38 i‡(!
fûp
[
pid
][
i
])

39  (
i
);

41 
	}
}

43 
i32
 
	$do_›í
 (
i32
 
pid
,
RO
 
i8
 *
∑th
,i32 
Êag
,i32 
mode
)

45 
i32
 
fd
 = 
	`gë_‰ì_fd
 (
pid
);

46 
fûe_°
 *
·bl
 = 
	`gë_‰ì_·bl
 ();

48 i‡((
fd
 < 0Ë|| !
·bl
)

49  (-
ENOSRC
);

50 
MEM_INODE
 *
m_öode
;

51 i‡(
	`›í_«mei
 (
∑th
,
Êag
,
mode
,&
m_öode
) < 0){

52 
	`pfûp
 (
pid
,
fd
Ë
NULL
;

53 
·bl
->
f_˙t
 = 0;

54  (-
EOPNFAILD
);

56 
·bl
->
f_mode
 = 
m_öode
->
i_mode
;

57 
·bl
->
f_Êags
 = 
Êag
;

58 
·bl
->
f_öode_±r
 = 
m_öode
;

59 
·bl
->
f_pos
 = 0;

60 (
	`pfûp
 (
pid
,
fd
Ë
·bl
)->
f_˙t
 ++;

61  (
fd
);

62 
	}
}

65 
i32
 
	$do_˛o£
 (
i32
 
pid
,i32 
fd
)

67 i‡(
fd
 >
MAX_FILPS
 || fd < 0)

69 
fûe_°
 *
this_fûe
 = 
	`pfûp
 (
pid
,
fd
);

70 i‡(
this_fûe
 =
NULL
)

72 
	`pfûp
 (
pid
,
fd
Ë
NULL
;

73 i‡(!
this_fûe
->
f_˙t
)

74  (-
EOPNFAILD
);

75 i‡(--
this_fûe
->
f_˙t
)

77 
	`ùut
 (
this_fûe
->
f_öode_±r
);

78 i‡(!
this_fûe
->
f_˙t
)

79 
	`mem£t
 (
this_fûe
,0,(
fûe_°
));

81 
	}
}

	@fs/pipe.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

	@fs/proc.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

9 
¥oc_°
 
	g¥o˚ss
 = {

10 {
ROOT_DEV
,
ROOT_IND_NR
},

11 {
ROOT_DEV
,
ROOT_IND_NR
},

14 },*
	g¥oc
 = &
¥o˚ss
;

	@fs/ramdisk.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<2440/p‹ts.h
>

10 
LOCAL
 
u8
 *
	gømdsk
;

12 
	#NR_RAMDSK_INODES
 (0x100)

	)

13 
	#NR_RAMDSK_ZONES
 (192)

	)

14 
	#NR_RAMDSK_IMAP
 (1)

	)

15 
	#NR_RAMDSK_BMAP
 (1)

	)

17 
BUFFER_HEAD
* 
bªad
 (
u16
,
u32
);

18 
bªl£
 (
BUFFER_HEAD
 *);

19 
¸ash
 (c⁄° *
fmt
,...) ;

20 
w¨n
 (
RO
 
i8
 *
fmt
,...);

22 
MEM_INODE
 *
igë
 (
u16
,
u32
);

23 
ùut
 (
MEM_INODE
 *);

24 
u32
 
√w_block
 (
u16
);

25 
‰ì_block
 (
u16
,
u32
);

26 
put_sblk
 (
u16
 
dev_no
) ;

28 
i32
 
	$rdªad
 (*
buf
,
u32
 
blk_ƒ
,u32 
blks_˙t
)

30 i‡(!
buf
 || !
blks_˙t


31 || (((
blk_ƒ
 + 
blks_˙t
)<<
BLK_SIZE_SFT
Ë>
RAMDSK_SIZE
))

34 
	`mem˝y
 (
buf
,
ømdsk
 + (
blk_ƒ
 << 
BLK_SIZE_SFT
),
blks_˙t
 << BLK_SIZE_SFT);

35  (
blks_˙t
 << 
BLK_SIZE_SFT
);

36 
	}
}

38 
i32
 
	$rdwrôe
 (*
buf
,
u32
 
blk_ƒ
,u32 
blks_˙t
)

40 i‡(!
buf
 || !
blks_˙t


41 || (((
blk_ƒ
 + 
blks_˙t
)<<
BLK_SIZE_SFT
Ë>
RAMDSK_SIZE
))

44 
	`mem˝y
 (
ømdsk
 + (
blk_ƒ
 << 
BLK_SIZE_SFT
),
buf
,
blks_˙t
 << BLK_SIZE_SFT);

45  (
blks_˙t
 << 
BLK_SIZE_SFT
);

46 
	}
}

48 
i32
 
	$¸óã_ømdsk
 ()

50 
ømdsk
 = (
u8
*)(
USR_RAMDSK_BUFFER
);

52 
	`¥ötf
 ( "$ > Sour˚ %†\n",(
u8
*)(
ømdsk
 + 
RAMDSK_SIZE
 - 0x1000));

54 
	}
}

	@fs/rw.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

10 
MEM_SUPER_BLOCK
 *
gë_sblk
 (
u16
);

11 
¸ash
 (c⁄° *
fmt
,...);

12 
BUFFER_HEAD
 *
gë_blk
 (
u16
,
u32
);

13 
bªl£
 (
BUFFER_HEAD
*);

14 
BUFFER_HEAD
* 
bªada
 (
u16
 
dev_no
,
u32
 
blk_no
 ,...) ;

15 
u32
 
bm≠
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
) ;

16 
u32
 
¸óã_block
 (
MEM_INODE
 *
m_öode
,u32 
fûe_blk_no
,
u8
 *
¸óãd
) ;

17 
BUFFER_HEAD
 *
bªad
 (
u16
 
dev_no
,
u32
 
blk_no
) ;

20 
u32
 
fûe_rd
 (
MEM_INODE
 * 
öode
,
fûe_°
* 
this_fûe
,
i8
 * 
buf
,
i32
 
cou¡
);

21 
u32
 
fûe_wr
 (
MEM_INODE
 *
m_wr
,
fûe_°
 *
this_fûe
,
i8
 *
buf
,
i32
 
˙t
) ;

23 
i32
 
	$do_l£ek
 (
u32
 
pid
,
i32
 
fd
,u32 
off£t
,i32 
‹igö
)

25 
fûe_°
 * 
fûe
;

26 
i32
 
tmp
;

28 i‡((
fd
 < 0Ë|| (fd >
MAX_FILPS
)

29 || !(
fûe
 = 
	`pfûp
(
pid
,
fd
)Ë|| !(fûe->
f_öode_±r
))

31 
‹igö
)

34 i‡(
off£t
 < 0)  (-1);

35 
fûe
->
f_pos
 = 
off£t
;

38 i‡(
fûe
->
f_pos
+
off£t
 < 0)

40 
fûe
->
f_pos
 +
off£t
;

43 i‡((
tmp
=
fûe
->
f_öode_±r
->
i_size
+
off£t
) < 0)

45 
fûe
->
f_pos
 = 
tmp
;

50  (
fûe
->
f_pos
);

51 
	}
}

53 
i32
 
	$do_ªad
 (
u32
 
pid
,
i32
 
fd
,
i8
 * 
buf
,i32 
cou¡
)

55 
fûe_°
 * 
fûe
;

56 
MEM_INODE
 * 
öode
;

58 i‡((
cou¡
 <0Ë|| (
fd
 < 0Ë|| (fd >
MAX_FILPS
)

59 || !(
fûe
 = 
	`pfûp
(
pid
,
fd
)Ë|| !(
öode
 = fûe->
f_öode_±r
))

62 i‡(
	`S_ISDIR
(
öode
->
i_mode
))

64 i‡(
	`S_ISREG
(
öode
->
i_mode
)) {

65 i‡(
cou¡
+
fûe
->
f_pos
 > 
öode
->
i_size
)

66 
cou¡
 = 
öode
->
i_size
 - 
fûe
->
f_pos
;

67 i‡(
cou¡
 <= 0)

69  (
	`fûe_rd
 (
öode
,
fûe
,
buf
,
cou¡
));

72 
	}
}

74 
i32
 
	$do_wrôe
 (
u32
 
pid
,
i32
 
fd
,
i8
 * 
buf
,i32 
cou¡
)

76 
fûe_°
 * 
fûe
;

77 
MEM_INODE
 * 
öode
;

79 i‡((
cou¡
 <0Ë|| (
fd
 < 0Ë|| (fd >
MAX_FILPS
)

80 || !(
fûe
 = 
	`pfûp
(
pid
,
fd
)Ë|| !(
öode
 = fûe->
f_öode_±r
))

83 i‡(
	`S_ISDIR
(
öode
->
i_mode
))

85 i‡(
	`S_ISREG
(
öode
->
i_mode
))

86  (
	`fûe_wr
(
öode
,
fûe
,
buf
,
cou¡
));

87  (-
EBADWR
);

88 
	}
}

	@fs/sdcard.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

8 
i32
 
	$sd_rw
 (
u8
 
rw
,
u32
 
blk_ƒ
,u32 
blks_˙t
,*
buf
)

11 
	}
}

	@fs/start.S

1 .
globÆ
 
	g_°¨t


2 .
maö


3 .
code
 32

4 .
ãxt


5 
_°¨t
:

6 
bl
 
˛ór_bss


7 
bl
 
maö


8 
b
 .

10 
˛ór_bss
:

11 
ldr
 
r0
, 
bss_°¨t


12 
ldr
 
r1
, 
bss_íd


13 
mov
 
r2
, #0
x00


15 
˛r
:
°r
 
r2
, [
r0
]

16 
add
 
r0
,Ñ0, #4

17 
cmp
 
r0
, 
r1


18 
bÀ
 
˛r


19 
mov
 
pc
,
Ã


22 
bss_°¨t
: .
w‹d
 
_bss_°¨t


23 
bss_íd
: .
w‹d
 
_bss_íd


	@fs/stat.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<eˇ£y/fs.h
>

8 
	~<î∫o.h
>

10 
MEM_INODE
 *
«mei
 (
RO
 
i8
 *
∑th
) ;

11 
ùut
 (
MEM_INODE
 *
m_puti
) ;

13 
LOCAL
 
	$˝_°©
 (
MEM_INODE
 *
m_öode
,
°©
 *
p
)

15 
p
->
°_dev
 = 
m_öode
->
i_dev
;

16 
p
->
°_öo
 = 
m_öode
->
i_num
;

17 
p
->
°_gid
 = 
m_öode
->
i_gid
;

18 
p
->
°_uid
 = 
m_öode
->
i_uid
;

19 
p
->
°_size
 = 
m_öode
->
i_size
;

20 
p
->
°_mode
 = 
m_öode
->
i_mode
;

21 
p
->
°_∆ök
 = 
m_öode
->
i_∆öks
;

22 
p
->
°_rdev
 = (
u16
)
m_öode
->
i_z⁄e
 [0];

23 
p
->
°_©ime
 = 
m_öode
->
i_acc_time
;

24 
p
->
°_˘ime
 = 
m_öode
->
i_¸t_time
;

25 
p
->
°_mtime
 = 
m_öode
->
i_mtime
;

26 
	}
}

28 
i32
 
	$do_°©
 (
RO
 
i8
 *
‚ame
,
°©
 *
p
)

30 
MEM_INODE
 *
m_öode
 ;

32 i‡(!(
m_öode
 = 
	`«mei
 (
‚ame
)))

33  (-
ENOPATH
);

34 
	`˝_°©
 (
m_öode
,
p
);

35 
	`ùut
 (
m_öode
);

37 
	}
}

39 
i32
 
	$do_f°©
 (
i32
 
pid
,i32 
fd
,
°©
 *
p
)

41 
fûe_°
 *
fûe
 ;

42 
MEM_INODE
 *
m_öode
;

44 i‡(
fd
 >
MAX_FILPS
 || !(
fûe
 = 
	`pfûp
 (
pid
,fd)Ë|| !(
m_öode
 = fûe->
f_öode_±r
))

45  (-
EBADFD
);

46 
	`˝_°©
 (
m_öode
,
p
);

48 
	}
}

	@fs/super.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/fs.h
>

6 
	~<f˙é.h
>

7 
	~<sys/°©.h
>

8 
	~<î∫o.h
>

10 
MEM_SUPER_BLOCK
 
	gsu≥r_blk
 [
NR_SBLKS
];

12 
BUFFER_HEAD
 *
gë_blk
 (
u16
 
dev_no
,
u32
 
blk_no
) ;

13 
bªl£
 (
BUFFER_HEAD
 *
bh_‰ì
);

14 
BUFFER_HEAD
 *
bªad
 (
u16
 
dev_no
,
u32
 
blk_no
) ;

15 
¸ash
 (c⁄° *
fmt
,...) ;

16 
w¨n
 (c⁄° *
fmt
,...);

17 
MEM_INODE
* 
igë
 (
u16
 
dev_no
,
u32
 
öode_ƒ
);

18 
ùut
 (
MEM_INODE
 *
m_puti
) ;

21 
LOCAL
 
	$ªad_ibm≠
 (
MEM_SUPER_BLOCK
 *
sb
)

23 
u32
 
i
,
blk_ƒ
 = 2;

24 
BUFFER_HEAD
 *
tmp
;

26 
i
 = 0 ; i < 
sb
->
sb_im≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

27 i‡(!(
tmp
 = 
	`bªad
 (
sb
->
sb_dev
,
blk_ƒ
)))

28 
	`¸ash
 ( "read imap failed!\n" );

29 
sb
->
sb_im≠_bh
[
i
] = 
tmp
;

31 
i
 = 0 ; i < 
sb
->
sb_zm≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

32 i‡(!(
tmp
 = 
	`bªad
 (
sb
->
sb_dev
,
blk_ƒ
)))

33 
	`¸ash
 ( "read bmap failed!\n" );

34 
sb
->
sb_zm≠_bh
[
i
] = 
tmp
;

36 
	}
}

38 
MEM_SUPER_BLOCK
* 
	$gë_sblk
 (
u16
 
dev_no
)

40 
i32
 
i
 = 0 ;

42 i‡(!
dev_no
Ë (
NULL
);

43 
i
 = 0; i < 
NR_SBLKS
 ; i ++)

44 i‡(
su≥r_blk
[
i
].
sb_dev
 =
dev_no
)

45  (
su≥r_blk
+
i
);

46 
i
 = 0 ; i < 
NR_SBLKS
 ; i ++) {

47 i‡(!
su≥r_blk
[
i
].
sb_dev
) {

48 
BUFFER_HEAD
 *
tmp
 = 
	`bªad
 (
dev_no
,1);

49 i‡(!
tmp
)

50  (
NULL
);

51 
	`mem˝y
 (
su≥r_blk
+
i
,
tmp
->
bh_buf
,(
DEV_SUPER_BLOCK
));

52 
su≥r_blk
 [
i
].
sb_dev
 = 
dev_no
;

53 
	`bªl£
 (
tmp
);

54  (
su≥r_blk
+
i
);

57 
	`w¨n
 ( "m‹êth™ %d f†mou¡ed !\n",
NR_SBLKS
 );

58  (
NULL
);

59 
	}
}

61 
	$_put_sblk
 (
u8
 
roŸ
,
u16
 
dev_no
)

63 
MEM_SUPER_BLOCK
 *
sblk
 = 
NULL
;

64 
i32
 
i
 = 0 ;

66 i‡(
roŸ
 && (
dev_no
 =
ROOT_DEV
)) {

67 
	`w¨n
 ( "putÑootfs !" );

70 i‡(!
dev_no
 || !(
sblk
 = 
	`gë_sblk
(dev_no)))

72 i‡(
sblk
->
sb_i_mou¡ed
) {

73 
	`w¨n
 ( "put mounted dev !" );

76 i‡(
sblk
->
sb_dút
) {

77 
BUFFER_HEAD
 *
tmp
 = 
	`gë_blk
 (
dev_no
,1);

78 i‡(!
tmp
)

79 
	`¸ash
 ( "get block failed !" );

80 
	`mem˝y
 (
tmp
->
bh_buf
,
sblk
,(
DEV_SUPER_BLOCK
));

81 
tmp
->
bh_dút
 = 
åue
;

82 
tmp
->
bh_vÆid
 = 
åue
;

83 
	`bªl£
 (
tmp
);

85 
i
 = 0 ; i < 
sblk
->
sb_zm≠_blocks
; i ++)

86 
	`bªl£
 (
sblk
->
sb_zm≠_bh
[
i
]);

87 
i
 = 0 ; i < 
sblk
->
sb_im≠_blocks
 ;i ++)

88 
	`bªl£
 (
sblk
->
sb_im≠_bh
[
i
]);

89 
sblk
->
sb_dev
 = 0;

90 
	`mem£t
 (
sblk
,0,(sblk));

91 
	}
}

93 
INLINE
 
	$put_roŸfs
 (
u16
 
dev
)

95 
	`_put_sblk
 (0,
dev
);

96 
	}
}

98 
INLINE
 
	$put_sblk
 (
u16
 
dev
)

100 
	`_put_sblk
 (1,
dev
);

101 
	}
}

103 
i32
 
‰ì_öode
 (
MEM_INODE
 *
öode
) ;

104 
MEM_INODE
* 
√w_öode
 (
u16
 
dev_no
) ;

105 
u32
 
√w_block
 (
u16
 
dev_no
) ;

106 
‰ì_block
 (
u16
 
dev_no
,
u32
 
blk_ƒ
) ;

108 
	$¸ót_roŸi
 (
MEM_SUPER_BLOCK
 *
sb
)

110 
MEM_INODE
 *
roŸ
 = 
	`√w_öode
 (
sb
->
sb_dev
);

111 i‡(!(
roŸ
->
i_z⁄e
[0] = 
	`√w_block
 (roŸ->
i_dev
)))

112 
	`¸ash
 ("canÇot create basicÑooti");

113 
roŸ
->
i_size
 = 
BLK_SIZE
;

114 
roŸ
->
i_mtime
 =ÑoŸ->
i_acc_time
 = 
CUR_TIME
;

115 
roŸ
->
i_mode
 = 
I_DIRECTORY
;

116 
roŸ
->
i_uid
 = 
UID
;

117 
roŸ
->
i_gid
 = 
GID
;

118 
roŸ
->
i_dút
 = 
åue
;

119 
roŸ
->
i_vÆid
 = 
åue
;

121 
BUFFER_HEAD
 *
bh
;

122 
DIR_ENTRY
 *
bh_de_±r
;

124 i‡–!(
bh
 = 
	`bªad
 (
roŸ
->
i_dev
,roŸ->
i_z⁄e
[0])) )

125 
	`¸ash
 ( "canÇotÑeadÑootÉntries block !\n" );

126 
bh_de_±r
 = (
DIR_ENTRY
*)(
bh
->
bh_buf
);

127 
bh_de_±r
[0].
öode_ƒ
 = 
ROOT_IND_NR
;

128 
bh_de_±r
[0].
«me
[0] = '.';

129 
bh_de_±r
[0].
«me
[1] = '\0';

131 
bh_de_±r
[1].
öode_ƒ
 = 
ROOT_IND_NR
;

132 
bh_de_±r
[1].
«me
[0] = '.';

133 
bh_de_±r
[1].
«me
[1] = '.';

134 
bh_de_±r
[1].
«me
[2] = '\0';

136 
roŸ
->
i_∆öks
 = 2;

137 
bh
->
bh_dút
 = 
åue
;

138 
	`bªl£
 (
bh
);

139 
	`ùut
 (
roŸ
);

140 
	}
}

142 
LOCAL
 
	$f‹m©_roŸfs
 (
MEM_SUPER_BLOCK
 *
sb
)

144 
u32
 
i
 = 0 , 
blk_ƒ
 = 2;

145 
BUFFER_HEAD
 *
tmp
;

147 
	`¥ötf
 ( "Formating ROOTFS ...\n" );

148 
sb
->
sb_nöodes
 = 
NR_INODES
 ;

149 
sb
->
sb_nz⁄es
 = 
NR_ZONES
;

150 
sb
->
sb_zm≠_blocks
 = 
NR_ZMAP_BLKS
;

151 
sb
->
sb_im≠_blocks
 = 
NR_IMAP_BLKS
;

152 
sb
->
sb_fú°_d©az⁄e
 = 2 + 
NR_IMAP_BLKS
 + 
NR_ZMAP_BLKS
 +

154 ((
NR_INODES
 * (
DEV_INODE
)>>
BLK_SIZE_SFT
));

155 
sb
->
sb_log_z⁄e_size
 = 0;

156 
sb
->
sb_max_size
 = 
NR_ZMAP_BLKS
 * (
BLK_SIZE
 << 3) * BLK_SIZE;

157 
sb
->
sb_magic
 = 
CASEY_MAGIC
;

158 
sb
->
sb_pos
 = 0;

160 i‡(!(
tmp
 = 
	`bªad
 (
sb
->
sb_dev
,1)))

161 
	`¸ash
 ("setup sblk failedát getblk !" );

162 
	`mem£t
 (
tmp
->
bh_buf
,0,
BLK_SIZE
);

163 
	`mem˝y
 (
tmp
->
bh_buf
,(*)
sb
,(
DEV_SUPER_BLOCK
));

164 
tmp
->
bh_dút
 = 
åue
;

165 
	`bªl£
 (
tmp
);

167 
i
 = 0 ; i < 
sb
->
sb_im≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

168 i‡(!(
tmp
 = 
	`bªad
 (
sb
->
sb_dev
,
blk_ƒ
)))

169 
	`¸ash
 ( "read imap failed!" );

170 
	`mem£t
 (
tmp
->
bh_buf
,0,
BLK_SIZE
);

171 
tmp
->
bh_dút
 = 
åue
;

172 
sb
->
sb_im≠_bh
[
i
] = 
tmp
;

174 
i
 = 0 ; i < 
sb
->
sb_zm≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

175 i‡(!(
tmp
 = 
	`bªad
 (
sb
->
sb_dev
,
blk_ƒ
)))

176 
	`¸ash
 ( "read bmap failed!" );

177 
	`mem£t
 (
tmp
->
bh_buf
,0,
BLK_SIZE
);

178 
tmp
->
bh_dút
 = 
åue
;

179 
sb
->
sb_zm≠_bh
[
i
] = 
tmp
;

181 
	`¸ót_roŸi
 (
sb
);

182 
	`¥ötf
 ( "ROOTFS Formated Done .\n" );

183 
	}
}

185 
	$lﬂd_roŸfs
 (
u16
 
dev_no
)

187 
MEM_SUPER_BLOCK
 *
sb
 = 
	`gë_sblk
 (
dev_no
);

188 i‡(!
sb
)

189 
	`¸ash
 ("read super block failed !\n" );

190 i‡(
sb
->
sb_magic
 !
CASEY_MAGIC
)

191 
	`f‹m©_roŸfs
 (
sb
);

193 
	`ªad_ibm≠
 (
sb
);

194 
	}
}

196 
MEM_INODE
 *
«mei
 (
RO
 
i8
 *
∑th
) ;

198 
i32
 
	$do_mou¡
 (
RO
 
i8
 *
dev_«me
,RO i8 *
dú_«me
,
u32
 
rw
)

200 
MEM_INODE
 *
m_dú
;

201 
u16
 
dev
;

203 i‡(!(
m_dú
 = 
	`«mei
 (
dev_«me
)))

204  (-
ENOPATH
);

205 i‡(!
	`S_ISBLK
 (
m_dú
->
i_mode
)) {

206 
	`ùut
 (
m_dú
);

207  (-
ENOPERM
);

209 
dev
 = 
m_dú
->
i_z⁄e
 [0];

210 
	`ùut
 (
m_dú
);

212 i‡(!(
m_dú
 = 
	`«mei
 (
dú_«me
)))

213  (-
ENOPATH
);

214 i‡(
m_dú
->
i_˙t
 !1 || m_dú->
i_num
 =
ROOT_IND_NR
) {

215 
	`ùut
 (
m_dú
);

216  (-
EOBUSY
);

218 i‡(!
	`S_ISDIR
 (
m_dú
->
i_mode
)) {

219 
	`ùut
 (
m_dú
);

220  (-
ENOTD
);

222 
MEM_SUPER_BLOCK
 *
sb
 = 
	`gë_sblk
 (
dev
);

223 i‡(!
sb
) {

224 
	`ùut
 (
m_dú
);

225  (-
EOINVALID
);

227 i‡(
sb
->
sb_magic
 !
CASEY_MAGIC
) {

228 
	`ùut
 (
m_dú
);

229 
sb
->
sb_dev
 = 0;

230  (-
EOINVALID
);

232 i‡(
sb
->
sb_i_mou¡ed
) {

233 
	`ùut
 (
m_dú
);

234  (-
ENOPERM
);

237 
	`ªad_ibm≠
 (
sb
) ;

239 
sb
->
sb_i_mou¡ed
 = 
m_dú
;

240 
sb
->
sb_ro
 = (
rw
 != 0);

241 
m_dú
->
i_mou¡ed
 = 
åue
;

242 
m_dú
->
i_dút
 = 
åue
;

244 
	}
}

246 
¥oc_°
 *
¥oc
;

247 
MEM_INODE
 
öode_èbÀ
[
NR_INODE_BUF
] ;

248 
sync_dev_blks
 (
u16
 
dev_no
);

249 
sync_dev_öodes
 ();

251 
i32
 
	$do_umou¡
 (
RO
 
i8
 *
dú_«me
)

253 
MEM_INODE
 *
m_dú
;

254 
u16
 
dev
;

255 
MEM_INODE
 *
cwd
;

256 
u32
 
i
 = 0;

258 i‡(!(
m_dú
 = 
	`«mei
 (
dú_«me
)))

259  (-
ENOPATH
);

260 i‡(!
	`S_ISDIR
 (
m_dú
->
i_mode
)) {

261 
	`ùut
 (
m_dú
);

262  (-
ENOTD
);

264 
dev
 = 
m_dú
->
i_dev
;

265 
	`ùut
 (
m_dú
);

267 i‡(
ROOT_DEV
 =
dev
)

268  (-
EOBUSY
);

270 
MEM_SUPER_BLOCK
 *
sb
 ;

272 i‡(!(
sb
 = 
	`gë_sblk
 (
dev
)Ë|| !sb->
sb_i_mou¡ed
)

273  (-
ENOPERM
);

274 i‡(!
sb
->
sb_i_mou¡ed
->
i_mou¡ed
)

275 
	`w¨n
 ( "mounted inode has i_mounted = 0 \n");

279 
cwd
 = 
	`igë
 (
¥oc
->cwd.
dev
,¥oc->cwd.
ör
);

281 
i
 = 0 ; i < 
NR_INODE_BUF
 ; i ++) {

282 i‡(
öode_èbÀ
 [
i
].
i_dev
 =
dev
 && inode_èbÀ [i].
i_˙t
) {

283 
	`ùut
 (
cwd
);

284  (-
EOBUSY
);

288 
sb
->
sb_i_mou¡ed
->
i_mou¡ed
 = 
Ál£
;

289 
	`ùut
 (
sb
->
sb_i_mou¡ed
);

290 
sb
->
sb_i_mou¡ed
 = 
NULL
;

291 
	`ùut
 (
cwd
);

295 
	`put_sblk
 (
dev
);

296 
	`sync_dev_öodes
 ();

297 
	`sync_dev_blks
 (
dev
);

299 
	}
}

	@include/2440/2440addr.h

7 #i‚de‡
__2440ADDR_H__


8 
	#__2440ADDR_H__


	)

10 
	~<2440/p‹ts.h
>

18 
	#BUSWIDTH
 (32)

	)

22 
	#USBDMA
 1

23 
	#USBDMA_DEMAND
 0

24 
	#BULK_PKT_SIZE
 64

	)

26 
	#_IO_ADDR_START
 (0xE0000000)

	)

27 
	#_OLD_OFFSET
 (0x48000000)

	)

30 
	#IO_WORD
(
x
Ë(*((vﬁ©ûê*)((xË+ 0x98000000)))

	)

31 
	#IO_SHORT
(
x
Ë(*((vﬁ©ûê*)((xË+ 0x98000000)))

	)

32 
	#IO_BYTE
(
x
Ë(*((vﬁ©ûê*)((xË+ 0x98000000)))

	)

35 
	#rSRCPND
 
	`IO_WORD
(0x4a000000)

36 
	#rINTMOD
 
	`IO_WORD
(0x4a000004)

37 
	#rINTMSK
 
	`IO_WORD
(0x4a000008)

38 
	#rPRIORITY
 
	`IO_WORD
(0x4a00000c)

39 
	#rINTPND
 
	`IO_WORD
(0x4a000010)

40 
	#rINTOFFSET
 
	`IO_WORD
(0x4a000014)

41 
	#rSUBSRCPND
 
	`IO_WORD
(0x4a000018)

42 
	#rINTSUBMSK
 
	`IO_WORD
(0x4a00001c)

43 

	)

45 
	#rDISRC0
 
	`IO_WORD
(0x4b000000)

46 
	#rDISRCC0
 
	`IO_WORD
(0x4b000004)

47 
	#rDIDST0
 
	`IO_WORD
(0x4b000008)

48 
	#rDIDSTC0
 
	`IO_WORD
(0x4b00000c)

49 
	#rDCON0
 
	`IO_WORD
(0x4b000010)

50 
	#rDSTAT0
 
	`IO_WORD
(0x4b000014)

51 
	#rDCSRC0
 
	`IO_WORD
(0x4b000018)

52 
	#rDCDST0
 
	`IO_WORD
(0x4b00001c)

53 
	#rDMASKTRIG0
 
	`IO_WORD
(0x4b000020)

54 

	)

55 
	#rDISRC1
 
	`IO_WORD
(0x4b000040)

56 
	#rDISRCC1
 
	`IO_WORD
(0x4b000044)

57 
	#rDIDST1
 
	`IO_WORD
(0x4b000048)

58 
	#rDIDSTC1
 
	`IO_WORD
(0x4b00004c)

59 
	#rDCON1
 
	`IO_WORD
(0x4b000050)

60 
	#rDSTAT1
 
	`IO_WORD
(0x4b000054)

61 
	#rDCSRC1
 
	`IO_WORD
(0x4b000058)

62 
	#rDCDST1
 
	`IO_WORD
(0x4b00005c)

63 
	#rDMASKTRIG1
 
	`IO_WORD
(0x4b000060)

64 

	)

65 
	#rDISRC2
 
	`IO_WORD
(0x4b000080)

66 
	#rDISRCC2
 
	`IO_WORD
(0x4b000084)

67 
	#rDIDST2
 
	`IO_WORD
(0x4b000088)

68 
	#rDIDSTC2
 
	`IO_WORD
(0x4b00008c)

69 
	#rDCON2
 
	`IO_WORD
(0x4b000090)

70 
	#rDSTAT2
 
	`IO_WORD
(0x4b000094)

71 
	#rDCSRC2
 
	`IO_WORD
(0x4b000098)

72 
	#rDCDST2
 
	`IO_WORD
(0x4b00009c)

73 
	#rDMASKTRIG2
 
	`IO_WORD
(0x4b0000a0)

74 

	)

75 
	#rDISRC3
 
	`IO_WORD
(0x4b0000c0)

76 
	#rDISRCC3
 
	`IO_WORD
(0x4b0000c4)

77 
	#rDIDST3
 
	`IO_WORD
(0x4b0000c8)

78 
	#rDIDSTC3
 
	`IO_WORD
(0x4b0000cc)

79 
	#rDCON3
 
	`IO_WORD
(0x4b0000d0)

80 
	#rDSTAT3
 
	`IO_WORD
(0x4b0000d4)

81 
	#rDCSRC3
 
	`IO_WORD
(0x4b0000d8)

82 
	#rDCDST3
 
	`IO_WORD
(0x4b0000dc)

83 
	#rDMASKTRIG3
 
	`IO_WORD
(0x4b0000e0)

84 

	)

87 
	#rLOCKTIME
 
	`IO_WORD
(0x4c000000)

88 
	#rMPLLCON
 
	`IO_WORD
(0x4c000004)

89 
	#rUPLLCON
 
	`IO_WORD
(0x4c000008)

90 
	#rCLKCON
 
	`IO_WORD
(0x4c00000c)

91 
	#rCLKSLOW
 
	`IO_WORD
(0x4c000010)

92 
	#rCLKDIVN
 
	`IO_WORD
(0x4c000014)

93 
	#rCAMDIVN
 
	`IO_WORD
(0x4c000018)

94 

	)

97 
	#rLCDCON1
 
	`IO_WORD
(0x4d000000)

98 
	#rLCDCON2
 
	`IO_WORD
(0x4d000004)

99 
	#rLCDCON3
 
	`IO_WORD
(0x4d000008)

100 
	#rLCDCON4
 
	`IO_WORD
(0x4d00000c)

101 
	#rLCDCON5
 
	`IO_WORD
(0x4d000010)

102 
	#rLCDSADDR1
 
	`IO_WORD
(0x4d000014)

103 
	#rLCDSADDR2
 
	`IO_WORD
(0x4d000018)

104 
	#rLCDSADDR3
 
	`IO_WORD
(0x4d00001c)

105 
	#rREDLUT
 
	`IO_WORD
(0x4d000020)

106 
	#rGREENLUT
 
	`IO_WORD
(0x4d000024)

107 
	#rBLUELUT
 
	`IO_WORD
(0x4d000028)

108 
	#rDITHMODE
 
	`IO_WORD
(0x4d00004c)

109 
	#rTPAL
 
	`IO_WORD
(0x4d000050)

110 
	#rLCDINTPND
 
	`IO_WORD
(0x4d000054)

111 
	#rLCDSRCPND
 
	`IO_WORD
(0x4d000058)

112 
	#rLCDINTMSK
 
	`IO_WORD
(0x4d00005c)

113 
	#rTCONSEL
 
	`IO_WORD
(0x4d000060)

114 
	#PALETTE
 
	`IO_WORD
(0x4d000400)

115 

	)

118 
	#rNFCONF
 
	`IO_WORD
(0x4E000000)

119 
	#rNFCONT
 
	`IO_WORD
(0x4E000004)

120 
	#rNFCMD
 
	`IO_WORD
(0x4E000008)

121 
	#rNFADDR
 
	`IO_WORD
(0x4E00000C)

122 
	#rNFDATA
 
	`IO_WORD
(0x4E000010)

123 
	#rNFDATA8
 
	`IO_BYTE
(0x4E000010)

124 
	#NFDATA
 
	`IO_WORD
(0x4E000010)

125 
	#rNFMECCD0
 
	`IO_WORD
(0x4E000014)

126 
	#rNFMECCD1
 
	`IO_WORD
(0x4E000018)

	)

127 
	#rNFSECCD
 
	`IO_WORD
(0x4E00001C)

128 
	#rNFSTAT
 
	`IO_WORD
(0x4E000020)

129 
	#rNFESTAT0
 
	`IO_WORD
(0x4E000024)

	)

130 
	#rNFESTAT1
 
	`IO_WORD
(0x4E000028)

	)

131 
	#rNFMECC0
 
	`IO_WORD
(0x4E00002C)

	)

132 
	#rNFMECC1
 
	`IO_WORD
(0x4E000030)

	)

133 
	#rNFSECC
 
	`IO_WORD
(0x4E000034)

	)

134 
	#rNFSBLK
 
	`IO_WORD
(0x4E000038)

135 
	#rNFEBLK
 
	`IO_WORD
(0x4E00003C)

136 

	)

139 
	#rCISRCFMT
 
	`IO_WORD
(0x4F000000)

	)

140 
	#rCIWDOFST
 
	`IO_WORD
(0x4F000004)

	)

141 
	#rCIGCTRL
 
	`IO_WORD
(0x4F000008)

	)

142 
	#rCICOYSA1
 
	`IO_WORD
(0x4F000018)

	)

143 
	#rCICOYSA2
 
	`IO_WORD
(0x4F00001C)

	)

144 
	#rCICOYSA3
 
	`IO_WORD
(0x4F000020)

	)

145 
	#rCICOYSA4
 
	`IO_WORD
(0x4F000024)

	)

146 
	#rCICOCBSA1
 
	`IO_WORD
(0x4F000028)

	)

147 
	#rCICOCBSA2
 
	`IO_WORD
(0x4F00002C)

	)

148 
	#rCICOCBSA3
 
	`IO_WORD
(0x4F000030)

	)

149 
	#rCICOCBSA4
 
	`IO_WORD
(0x4F000034)

	)

150 
	#rCICOCRSA1
 
	`IO_WORD
(0x4F000038)

	)

151 
	#rCICOCRSA2
 
	`IO_WORD
(0x4F00003C)

	)

152 
	#rCICOCRSA3
 
	`IO_WORD
(0x4F000040)

	)

153 
	#rCICOCRSA4
 
	`IO_WORD
(0x4F000044)

	)

154 
	#rCICOTRGFMT
 
	`IO_WORD
(0x4F000048)

	)

155 
	#rCICOCTRL
 
	`IO_WORD
(0x4F00004C)

	)

156 
	#rCICOSCPRERATIO
 
	`IO_WORD
(0x4F000050)

	)

157 
	#rCICOSCPREDST
 
	`IO_WORD
(0x4F000054)

	)

158 
	#rCICOSCCTRL
 
	`IO_WORD
(0x4F000058)

	)

159 
	#rCICOTAREA
 
	`IO_WORD
(0x4F00005C)

	)

160 
	#rCICOSTATUS
 
	`IO_WORD
(0x4F000064)

	)

161 
	#rCIPRCLRSA1
 
	`IO_WORD
(0x4F00006C)

	)

162 
	#rCIPRCLRSA2
 
	`IO_WORD
(0x4F000070)

	)

163 
	#rCIPRCLRSA3
 
	`IO_WORD
(0x4F000074)

	)

164 
	#rCIPRCLRSA4
 
	`IO_WORD
(0x4F000078)

	)

165 
	#rCIPRTRGFMT
 
	`IO_WORD
(0x4F00007C)

	)

166 
	#rCIPRCTRL
 
	`IO_WORD
(0x4F000080)

	)

167 
	#rCIPRSCPRERATIO
 
	`IO_WORD
(0x4F000084)

	)

168 
	#rCIPRSCPREDST
 
	`IO_WORD
(0x4F000088)

	)

169 
	#rCIPRSCCTRL
 
	`IO_WORD
(0x4F00008C)

	)

170 
	#rCIPRTAREA
 
	`IO_WORD
(0x4F000090)

	)

171 
	#rCIPRSTATUS
 
	`IO_WORD
(0x4F000098)

	)

172 
	#rCIIMGCPT
 
	`IO_WORD
(0x4F0000A0)

	)

176 
	#rULCON0
 
	`IO_WORD
(0x50000000)

177 
	#rUCON0
 
	`IO_WORD
(0x50000004)

178 
	#rUFCON0
 
	`IO_WORD
(0x50000008)

179 
	#rUMCON0
 
	`IO_WORD
(0x5000000c)

180 
	#rUTRSTAT0
 
	`IO_WORD
(0x50000010)

181 
	#rUERSTAT0
 
	`IO_WORD
(0x50000014)

182 
	#rUFSTAT0
 
	`IO_WORD
(0x50000018)

183 
	#rUMSTAT0
 
	`IO_WORD
(0x5000001c)

184 
	#rUBRDIV0
 
	`IO_WORD
(0x50000028)

185 

	)

186 
	#rULCON1
 
	`IO_WORD
(0x50004000)

187 
	#rUCON1
 
	`IO_WORD
(0x50004004)

188 
	#rUFCON1
 
	`IO_WORD
(0x50004008)

189 
	#rUMCON1
 
	`IO_WORD
(0x5000400c)

190 
	#rUTRSTAT1
 
	`IO_WORD
(0x50004010)

191 
	#rUERSTAT1
 
	`IO_WORD
(0x50004014)

192 
	#rUFSTAT1
 
	`IO_WORD
(0x50004018)

193 
	#rUMSTAT1
 
	`IO_WORD
(0x5000401c)

194 
	#rUBRDIV1
 
	`IO_WORD
(0x50004028)

195 
	#rULCON2
 
	`IO_WORD
(0x50008000)

196 
	#rUCON2
 
	`IO_WORD
(0x50008004)

197 
	#rUFCON2
 
	`IO_WORD
(0x50008008)

198 
	#rUMCON2
 
	`IO_WORD
(0x5000800c)

199 
	#rUTRSTAT2
 
	`IO_WORD
(0x50008010)

200 
	#rUERSTAT2
 
	`IO_WORD
(0x50008014)

201 
	#rUFSTAT2
 
	`IO_WORD
(0x50008018)

202 
	#rUMSTAT2
 
	`IO_WORD
(0x5000801c)

203 
	#rUBRDIV2
 
	`IO_WORD
(0x50008028)

204 

	)

206 
	#rUTXH0
 
	`IO_BYTE
(0x50000020)

207 
	#rURXH0
 
	`IO_BYTE
(0x50000024)

208 
	#rUTXH1
 
	`IO_BYTE
(0x50004020)

209 
	#rURXH1
 
	`IO_BYTE
(0x50004024)

210 
	#rUTXH2
 
	`IO_BYTE
(0x50008020)

211 
	#rURXH2
 
	`IO_BYTE
(0x50008024)

212 

	)

214 
	#rTCFG0
 
	`IO_WORD
(0x51000000)

215 
	#rTCFG1
 
	`IO_WORD
(0x51000004)

216 
	#rTCON
 
	`IO_WORD
(0x51000008)

217 
	#rTCNTB0
 
	`IO_WORD
(0x5100000c)

218 
	#rTCMPB0
 
	`IO_WORD
(0x51000010)

219 
	#rTCNTO0
 
	`IO_WORD
(0x51000014)

220 
	#rTCNTB1
 
	`IO_WORD
(0x51000018)

221 
	#rTCMPB1
 
	`IO_WORD
(0x5100001c)

222 
	#rTCNTO1
 
	`IO_WORD
(0x51000020)

223 
	#rTCNTB2
 
	`IO_WORD
(0x51000024)

224 
	#rTCMPB2
 
	`IO_WORD
(0x51000028)

225 
	#rTCNTO2
 
	`IO_WORD
(0x5100002c)

226 
	#rTCNTB3
 
	`IO_WORD
(0x51000030)

227 
	#rTCMPB3
 
	`IO_WORD
(0x51000034)

228 
	#rTCNTO3
 
	`IO_WORD
(0x51000038)

229 
	#rTCNTB4
 
	`IO_WORD
(0x5100003c)

230 
	#rTCNTO4
 
	`IO_WORD
(0x51000040)

231 

	)

234 
	#rFUNC_ADDR_REG
 
	`IO_BYTE
(0x52000140)

235 
	#rPWR_REG
 
	`IO_BYTE
(0x52000144)

236 
	#rEP_INT_REG
 
	`IO_BYTE
(0x52000148)

237 
	#rUSB_INT_REG
 
	`IO_BYTE
(0x52000158)

238 
	#rEP_INT_EN_REG
 
	`IO_BYTE
(0x5200015c)

239 
	#rUSB_INT_EN_REG
 
	`IO_BYTE
(0x5200016c)

	)

240 
	#rFRAME_NUM1_REG
 
	`IO_BYTE
(0x52000170)

241 
	#rFRAME_NUM2_REG
 
	`IO_BYTE
(0x52000174)

242 
	#rINDEX_REG
 
	`IO_BYTE
(0x52000178)

243 
	#rMAXP_REG
 
	`IO_BYTE
(0x52000180)

244 
	#rEP0_CSR
 
	`IO_BYTE
(0x52000184)

245 
	#rIN_CSR1_REG
 
	`IO_BYTE
(0x52000184)

246 
	#rIN_CSR2_REG
 
	`IO_BYTE
(0x52000188)

	)

247 
	#rOUT_CSR1_REG
 
	`IO_BYTE
(0x52000190)

248 
	#rOUT_CSR2_REG
 
	`IO_BYTE
(0x52000194)

	)

249 
	#rOUT_FIFO_CNT1_REG
 
	`IO_BYTE
(0x52000198)

250 
	#rOUT_FIFO_CNT2_REG
 
	`IO_BYTE
(0x5200019c)

	)

251 
	#rEP0_FIFO
 
	`IO_BYTE
(0x520001c0)

252 
	#rEP1_FIFO
 
	`IO_BYTE
(0x520001c4)

253 
	#rEP2_FIFO
 
	`IO_BYTE
(0x520001c8)

254 
	#rEP3_FIFO
 
	`IO_BYTE
(0x520001cc)

255 
	#rEP4_FIFO
 
	`IO_BYTE
(0x520001d0)

256 
	#rEP1_DMA_CON
 
	`IO_BYTE
(0x52000200)

257 
	#rEP1_DMA_UNIT
 
	`IO_BYTE
(0x52000204)

258 
	#rEP1_DMA_FIFO
 
	`IO_BYTE
(0x52000208)

259 
	#rEP1_DMA_TTC_L
 
	`IO_BYTE
(0x5200020c)

260 
	#rEP1_DMA_TTC_M
 
	`IO_BYTE
(0x52000210)

	)

261 
	#rEP1_DMA_TTC_H
 
	`IO_BYTE
(0x52000214)

	)

262 
	#rEP2_DMA_CON
 
	`IO_BYTE
(0x52000218)

263 
	#rEP2_DMA_UNIT
 
	`IO_BYTE
(0x5200021c)

264 
	#rEP2_DMA_FIFO
 
	`IO_BYTE
(0x52000220)

265 
	#rEP2_DMA_TTC_L
 
	`IO_BYTE
(0x52000224)

266 
	#rEP2_DMA_TTC_M
 
	`IO_BYTE
(0x52000228)

	)

267 
	#rEP2_DMA_TTC_H
 
	`IO_BYTE
(0x5200022c)

	)

268 
	#rEP3_DMA_CON
 
	`IO_BYTE
(0x52000240)

269 
	#rEP3_DMA_UNIT
 
	`IO_BYTE
(0x52000244)

270 
	#rEP3_DMA_FIFO
 
	`IO_BYTE
(0x52000248)

271 
	#rEP3_DMA_TTC_L
 
	`IO_BYTE
(0x5200024c)

272 
	#rEP3_DMA_TTC_M
 
	`IO_BYTE
(0x52000250)

	)

273 
	#rEP3_DMA_TTC_H
 
	`IO_BYTE
(0x52000254)

	)

274 
	#rEP4_DMA_CON
 
	`IO_BYTE
(0x52000258)

275 
	#rEP4_DMA_UNIT
 
	`IO_BYTE
(0x5200025c)

276 
	#rEP4_DMA_FIFO
 
	`IO_BYTE
(0x52000260)

277 
	#rEP4_DMA_TTC_L
 
	`IO_BYTE
(0x52000264)

278 
	#rEP4_DMA_TTC_M
 
	`IO_BYTE
(0x52000268)

	)

279 
	#rEP4_DMA_TTC_H
 
	`IO_BYTE
(0x5200026c)

	)

282 
	#rWTCON
 
	`IO_WORD
(0x53000000)

283 
	#rWTDAT
 
	`IO_WORD
(0x53000004)

284 
	#rWTCNT
 
	`IO_WORD
(0x53000008)

285 

	)

287 
	#rIICCON
 
	`IO_WORD
(0x54000000)

288 
	#rIICSTAT
 
	`IO_WORD
(0x54000004)

289 
	#rIICADD
 
	`IO_WORD
(0x54000008)

290 
	#rIICDS
 
	`IO_WORD
(0x5400000c)

291 
	#rIICLC
 
	`IO_WORD
(0x54000010)

292 

	)

294 
	#rIISCON
 
	`IO_WORD
(0x55000000)

295 
	#rIISMOD
 
	`IO_WORD
(0x55000004)

296 
	#rIISPSR
 
	`IO_WORD
(0x55000008)

297 
	#rIISFCON
 
	`IO_WORD
(0x5500000c)

298 
	#IISFIFO
 
	`IO_SHORT
(0x55000010)

299 

	)

301 
	#rAC_GLBCTRL
 
	`IO_WORD
(0x5b000000)

	)

302 
	#rAC_GLBSTAT
 
	`IO_WORD
(0x5b000004)

	)

303 
	#rAC_CODEC_CMD
 
	`IO_WORD
(0x5b000008)

	)

304 
	#rAC_CODEC_STAT
 
	`IO_WORD
(0x5b00000C)

	)

305 
	#rAC_PCMADDR
 
	`IO_WORD
(0x5b000010)

	)

306 
	#rAC_MICADDR
 
	`IO_WORD
(0x5b000014)

	)

307 
	#rAC_PCMDATA
 
	`IO_WORD
(0x5b000018)

	)

308 
	#rAC_MICDATA
 
	`IO_WORD
(0x5b00001C)

	)

309 
	#AC_PCMDATA
 
	`IO_WORD
(0x5b000018)

	)

310 
	#AC_MICDATA
 
	`IO_WORD
(0x5b00001C)

	)

313 
	#rGPACON
 
	`IO_WORD
(0x56000000)

314 
	#rGPADAT
 
	`IO_WORD
(0x56000004)

315 

	)

316 
	#rGPBCON
 
	`IO_WORD
(0x56000010)

317 
	#rGPBDAT
 
	`IO_WORD
(0x56000014)

318 
	#rGPBUP
 
	`IO_WORD
(0x56000018)

319 

	)

320 
	#rGPCCON
 
	`IO_WORD
(0x56000020)

321 
	#rGPCDAT
 
	`IO_WORD
(0x56000024)

322 
	#rGPCUP
 
	`IO_WORD
(0x56000028)

323 

	)

324 
	#rGPDCON
 
	`IO_WORD
(0x56000030)

325 
	#rGPDDAT
 
	`IO_WORD
(0x56000034)

326 
	#rGPDUP
 
	`IO_WORD
(0x56000038)

327 

	)

328 
	#rGPECON
 
	`IO_WORD
(0x56000040)

329 
	#rGPEDAT
 
	`IO_WORD
(0x56000044)

330 
	#rGPEUP
 
	`IO_WORD
(0x56000048)

331 

	)

332 
	#rGPFCON
 
	`IO_WORD
(0x56000050)

333 
	#rGPFDAT
 
	`IO_WORD
(0x56000054)

334 
	#rGPFUP
 
	`IO_WORD
(0x56000058)

335 

	)

336 
	#rGPGCON
 
	`IO_WORD
(0x56000060)

337 
	#rGPGDAT
 
	`IO_WORD
(0x56000064)

338 
	#rGPGUP
 
	`IO_WORD
(0x56000068)

339 

	)

340 
	#rGPHCON
 
	`IO_WORD
(0x56000070)

341 
	#rGPHDAT
 
	`IO_WORD
(0x56000074)

342 
	#rGPHUP
 
	`IO_WORD
(0x56000078)

343 

	)

344 
	#rGPJCON
 
	`IO_WORD
(0x560000d0)

345 
	#rGPJDAT
 
	`IO_WORD
(0x560000d4)

346 
	#rGPJUP
 
	`IO_WORD
(0x560000d8)

347 

	)

348 
	#rMISCCR
 
	`IO_WORD
(0x56000080)

349 
	#rDCLKCON
 
	`IO_WORD
(0x56000084)

350 
	#rEXTINT0
 
	`IO_WORD
(0x56000088)

351 
	#rEXTINT1
 
	`IO_WORD
(0x5600008c)

352 
	#rEXTINT2
 
	`IO_WORD
(0x56000090)

353 
	#rEINTFLT0
 
	`IO_WORD
(0x56000094)

354 
	#rEINTFLT1
 
	`IO_WORD
(0x56000098)

355 
	#rEINTFLT2
 
	`IO_WORD
(0x5600009c)

356 
	#rEINTFLT3
 
	`IO_WORD
(0x560000a0)

357 
	#rEINTMASK
 
	`IO_WORD
(0x560000a4)

358 
	#rEINTPEND
 
	`IO_WORD
(0x560000a8)

359 
	#rGSTATUS0
 
	`IO_WORD
(0x560000ac)

360 
	#rGSTATUS1
 
	`IO_WORD
(0x560000b0)

361 
	#rGSTATUS2
 
	`IO_WORD
(0x560000b4)

362 
	#rGSTATUS3
 
	`IO_WORD
(0x560000b8)

363 
	#rGSTATUS4
 
	`IO_WORD
(0x560000bc)

364 

	)

366 
	#rFLTOUT
 
	`IO_WORD
(0x560000c0)

367 
	#rDSC0
 
	`IO_WORD
(0x560000c4)

368 
	#rDSC1
 
	`IO_WORD
(0x560000c8)

369 
	#rMSLCON
 
	`IO_WORD
(0x560000cc)

370 

	)

372 
	#rRTCCON
 
	`IO_BYTE
(0x57000040)

373 
	#rTICNT
 
	`IO_BYTE
(0x57000044)

374 
	#rRTCALM
 
	`IO_BYTE
(0x57000050)

375 
	#rALMSEC
 
	`IO_BYTE
(0x57000054)

376 
	#rALMMIN
 
	`IO_BYTE
(0x57000058)

377 
	#rALMHOUR
 
	`IO_BYTE
(0x5700005c)

378 
	#rALMDATE
 
	`IO_BYTE
(0x57000060)

379 
	#rALMMON
 
	`IO_BYTE
(0x57000064)

380 
	#rALMYEAR
 
	`IO_BYTE
(0x57000068)

381 
	#rRTCRST
 
	`IO_BYTE
(0x5700006c)

382 
	#rBCDSEC
 
	`IO_BYTE
(0x57000070)

383 
	#rBCDMIN
 
	`IO_BYTE
(0x57000074)

384 
	#rBCDHOUR
 
	`IO_BYTE
(0x57000078)

385 
	#rBCDDATE
 
	`IO_BYTE
(0x5700007c)

386 
	#rBCDDAY
 
	`IO_BYTE
(0x57000080)

387 
	#rBCDMON
 
	`IO_BYTE
(0x57000084)

388 
	#rBCDYEAR
 
	`IO_BYTE
(0x57000088)

389 

	)

392 
	#rADCCON
 
	`IO_WORD
(0x58000000)

393 
	#rADCTSC
 
	`IO_WORD
(0x58000004)

394 
	#rADCDLY
 
	`IO_WORD
(0x58000008)

395 
	#rADCDAT0
 
	`IO_WORD
(0x5800000c)

396 
	#rADCDAT1
 
	`IO_WORD
(0x58000010)

397 
	#rADCUPDN
 
	`IO_WORD
(0x58000014)

398 

	)

401 
	#rSPCON0
 
	`IO_WORD
(0x59000000)

402 
	#rSPSTA0
 
	`IO_WORD
(0x59000004)

403 
	#rSPPIN0
 
	`IO_WORD
(0x59000008)

404 
	#rSPPRE0
 
	`IO_WORD
(0x5900000c)

405 
	#rSPTDAT0
 
	`IO_WORD
(0x59000010)

406 
	#rSPRDAT0
 
	`IO_WORD
(0x59000014)

407 

	)

408 
	#rSPCON1
 
	`IO_WORD
(0x59000020)

409 
	#rSPSTA1
 
	`IO_WORD
(0x59000024)

410 
	#rSPPIN1
 
	`IO_WORD
(0x59000028)

411 
	#rSPPRE1
 
	`IO_WORD
(0x5900002c)

412 
	#rSPTDAT1
 
	`IO_WORD
(0x59000030)

413 
	#rSPRDAT1
 
	`IO_WORD
(0x59000034)

414 

	)

417 
	#rSDICON
 
	`IO_WORD
(0x5a000000)

418 
	#rSDIPRE
 
	`IO_WORD
(0x5a000004)

419 
	#rSDICARG
 
	`IO_WORD
(0x5a000008)

420 
	#rSDICCON
 
	`IO_WORD
(0x5a00000c)

421 
	#rSDICSTA
 
	`IO_WORD
(0x5a000010)

422 
	#rSDIRSP0
 
	`IO_WORD
(0x5a000014)

423 
	#rSDIRSP1
 
	`IO_WORD
(0x5a000018)

424 
	#rSDIRSP2
 
	`IO_WORD
(0x5a00001c)

425 
	#rSDIRSP3
 
	`IO_WORD
(0x5a000020)

426 
	#rSDIDTIMER
 
	`IO_WORD
(0x5a000024)

427 
	#rSDIBSIZE
 
	`IO_WORD
(0x5a000028)

428 
	#rSDIDCON
 
	`IO_WORD
(0x5a00002c)

429 
	#rSDIDCNT
 
	`IO_WORD
(0x5a000030)

430 
	#rSDIDSTA
 
	`IO_WORD
(0x5a000034)

431 
	#rSDIFSTA
 
	`IO_WORD
(0x5a000038)

432 
	#rSDIIMSK
 
	`IO_WORD
(0x5a00003c)

433 
	#rSDIDAT
 
	`IO_WORD
(0x5a000040)

434 

	)

436 
	#BIT_EINT0
 (0x1)

	)

437 
	#BIT_EINT1
 (0x1<<1)

	)

438 
	#BIT_EINT2
 (0x1<<2)

	)

439 
	#BIT_EINT3
 (0x1<<3)

	)

440 
	#BIT_EINT4_7
 (0x1<<4)

	)

441 
	#BIT_EINT8_23
 (0x1<<5)

	)

442 
	#BIT_CAM
 (0x1<<6)

443 
	#BIT_BAT_FLT
 (0x1<<7)

	)

444 
	#BIT_TICK
 (0x1<<8)

	)

445 
	#BIT_WDT_AC97
 (0x1<<9)

446 
	#BIT_TIMER0
 (0x1<<10)

	)

447 
	#BIT_TIMER1
 (0x1<<11)

	)

448 
	#BIT_TIMER2
 (0x1<<12)

	)

449 
	#BIT_TIMER3
 (0x1<<13)

	)

450 
	#BIT_TIMER4
 (0x1<<14)

	)

451 
	#BIT_UART2
 (0x1<<15)

	)

452 
	#BIT_LCD
 (0x1<<16)

	)

453 
	#BIT_DMA0
 (0x1<<17)

	)

454 
	#BIT_DMA1
 (0x1<<18)

	)

455 
	#BIT_DMA2
 (0x1<<19)

	)

456 
	#BIT_DMA3
 (0x1<<20)

	)

457 
	#BIT_SDI
 (0x1<<21)

	)

458 
	#BIT_SPI0
 (0x1<<22)

	)

459 
	#BIT_UART1
 (0x1<<23)

	)

460 
	#BIT_NFCON
 (0x1<<24)

461 
	#BIT_USBD
 (0x1<<25)

	)

462 
	#BIT_USBH
 (0x1<<26)

	)

463 
	#BIT_IIC
 (0x1<<27)

	)

464 
	#BIT_UART0
 (0x1<<28)

	)

465 
	#BIT_SPI1
 (0x1<<29)

	)

466 
	#BIT_RTC
 (0x1<<30)

	)

467 
	#BIT_ADC
 (0x1<<31)

	)

468 
	#BIT_ALLMSK
 (0xffffffff)

	)

470 
	#BIT_SUB_ALLMSK
 (0x7fff)

471 
	#BIT_SUB_AC97
 (0x1<<14)

472 
	#BIT_SUB_WDT
 (0x1<<13)

473 
	#BIT_SUB_CAM_P
 (0x1<<12)

474 
	#BIT_SUB_CAM_C
 (0x1<<11)

475 
	#BIT_SUB_ADC
 (0x1<<10)

	)

476 
	#BIT_SUB_TC
 (0x1<<9)

	)

477 
	#BIT_SUB_ERR2
 (0x1<<8)

	)

478 
	#BIT_SUB_TXD2
 (0x1<<7)

	)

479 
	#BIT_SUB_RXD2
 (0x1<<6)

	)

480 
	#BIT_SUB_ERR1
 (0x1<<5)

	)

481 
	#BIT_SUB_TXD1
 (0x1<<4)

	)

482 
	#BIT_SUB_RXD1
 (0x1<<3)

	)

483 
	#BIT_SUB_ERR0
 (0x1<<2)

	)

484 
	#BIT_SUB_TXD0
 (0x1<<1)

	)

485 
	#BIT_SUB_RXD0
 (0x1<<0)

	)

488 
	#pISR_RESET
 (*(*)(
_ISR_STARTADDRESS
+0x0))

	)

489 
	#pISR_UNDEF
 (*(*)(
_ISR_STARTADDRESS
+0x4))

	)

490 
	#pISR_SWI
 (*(*)(
_ISR_STARTADDRESS
+0x8))

	)

491 
	#pISR_PABORT
 (*(*)(
_ISR_STARTADDRESS
+0xc))

	)

492 
	#pISR_DABORT
 (*(*)(
_ISR_STARTADDRESS
+0x10))

	)

493 
	#pISR_RESERVED
 (*(*)(
_ISR_STARTADDRESS
+0x14))

	)

494 
	#pISR_IRQ
 (*(*)(
_ISR_STARTADDRESS
+0x18))

	)

495 
	#pISR_FIQ
 (*(*)(
_ISR_STARTADDRESS
+0x1c))

	)

497 
	#pISR_EINT0
 (*(*)(
_ISR_STARTADDRESS
+0x20))

	)

498 
	#pISR_EINT1
 (*(*)(
_ISR_STARTADDRESS
+0x24))

	)

499 
	#pISR_EINT2
 (*(*)(
_ISR_STARTADDRESS
+0x28))

	)

500 
	#pISR_EINT3
 (*(*)(
_ISR_STARTADDRESS
+0x2c))

	)

501 
	#pISR_EINT4_7
 (*(*)(
_ISR_STARTADDRESS
+0x30))

	)

502 
	#pISR_EINT8_23
 (*(*)(
_ISR_STARTADDRESS
+0x34))

	)

503 
	#pISR_CAM
 (*(*)(
_ISR_STARTADDRESS
+0x38))

504 
	#pISR_BAT_FLT
 (*(*)(
_ISR_STARTADDRESS
+0x3c))

	)

505 
	#pISR_TICK
 (*(*)(
_ISR_STARTADDRESS
+0x40))

	)

506 
	#pISR_WDT_AC97
 (*(*)(
_ISR_STARTADDRESS
+0x44))

507 
	#pISR_TIMER0
 (*(*)(
_ISR_STARTADDRESS
+0x48))

	)

508 
	#pISR_TIMER1
 (*(*)(
_ISR_STARTADDRESS
+0x4c))

	)

509 
	#pISR_TIMER2
 (*(*)(
_ISR_STARTADDRESS
+0x50))

	)

510 
	#pISR_TIMER3
 (*(*)(
_ISR_STARTADDRESS
+0x54))

	)

511 
	#pISR_TIMER4
 (*(*)(
_ISR_STARTADDRESS
+0x58))

	)

512 
	#pISR_UART2
 (*(*)(
_ISR_STARTADDRESS
+0x5c))

	)

513 
	#pISR_LCD
 (*(*)(
_ISR_STARTADDRESS
+0x60))

	)

514 
	#pISR_DMA0
 (*(*)(
_ISR_STARTADDRESS
+0x64))

	)

515 
	#pISR_DMA1
 (*(*)(
_ISR_STARTADDRESS
+0x68))

	)

516 
	#pISR_DMA2
 (*(*)(
_ISR_STARTADDRESS
+0x6c))

	)

517 
	#pISR_DMA3
 (*(*)(
_ISR_STARTADDRESS
+0x70))

	)

518 
	#pISR_SDI
 (*(*)(
_ISR_STARTADDRESS
+0x74))

	)

519 
	#pISR_SPI0
 (*(*)(
_ISR_STARTADDRESS
+0x78))

	)

520 
	#pISR_UART1
 (*(*)(
_ISR_STARTADDRESS
+0x7c))

	)

521 
	#pISR_NFCON
 (*(*)(
_ISR_STARTADDRESS
+0x80))

522 
	#pISR_USBD
 (*(*)(
_ISR_STARTADDRESS
+0x84))

	)

523 
	#pISR_USBH
 (*(*)(
_ISR_STARTADDRESS
+0x88))

	)

524 
	#pISR_IIC
 (*(*)(
_ISR_STARTADDRESS
+0x8c))

	)

525 
	#pISR_UART0
 (*(*)(
_ISR_STARTADDRESS
+0x90))

	)

526 
	#pISR_SPI1
 (*(*)(
_ISR_STARTADDRESS
+0x94))

	)

527 
	#pISR_RTC
 (*(*)(
_ISR_STARTADDRESS
+0x98))

	)

528 
	#pISR_ADC
 (*(*)(
_ISR_STARTADDRESS
+0x9c))

	)

	@include/2440/cache.h

1 #i‚de‡
__CACHE_H__


2 
	#__CACHE_H__


	)

4 
	#dˇche_off
() \

6 
__asm__
 
	`__vﬁ©ûe__
 (\

12 }

	)

14 
	#dˇche_⁄
() \

16 
__asm__
 
	`__vﬁ©ûe__
 (\

22 }

	)

24 
	#iˇche_off
() \

26 
__asm__
 
	`__vﬁ©ûe__
 (\

32 }

	)

34 
	#iˇche_⁄
() \

36 
__asm__
 
	`__vﬁ©ûe__
 (\

42 }

	)

44 
	#mmu_off
() \

46 
__asm__
 
	`__vﬁ©ûe__
 (\

52 }

	)

54 
	#mmu_⁄
() \

56 
__asm__
 
	`__vﬁ©ûe__
 (\

62 }

	)

65 
	#£t_robö_ª∂a˚mít
() \

67 
__asm__
 
	`__vﬁ©ûe__
 (\

73 }

	)

77 
	#£t_low_ve˘‹
() \

79 
__asm__
 
	`__vﬁ©ûe__
 (\

86 

	)

88 
	#£t_high_ve˘‹
() \

90 
__asm__
 
	`__vﬁ©ûe__
 (\

97 

	)

98 
	#£t_lôée_ídün
() \

100 
__asm__
 
	`__vﬁ©ûe__
 (\

106 }

	)

108 
	#Æign_Áu…_⁄
() \

110 
__asm__
 
	`__vﬁ©ûe__
 (\

117 

	)

125 
	#övÆid©e_iˇche
() \

127 
__asm__
 
	`__vﬁ©ûe__
 (\

132 }

	)

134 
	#övÆid©e_dˇches
() \

136 
__asm__
 
	`__vﬁ©ûe__
 (\

141 }

	)

143 
	#övÆid©e_dˇche
(
ödex
) \

145 
__asm__
 
	`__vﬁ©ûe__
 (\

148 :[
i
] "r"(
ödex
)\

150 }

	)

155 
	#övÆid©e_idˇche
() \

157 
__asm__
 
	`__vﬁ©ûe__
 (\

163 

	)

166 
	#˛r_övÆid©e_dˇche
(
ödex
) \

168 
__asm__
 
	`__vﬁ©ûe__
 (\

170 :: [
i
]"r"(
ödex
)\

172 }

	)

175 
	#£t_domaö
(
domaö
) \

177 
__asm__
 
	`__vﬁ©ûe__
 (\

180 :[
dom
] "r"(
domaö
)\

182 }

	)

184 
	#fs˚_off
() \

186 
__asm__
 
	`__vﬁ©ûe__
 (\

191 

	)

194 
	#døö_wb
() \

196 
__asm__
 
	`__vﬁ©ûe__
 (\

202 

	)

203 
	#övÆid©e_ébs
() \

205 
__asm__
 
	`__vﬁ©ûe__
 (\

210 }

	)

212 
	#£t_âb_ba£
(
âb_ba£
) \

214 
__asm__
 
	`__vﬁ©ûe__
 (\

217 :[
ba£
] "r"(
âb_ba£
)\

219 }

	)

222 
	#övÆid©e_éb
(
ödex
) \

224 
__asm__
 
	`__vﬁ©ûe__
 (\

227 :[
i
] "r"(
ödex
)\

229 }

	)

	@include/2440/drvs.h

1 #i‚de‡
__DRVS_H__


2 
	#__DRVS_H__


	)

4 
	~<2440/2440addr.h
>

5 
	~<sys/ty≥s.h
>

8 
Àd_c⁄f
 ();

9 
Àd_›t
 (
Àd_ƒ
,
vÆ
);

12 
u£_u¨t
 (
i32
 
u¨t
);

13 
u¨t_c⁄f
 (
i32
 
u¨t
,
u32
 
p˛k
,u32 
baud
);

14 
u8
 
u¨t_£ndc
 (u8 
ch
);

15 
RO
 
i8
 *
u¨t_£nds
 (RO i8 *
s
);

16 
u8
 
u¨t_ªcvc
 ();

17 
i32
 
u¨t_¥ötf
 (
RO
 
i8
 *
fmt
,...);

25 
	#BYTES_PER_PAGE
 2048

	)

26 
	#SP_BYTES_PER_PAGE
 64

	)

27 
	#PAGES_PER_BLK
 64

	)

28 
	#BLKS_PER_NANDF
 2048

	)

29 
	#MAX_BAD_BLKS
 64

	)

31 
	#NFCONF_INIT
 0xF830

	)

32 
	#NEED_EXT_ADDR
 1

	)

34 
	#NF_READ1
 0x00

	)

35 
	#NF_READ2
 0x30

	)

37 
	#NF_READ_CPY_BACK1
 0x00

	)

38 
	#NF_READ_CPY_BACK2
 0X35

	)

40 
	#NF_READ_ID
 0x90

	)

41 
	#NF_RESET
 0xFF

	)

43 
	#NF_PAGE_WRITE1
 0x80

	)

44 
	#NF_PAGE_WRITE2
 0x10

	)

46 
	#NF_RANDOM_WRITE
 0x85

	)

48 
	#NF_RANDOM_READ1
 0x05

	)

49 
	#NF_RANDOM_READ2
 0xE0

	)

51 
	#NF_READ_STATUS
 0x70

	)

53 
	#NF_BLK_ERASE1
 0x60

	)

54 
	#NF_BLK_ERASE2
 0xD0

	)

56 
	#STATUS_READY
 0x40

	)

57 
	#STATUS_ERROR
 0x01

	)

59 
	#NF_CMD
(
cmd
Ë{
rNFCMD
 = (cmd);}

	)

60 
	#NF_ADDR
(
addr
Ë{
rNFADDR
 = (addr);}

	)

61 
	#NF_WRDATA
(
d©a
Ë{
rNFDATA
 = (d©a); }

	)

63 
	#NF_nFCE_L
(Ë{
rNFCONT
 &~(1<<1);}

	)

64 
	#NF_nFCE_H
(Ë{
rNFCONT
 |(1<<1);}

	)

66 
	#NF_CLR_RB
(Ë{
rNFSTAT
 |(1<<2); }

	)

67 
	#NF_WAIT_RB
(Ë{!(
rNFSTAT
&(1<<2)));}

	)

68 
	#NF_NOT_BUSY
(Ë{!(
rNFSTAT
&(1<<0)));}

	)

70 
	#NF_RSTECC
(Ë{
rNFCONT
 |(1<<4);}

	)

71 
	#NF_RDMECC0
(Ë(
rNFMECC0
)

	)

72 
	#NF_RDMECC1
(Ë(
rNFMECC1
)

	)

73 
	#NF_RDSECC
(Ë(
rNFSECC
)

	)

74 
	#NF_RDDATA
(Ë(
rNFDATA
)

	)

75 
	#NF_RDDATA8
(Ë(
rNFDATA8
)

	)

77 
	#NF_WAITRB
(Ë{!(
rNFSTAT
&(1<<0)));}

	)

79 
	#NF_MECC_U∆ock
(Ë{
rNFCONT
 &~(1<<5); }

	)

80 
	#NF_MECC_Lock
(Ë{
rNFCONT
 |(1<<5); }

	)

81 
	#NF_SECC_U∆ock
(Ë{
rNFCONT
 &~(1<<6); }

	)

82 
	#NF_SECC_Lock
(Ë{
rNFCONT
 |(1<<6); }

	)

84 
	#«nd_ªad_byã
(Ë(
rNFDATA8
)

	)

85 
	#«nd_wrôe_byã
(
ch
Ë((
rNFDATA8
 = ch))

	)

87 
	#pNFCONF
 
rNFCONF


	)

88 
	#pNFCMD
 
rNFCMD


	)

89 
	#pNFADDR
 
rNFADDR


	)

90 
	#pNFDATA
 
rNFDATA


	)

91 
	#pNFSTAT
 
rNFSTAT


	)

92 
	#pNFECC
 
rNFECC0


	)

94 
	#NF_CE_ON
(Ë
	`NF_nFCE_L
()

	)

95 
	#NF_CE_OFF
(Ë
	`NF_nFCE_H
()

	)

96 
	#NF_DATA_R
(Ë
rNFDATA


	)

97 
	#NF_ECC
(Ë
rNFECC0


	)

100 
	#TACLS
 1

	)

101 
	#TWRPH0
 4

	)

102 
	#TWRPH1
 0

	)

104 
i32
 
«nd_ª£t
 ();

105 
u32
 
c›y_«nd_to_sdøm
 (u32 
sdøm_addr
,u32 
«nd_addr
,u32 
img_size
);

108 
ßve_˝u_bus_‰eq
 ();

111 
	#TTB0_FAULT
 (0|(1<<4)Ë

	)

112 
	#TTB0_COARSE
 (1|(1<<4)Ë

	)

113 
	#TTB0_SEG
 (2|(1<<4)Ë

	)

114 
	#TTB0_FINE
 (3|(1<<4)Ë

	)

117 
	#TTB1_FAULT
 (0)

	)

118 
	#TTB1_LPG
 (1Ë

	)

119 
	#TTB1_SPG
 (2Ë

	)

120 
	#TTB1_TPG
 (3Ë

	)

123 
	#FAULT_PL
 (0x0Ë

	)

124 
	#USR_PL
 (0x1Ë

	)

125 
	#RSV_PL
 (0x2Ë

	)

126 
	#SYS_PL
 (0x3Ë

	)

128 
	#DOMAIN_FAULT
 (0x0<<5Ë

	)

129 
	#DOMAIN_SYS
 (0x1<<5Ë

	)

130 
	#DOMAIN_USR
 (0x2<<5Ë

	)

133 
	#CB
 (3<<2Ë

	)

134 
	#CNB
 (2<<2Ë

	)

135 
	#NCB
 (1<<2Ë

	)

136 
	#NCNB
 (0<<2Ë

	)

139 
	#AP_FAULT
 (0<<10Ë

	)

140 
	#AP_SU_ONLY
 (1<<10Ë

	)

141 
	#AP_USR_RO
 (2<<10Ë

	)

142 
	#AP_RW
 (3<<10Ë

	)

146 
	#AP0_FAULT
 (0<<4Ë

	)

147 
	#AP0_SU_ONLY
 (1<<4Ë

	)

148 
	#AP0_USR_RO
 (2<<4Ë

	)

149 
	#AP0_RW
 (3<<4Ë

	)

152 
	#AP1_FAULT
 (0<<6Ë

	)

153 
	#AP1_SU_ONLY
 (1<<6Ë

	)

154 
	#AP1_USR_RO
 (2<<6Ë

	)

155 
	#AP1_RW
 (3<<6Ë

	)

159 
	#AP2_FAULT
 (0<<8Ë

	)

160 
	#AP2_SU_ONLY
 (1<<8Ë

	)

161 
	#AP2_USR_RO
 (2<<8Ë

	)

162 
	#AP2_RW
 (3<<8Ë

	)

165 
	#AP3_FAULT
 (0<<10Ë

	)

166 
	#AP3_SU_ONLY
 (1<<10Ë

	)

167 
	#AP3_USR_RO
 (2<<10Ë

	)

168 
	#AP3_RW
 (3<<10Ë

	)

170 
	#AP_RW_ALL
 ((3<<4)|(3<<6)|(3<<8)|(3<<10))

	)

171 
	#AP_USR_RO_ALL
 ((2<<4)|(2<<6)|(2<<8)|(2<<10))

	)

172 
	#AP_RO_ALL
 ((1<<4)|(1<<6)|(1<<8)|(1<<10))

	)

173 
	#AP_FAULT_ALL
 (0<<4Ë

	)

177 
	#NORMAL_SEG_ATTR
 (
AP_RW
 | 
DOMAIN_USR
 | 
NCNB
 | 
TTB0_SEG
)

	)

179 
mmu_öô
 ();

182 
	#LCD_WIDTH
 480

	)

183 
	#LCD_HEIGHT
 272

	)

184 
	#LCD_ASCII_X
 8

	)

185 
	#LCD_ASCII_Y
 16

	)

188 
	#LCD_PIXCLK
 (4<<8Ë

	)

189 
	#LCD_MMODE
 (0<<7Ë

	)

190 
	#LCD_PNRMODE
 (3<<5Ë

	)

191 
	#LCD_BPPMODE
 (0x0C<<1Ë

	)

192 
	#LCD_ENABLE
 (1<<0Ë

	)

193 
	#LCD_DISABLE
 (0<<0Ë

	)

196 
	#LCD_UPPER_MARGIN
 (5<<24Ë

	)

197 
	#LCD_LINE_VAL
 ((
LCD_HEIGHT
-1)<<14)

	)

198 
	#LCD_LOWER_MARGIN
 (3<<6Ë

	)

199 
	#LCD_VPWR_LEN
 (1<<0Ë

	)

202 
	#LCD_LEFT_MARGIN
 (10<<0Ë

	)

203 
	#LCD_COLS_VAL
 ((
LCD_WIDTH
-1)<<8Ë

	)

204 
	#LCD_RIGHT_MARGIN
 (39<<19Ë

	)

207 
	#LCD_HPWR_LEN
 0

	)

210 
	#LCD_BPP24BL
 (0<<12Ë

	)

211 
	#LCD_FRM565
 (1<<11Ë

	)

212 
	#LCD_INVVCLK
 (0<<10Ë

	)

213 
	#LCD_INVVLINE
 (1<<9Ë

	)

214 
	#LCD_INVFRAME
 (1<<8Ë

	)

215 
	#LCD_INVVD
 (0<<7Ë

	)

216 
	#LCD_INVVDEN
 (0<<6Ë

	)

217 
	#LCD_INVPWREN
 (0<<5Ë

	)

218 
	#LCD_INVLEND
 (0<<4Ë

	)

219 
	#LCD_ENPWREN
 (1<<3Ë

	)

220 
	#LCD_ENLEND
 (0<<2Ë

	)

221 
	#LCD_BSWP
 (0<<1Ë

	)

222 
	#LCD_HSWP
 (1<<0Ë

	)

224 
	#LCD_XSIZE
 
LCD_WIDTH


	)

225 
	#LCD_YSIZE
 
LCD_HEIGHT


	)

226 
	#SCR_XSIZE
 
LCD_WIDTH


	)

227 
	#SCR_YSIZE
 
LCD_HEIGHT


	)

230 
lcd_öô
 ();

231 
lcd_blush
 (
u16
 
c
);

232 
i32
 
lcd_¥ötf
 (
u32
 
c
,u32 
bk_c
,u32 
°
,
i8
 *
fmt
,...);

233 
døw_m≠
 (
i32
 
x°¨t
,i32 
y°¨t
,i32 
width
,i32 
height
,
RO
 
u8
 *
bmp
);

235 
	#BCD2O
(
bcd
Ë((bcd>>4)&0x0F)*10 + (bcd & 0x0F)

	)

236 
	#O2BCD
(
o
Ë(((o/10Ë<< 4Ë| (o%10))

	)

238 
i8
* 
gë_d©e
 (i8 *
buf„r
,
u32
 
size
);

239 
£t_d©e
 (
i32
 
yór
,i32 
m⁄
,i32 
d©e
,

240 
i32
 
day
,

241 
i32
 
hour
,i32 
möi
,i32 
£c
);

244 
	#PRSCVL
 (24)

	)

	@include/2440/ports.h

5 #i‚de‡
__PORTS_H__


6 
	#__PORTS_H__


	)

11 
	#v2p
(
x
Ë((x)-0x90000000)

	)

12 
	#p2v
(
x
Ë((x)+0x90000000)

	)

16 
	#LOADER_IMG
 (0x1000Ë

	)

17 
	#LOADER_SIZE
 (0x8000Ë

	)

18 
	#LOADK_START
 (0x30010000Ë

	)

20 
	#VECT_IMG
 (0x4000Ë

	)

21 
	#VECT_SIZE
 (0x1000Ë

	)

23 
	#KERNEL_IMG
 (0x20000Ë

	)

24 
	#KERNEL_IMG_SIZE
 (0x10000Ë

	)

26 
	#FS_IMG
 (0x40000Ë

	)

27 
	#FS_IMG_SIZE
 (0x10000Ë

	)

29 
	#SH_IMG
 (0x60000Ë

	)

30 
	#SH_IMG_SIZE
 (0x8000Ë

	)

32 
	#MISC_INFO
 (0x80000Ë

	)

33 
	#MISC_INFO_SIZE
 (0x20000Ë

	)

35 
	#RAM_START
 (0x30000000)

	)

36 
	#RAM_SIZE
 (0x4000000)

	)

37 
	#KERNEL_SPACE_START
 (0xC0000000Ë

	)

38 
	#KERNEL_SPACE_SIZE
 (1<<30Ë

	)

40 
	#TTB_BASE
 (
RAM_START
Ë

	)

41 
	#TTB_SIZE
 (0x4000Ë

	)

43 
	#PAGE_TBL_P
 (
TTB_BASE
+
TTB_SIZE
)

	)

44 
	#PAGE_TBL_P_SIZE
 (0x1000Ë

	)

46 
	#PAGE_TBL_V
 (
PAGE_TBL_P
+
PAGE_TBL_P_SIZE
)

	)

47 
	#PAGE_TBL_V_SIZE
 (0x1000Ë

	)

49 
	#KERNEL_CODE_START
 (0xC0100000Ë

	)

50 
	#KERNEL_STACK
 (0xC0100000Ë

	)

51 
	#KERNEL_STACK_SIZE
 (0x8000Ë

	)

56 
	#KERNEL_TTB
 (
KERNEL_SPACE_START
+(0x10000))

	)

57 
	#KERNEL_PAGE_TBL
 (
KERNEL_TTB
+
TTB_SIZE
)

	)

59 
	#VECT_PAGE_TBL
 (
KERNEL_PAGE_TBL
+0x10000)

	)

60 
	#VECT_PAGE
 (
VECT_PAGE_TBL
+0x1000)

	)

63 
	#USR_ENTRY
 (0x60000000)

	)

64 
	#USR_SP
 (0x60100000)

	)

65 
	#USR_SP_SIZE
 (0x2000Ë

	)

68 
	#SEND_BUF
 (0x60000000 - 0x2000)

	)

69 
	#RECV_BUF
 (0x60000000 - 0x1000)

	)

71 
	#HEAP_AREA
(
x
Ë(((xË>0x60100000Ë&& ((xË< 0xC0000000))

	)

72 
	#STACK_AREA
(
x
Ë(((xË>0x60000000Ë&& ((xË< 0x60100000))

	)

73 
	#VMA_AREA
(
x
Ë(
	`HEAP_AREA
(xË|| 
	`STACK_AREA
(x))

	)

75 
	#PORTS_MAP_START
 (0xE0000000Ë

	)

78 
	#VECTOR_TBL
 (0xFFFF0000)

	)

79 
	#VECTOR_TBL_SIZE
 (0x400Ë

	)

81 
	#IRQ_TABLE
 (
VECTOR_TBL
+
VECTOR_TBL_SIZE
)

	)

82 
	#IRQ_TABLE_SIZE
 (0x400Ë

	)

83 
	#_ISR_STARTADDRESS
 (
IRQ_TABLE
Ë

	)

86 
	#MAP_AREA_START
 (0xC0400000Ë

	)

87 
	#MAP_AREA_END
 (0xC4000000Ë

	)

88 
	#MAP_AREA_SIZE
 (
MAP_AREA_END
 - 
MAP_AREA_START
)

	)

89 
	#LOW_MEM_SIZE
 (4<<20Ë

	)

92 
	#PAGE_STRUCT_SIZE
 (28)

	)

93 
	#PAGE_STRUCTS_NR
 (
MAP_AREA_SIZE
>>12Ë

	)

96 
	#PAGE_STRUCTS_START
 (
VECT_PAGE
+0x1000)

	)

97 
	#PAGE_STRUCTS_SIZE
 (
PAGE_STRUCTS_NR
*
PAGE_STRUCT_SIZE
)

	)

98 
	#PAGE_STRUCTS_END
 (
PAGE_STRUCTS_START
+
PAGE_STRUCTS_SIZE
)

	)

101 
	#LCD_BUFFER
 (
PAGE_STRUCTS_END
+0x100)

	)

102 
	#LCD_BUF_SIZE
 (0x3FC00Ë

	)

104 
	#TL_BUFFER
 (0xC0200000Ë

	)

105 
	#TL_BUF_SIZE
 (0x100000Ë

	)

106 
	#BLK_BUF_SIZE
 (0x20000Ë

	)

107 
	#BLK_BUF_SIZE_SFT
 (17)

	)

109 
	#FS_BUFFER
 (0xC0300000)

	)

110 
	#FS_BUFFER_SIZE
 (0x100000)

	)

111 
	#USR_FS_BUFFER
 (0x50000000)

	)

113 
	#RAMDSK_BUFFER
 (0xC0140000)

	)

114 
	#RAMDSK_SIZE
 (0xC0000)

	)

115 
	#USR_RAMDSK_BUFFER
 (0x50100000)

	)

116 
	#RAMDISK_IMG_BLK_NO
 (40)

	)

119 
	#CACHE_ST_SIZE
 ((
é_ˇche_°
))

	)

120 
	#CACHE_ST_NR
 (
TL_BUF_SIZE
/
BLK_BUF_SIZE
)

	)

121 
	#TL_CACHE_HEAD
 (
LCD_BUFFER
+
LCD_BUF_SIZE
)

	)

122 
	#TL_CACHE_END
 (
TL_CACHE_HEAD
+(
CACHE_ST_SIZE
)*(
CACHE_ST_NR
))

	)

125 
	#MAP_TAB
 (
TL_CACHE_END
)

	)

126 
	#MAP_TAB_SIZE
 ((
m≠_èb_°
))

	)

129 
	#USR_MODE
 (0x10)

	)

130 
	#FIQ_MODE
 (0x11)

	)

131 
	#IRQ_MODE
 (0x12)

	)

132 
	#SVC_MODE
 (0x13)

	)

133 
	#ABT_MODE
 (0x14)

	)

134 
	#UND_MODE
 (0x15)

	)

135 
	#SYS_MODE
 (0x1F)

	)

136 
	#MODE_MASK
 (0x1F)

	)

137 
	#NO_INTR
 (0xC0)

	)

139 
	#NO_IRQ
 (1<<7)

	)

140 
	#NO_FIQ
 (1<<6)

	)

	@include/asm/ioaddr.h

1 #i‚de‡
__IO_H__


2 
	#__IO_H__


	)

10 
	#BWSCON
 0x48000000

	)

11 
	#BANKCON0
 0x48000004

	)

12 
	#BANKCON1
 0x48000008

	)

13 
	#BANKCON2
 0x4800000¯

	)

14 
	#BANKCON3
 0x48000010

	)

15 
	#BANKCON4
 0x48000014

	)

16 
	#BANKCON5
 0x48000018

	)

17 
	#BANKCON6
 0x4800001¯

	)

18 
	#BANKCON7
 0x48000020

	)

19 
	#REFRESH
 0x48000024

	)

20 
	#BANKSIZE
 0x48000028

	)

21 
	#MRSRB6
 0x4800002¯

	)

22 
	#MRSRB7
 0x48000030

	)

25 
	#DW_B1
 (1<<4Ë

	)

26 
	#DW_B2
 (1<<8Ë

	)

27 
	#DW_B3
 (1<<12Ë

	)

28 
	#DW_B4
 (2<<16Ë

	)

29 
	#DW_B5
 (1<<20Ë

	)

30 
	#DW_B6
 (2<<24Ë

	)

31 
	#DW_B7
 (2<<28Ë

	)

34 
	#B0_Tacs
 (3<<13Ë

	)

35 
	#B0_Tcos
 (3<<11Ë

	)

36 
	#B0_Tacc
 (7<<8Ë

	)

37 
	#B0_Tcoh
 (3<<6Ë

	)

38 
	#B0_Tah
 (3<<4Ë

	)

39 
	#B0_Ta˝
 (1<<2Ë

	)

40 
	#B0_PMC
 (0<<0Ë

	)

43 
	#B1_Tacs
 (1<<13Ë

	)

44 
	#B1_Tcos
 (1<<11Ë

	)

45 
	#B1_Tacc
 (6<<8Ë

	)

46 
	#B1_Tcoh
 (1<<6Ë

	)

47 
	#B1_Tah
 (1<<4Ë

	)

48 
	#B1_Ta˝
 (0<<2Ë

	)

49 
	#B1_PMC
 (0<<0Ë

	)

52 
	#B2_Tacs
 (1<<13Ë

	)

53 
	#B2_Tcos
 (1<<11Ë

	)

54 
	#B2_Tacc
 (6<<8Ë

	)

55 
	#B2_Tcoh
 (1<<6Ë

	)

56 
	#B2_Tah
 (1<<4Ë

	)

57 
	#B2_Ta˝
 (0<<2Ë

	)

58 
	#B2_PMC
 (0<<0Ë

	)

61 
	#B3_Tacs
 (1<<13Ë

	)

62 
	#B3_Tcos
 (1<<11Ë

	)

63 
	#B3_Tacc
 (6<<8Ë

	)

64 
	#B3_Tcoh
 (1<<6Ë

	)

65 
	#B3_Tah
 (1<<4Ë

	)

66 
	#B3_Ta˝
 (0<<2Ë

	)

67 
	#B3_PMC
 (0<<0Ë

	)

70 
	#B4_Tacs
 (1<<13Ë

	)

71 
	#B4_Tcos
 (1<<11Ë

	)

72 
	#B4_Tacc
 (6<<8Ë

	)

73 
	#B4_Tcoh
 (1<<6Ë

	)

74 
	#B4_Tah
 (1<<4Ë

	)

75 
	#B4_Ta˝
 (0<<2Ë

	)

76 
	#B4_PMC
 (0<<0Ë

	)

79 
	#B5_Tacs
 (1<<13Ë

	)

80 
	#B5_Tcos
 (1<<11Ë

	)

81 
	#B5_Tacc
 (6<<8Ë

	)

82 
	#B5_Tcoh
 (1<<6Ë

	)

83 
	#B5_Tah
 (1<<4Ë

	)

84 
	#B5_Ta˝
 (0<<2Ë

	)

85 
	#B5_PMC
 (0<<0Ë

	)

88 
	#B6_MT
 (3<<15Ë

	)

89 
	#B6_Trcd
 (1<<2Ë

	)

90 
	#B6_SCAN
 (1<<0Ë

	)

93 
	#B7_MT
 (3<<15Ë

	)

94 
	#B7_Trcd
 (1<<2Ë

	)

95 
	#B7_SCAN
 (1<<0Ë

	)

98 
	#REFEN
 (1<<23Ë

	)

99 
	#TREFMD
 (0<<22Ë

	)

100 
	#TΩ
 (1<<20Ë

	)

101 
	#T§c
 (1<<18Ë

	)

102 
	#Tchr
 (2<<16Ë

	)

103 
	#REF_CNTR
 (1268Ë

	)

106 
	#BURST_EN
 (0<<7Ë

	)

107 
	#SCKE_EN
 (1<<5Ë

	)

108 
	#SCLK_EN
 (1<<4Ë

	)

109 
	#BK6_7_MAP
 (2<<0Ë

	)

112 
	#WBL
 (0<<9Ë

	)

113 
	#TM
 (0<<7Ë

	)

114 
	#CL
 (3<<4Ë

	)

115 
	#BT
 (0<<3Ë

	)

116 
	#BL
 (0<<0Ë

	)

119 
	#LOCKTIME
 0x4c000000

	)

120 
	#MPLLCON
 0x4c000004

	)

121 
	#UPLLCON
 0x4c000008

	)

122 
	#CLKCON
 0x4c00000¯

	)

123 
	#CLKSLOW
 0x4c000010

	)

124 
	#CLKDIVN
 0x4c000014

	)

127 
	#SRCPND
 0x4a000000

	)

128 
	#INTMOD
 0x4a000004

	)

129 
	#INTMSK
 0x4a000008

	)

130 
	#PRIORITY
 0x4a00000¯

	)

131 
	#INTPND
 0x4a000010

	)

132 
	#INTOFFSET
 0x4a000014

	)

133 
	#SUSSRCPND
 0x4a000018

	)

134 
	#INTSUBMSK
 0x4a00001¯

	)

137 
	#GPFCON
 0x56000050

	)

138 
	#GPFDAT
 0x56000054

	)

139 
	#GPFUP
 0x56000058

	)

142 
	#MISCCR
 0x56000080

	)

143 
	#DCKCON
 0x56000084

	)

144 
	#EXTINT0
 0x56000088

	)

145 
	#EXTINT1
 0x5600008¯

	)

146 
	#EXTINT2
 0x56000090

	)

147 
	#EINTFLT0
 0x56000094

	)

148 
	#EINTFLT1
 0x56000098

	)

149 
	#EINTFLT2
 0x5600009¯

	)

150 
	#EINTFLT3
 0x560000a0

	)

151 
	#EINTMASK
 0x560000a4

	)

152 
	#EINTPEND
 0x560000a8

	)

153 
	#GSTATUS0
 0x560000a¯

	)

154 
	#GSTATUS1
 0x560000b0

	)

155 
	#GSTATUS2
 0x560000b4

	)

156 
	#GSTATUS3
 0x560000b8

	)

157 
	#GSTATUS4
 0x560000b¯

	)

158 
	#MSLCON
 0x560000c¯

	)

161 
	#WTCON
 0x53000000

	)

162 
	#WTDAT
 0x53000004

	)

163 
	#WTCNT
 0x53000008

	)

	@include/assert.h

7 #i‚de‡
__ASSERT_H__


8 
	#__ASSERT_H__


	)

11 
	#__DEBUG__


	)

13 #ifde‡ 
__DEBUG__


14 
as£π_Áû
 (c⁄° * 
ex¥essi⁄
,

15 c⁄° * 
loˇl_fûe
,

16 c⁄° * 
ba£_fûe
,

17 
löe_ƒ
 );

18 
	#as£π
(
exp
)\

19 if(!(
exp
))\

21 
	`as£π_Áû
 (#exp,
__FILE__
,
__BASE_FILE__
,
__LINE__
);\

22 }

	)

24 
	#as£π
(
exp
Ë(*)0

	)

	@include/ecasey/exec.h

1 #i‚de‡
__EXEC_H__


2 
	#__EXEC_H__


	)

4 
	#EI_NIDENT
 (16)

	)

7 
	tñf32_addr
;

8 
	tñf32_hÆf
;

9 
	tñf32_off
;

10 sig√d 
	tñf32_sw‹d
;

11 
	tñf32_w‹d
;

14 
	sñf32_ehdr
{

15 
	me_idít
[
EI_NIDENT
];

16 
ñf32_hÆf
 
	me_ty≥
;

17 
ñf32_hÆf
 
	me_machöe
;

18 
ñf32_w‹d
 
	me_vîsi⁄
;

19 
ñf32_addr
 
	me_íåy
;

20 
ñf32_off
 
	me_phoff
;

21 
ñf32_off
 
	me_shoff
;

22 
ñf32_w‹d
 
	me_Êags
;

23 
ñf32_hÆf
 
	me_ehsize
;

24 
ñf32_hÆf
 
	me_phítsize
;

25 
ñf32_hÆf
 
	me_phnum
;

26 
ñf32_hÆf
 
	me_shítsize
;

27 
ñf32_hÆf
 
	me_shnum
;

28 
ñf32_hÆf
 
	me_sh°∫dx
;

32 
	sñf32_phdr
{

33 
ñf32_w‹d
 
	mp_ty≥
;

34 
ñf32_off
 
	mp_off£t
;

35 
ñf32_addr
 
	mp_vaddr
;

36 
ñf32_addr
 
	mp_∑ddr
;

37 
ñf32_w‹d
 
	mp_fûesz
;

38 
ñf32_w‹d
 
	mp_memsz
;

39 
ñf32_w‹d
 
	mp_Êags
;

40 
ñf32_w‹d
 
	mp_Æign
;

43 
	#NR_ARGC
 (32)

	)

44 
	#NR_SRC_SIZE
 (64)

	)

46 
	#PROMOT
(Ë
	`¥ötf
 ("# ")

	)

	@include/ecasey/fs.h

1 #i‚de‡
__FS_H__


2 
	#__FS_H__


	)

5 
	#FS_OPEN
 0x0100

	)

6 
	#FS_CLOSE
 0x0101

	)

7 
	#FS_SEEK
 0x0102

	)

8 
	#FS_READ
 0x0103

	)

9 
	#FS_WRITE
 0x0104

	)

11 
	~<sys/ty≥s.h
>

13 
	sègBUFFER_HEAD
{

14 
u8
* 
	mbh_buf
 ;

15 
u32
 
	mbh_blk_ƒ
;

16 
u16
 
	mbh_dev
;

17 
u8
 
	mbh_vÆid
;

18 
u8
 
	mbh_dút
;

19 
u8
 
	mbh_˙t
;

20 
u8
 
	mbh_locked
;

21 
u8
 
	mbh_hashed
;

22 
ègBUFFER_HEAD
 *
	mhash_¥ev
;

23 
ègBUFFER_HEAD
 *
	mhash_√xt
;

24 
ègBUFFER_HEAD
 *
	m‰ì_¥ev
;

25 
ègBUFFER_HEAD
 *
	m‰ì_√xt
;

26 }
	tBUFFER_HEAD
,*
	tLPBUFFER_HEAD
;

29 
	sègDEV_INODE
{

30 
u16
 
	mi_mode
;

31 
u16
 
	mi_uid
;

32 
u32
 
	mi_size
;

33 
u32
 
	mi_mtime
;

34 
u16
 
	mi_gid
;

35 
u16
 
	mi_∆öks
;

36 
u32
 
	mi_magic
;

37 
u32
 
	mi_z⁄e
[9];

38 
u16
 
	munu£d
[4];

39 }
	tDEV_INODE
,*
	tLPDEV_INODE
;

42 
	sègMEM_INODE
{

43 
u16
 
	mi_mode
;

44 
u16
 
	mi_uid
;

45 
u32
 
	mi_size
;

46 
u32
 
	mi_mtime
;

47 
u16
 
	mi_gid
;

48 
u16
 
	mi_∆öks
;

49 
u32
 
	mi_magic
;

50 
u32
 
	mi_z⁄e
[9];

51 
u16
 
	munu£d
[4];

53 
u32
 
	mi_acc_time
;

54 
u32
 
	mi_¸t_time
;

55 
u32
 
	mi_num
;

56 
u16
 
	mi_dev
;

57 
u16
 
	mi_˙t
;

58 
u8
 
	mi_locked
;

59 
u8
 
	mi_dút
;

60 
u8
 
	mi_pùe
;

61 
u8
 
	mi_mou¡ed
;

62 
u8
 
	mi_£ek
;

63 
u8
 
	mi_vÆid
;

64 }
	tMEM_INODE
,*
	tLPMEM_INODE
;

67 
	sègDEV_SUPER_BLOCK
{

68 
u32
 
	msb_nöodes
;

69 
u32
 
	msb_nz⁄es
;

70 
u32
 
	msb_im≠_blocks
;

71 
u32
 
	msb_zm≠_blocks
;

72 
u32
 
	msb_fú°_d©az⁄e
;

73 
u32
 
	msb_log_z⁄e_size
;

74 
u32
 
	msb_max_size
;

75 
u32
 
	msb_magic
;

76 
u32
 
	msb_pos
;

77 }
	tDEV_SUPER_BLOCK
,*
	tLPDEV_SUPER_BLOCK
;

80 
	#NR_IMAP_BLKS
 8

	)

81 
	#NR_ZMAP_BLKS
 8

	)

82 
	#NR_SBLKS
 8

	)

85 
	sègMEM_SUPER_BLOCK
{

86 
u32
 
	msb_nöodes
;

87 
u32
 
	msb_nz⁄es
;

88 
u32
 
	msb_im≠_blocks
;

89 
u32
 
	msb_zm≠_blocks
;

90 
u32
 
	msb_fú°_d©az⁄e
;

91 
u32
 
	msb_log_z⁄e_size
;

92 
u32
 
	msb_max_size
;

93 
u32
 
	msb_magic
;

94 
u32
 
	msb_pos
;

96 
BUFFER_HEAD
 *
	msb_im≠_bh
[
NR_IMAP_BLKS
];

97 
BUFFER_HEAD
 *
	msb_zm≠_bh
[
NR_ZMAP_BLKS
];

98 
u16
 
	msb_dev
;

99 
MEM_INODE
 *
	msb_i_ƒ
;

100 
MEM_INODE
 *
	msb_i_mou¡ed
;

101 
u32
 
	msb_time
;

102 
u8
 
	msb_ro
;

103 
u8
 
	msb_dút
;

104 
u8
 
	msb_locked
;

105 }
	tMEM_SUPER_BLOCK
;

107 
	#NAME_LEN
 60

	)

109 
	sègDIR_ENTRY
{

110 
u32
 
	möode_ƒ
;

111 
i8
 
	m«me
[
NAME_LEN
] ;

112 }
	tDIR_ENTRY
,*
	tLPDIR_ENTRY
;

115 
	#MAX_OPEN_FILES
 64

	)

116 
	#MAX_FILPS
 32

	)

117 
	s_fûe_°
 {

118 
u16
 
	mf_mode
;

119 
u16
 
	mf_Êags
;

120 
u16
 
	mf_˙t
;

121 
MEM_INODE
 *
	mf_öode_±r
;

122 
u64
 
	mf_pos
;

123 } 
	tfûe_°
;

125 
	#BLK_SIZE
 (4096)

	)

126 
	#INODES_PER_BLK
 (
BLK_SIZE
/(
DEV_INODE
))

	)

127 
	#ENTRIES_PER_BLK
 (
BLK_SIZE
/(
DIR_ENTRY
))

	)

129 
	#ROOT_IND_NR
 (0)

	)

130 
	#PWD_LEN
 (64)

	)

132 
	s_cw_°
 {

133 
u16
 
	mdev
;

134 
u32
 
	mör
;

135 }
	tcw_°
;

137 
	s¥oc_°
 {

138 
cw_°
 
	mroŸ
,
	mcwd
;

139 
i8
 
	mpwd
 [
PWD_LEN
];

140 
i32
 
	mpid
;

143 
	#CASEY_MAGIC
 (0x05201314)

	)

144 
	#I_MAGIC
 (0xCCAA)

	)

145 
	#NR_ZONES
 (0xFA00)

	)

146 
	#NR_INODES
 (0x40000)

	)

148 
	#BLK_BITS_SFT
 (15)

	)

149 
	#BLK_BITS_MSK
 (0x7FFF)

	)

151 
	#BLK_SIZE_SFT
 (12)

	)

152 
	#BLK_SIZE_MSK
 (0xFFF)

	)

154 
	#NR_BLK_OBJS
 (
BLK_SIZE
>>2)

	)

155 
	#BLK_OBJ_SFT
 (10)

	)

156 
	#BLK_OBJ_MSK
 (0x3FF)

	)

158 
	#WRITE
 0

	)

159 
	#READ
 1

	)

161 
	#IND_EMPTY
(
x
Ë((xË=0)

	)

163 
	#DEV_NAND
 (0x0100)

	)

164 
	#DEV_RAM
 (0x0101)

	)

165 
	#DEV_SDCARD
 (0x0102)

	)

166 
	#ROOT_DEV
 (
DEV_NAND
)

	)

168 
	#CUR_TIME
 (0x12345678)

	)

169 
	#UID
 (0xCC)

	)

170 
	#GID
 (0xAA)

	)

172 
	#NR_INODE_BUF
 (128)

	)

174 
	#NR_TASKS
 (256)

	)

175 
fûe_°
 *
fûp
[
NR_TASKS
][
MAX_FILPS
];

176 
	#pfûp
(
pid
,
fd
Ë(
fûp
[pid][fd])

	)

	@include/ecasey/kernel.h

8 #i‚de‡
__KERNEL_H__


9 
	#__KERNEL_H__


	)

10 
	~<sys/ty≥s.h
>

12 
	#PCLK
 (50000000Ë

	)

13 
	#BAUD_RATE
 (115200)

	)

14 
	#FIN
 (12000000Ë

	)

17 
	#__°i
() \

19 
__asm__
 
	`__vﬁ©ûe__
 (\

25 }

	)

27 
	#__˛i
() \

29 
__asm__
 
	`__vﬁ©ûe__
 (\

35 }

	)

38 
	#¥ötk
 
u¨t_¥ötf


	)

39 
	#x¥ötk
 
lcd_¥ötf


	)

40 
u32
 
k_ªíãr
;

41 
u32
 
__ticks
;

42 
	#CUR_TICKS
 
__ticks


	)

	@include/ecasey/mail.h

2 #i‚de‡
__MAIL_H__


3 
	#__MAIL_H__


	)

5 
	s_maû_°
 {

6 
	u_msg
 {

7 
	mumsg
;

8 
	mªt
;

9 }
	mmsg
;

10 
	m‰om
,
	mto
;

11 *
	m§c
;

12 
	mÀn
;

13 
_maû_°
 *
	m√xt
;

14 
	m°ime
;

15 }
	tmaû_°
;

17 
	#MT_SEND
 0

	)

18 
	#MT_POST
 1

	)

20 
	#TASK_SYS
 0

	)

21 
	#TASK_FS
 1

	)

22 
	#TASK_SH
 2

	)

24 
	#TASK_ANY
 (-1)

	)

25 
	#NO_TASK
 (-1)

	)

27 
	#MSG_OK
 (0)

	)

28 
	#MSG_ERR
 (1)

	)

	@include/ecasey/pcb.h

6 #i‚de‡
__PCB_H__


7 
	#__PCB_H__


	)

9 
	~<eˇ£y/maû.h
>

11 
	ss_ªgs_‰ame
 {

12 
	mÃ
;

13 
	m•
;

14 
	m•§
;

15 
	mr0
;

16 
	mr1
;

17 
	mr2
;

18 
	mr3
;

19 
	mr4
;

20 
	mr5
;

21 
	mr6
;

22 
	mr7
;

23 
	mr8
;

24 
	mr9
;

25 
	mr10
;

26 
	mÂ
;

27 
	mù
;

28 
	mpc
;

29 }
	tREGS_FRAME
;

31 
	#SEND_BUF_SIZE
 (1024)

	)

34 
	spcb_°
 {

35 
REGS_FRAME
 
	mªgs
;

36 
	mâb_ba£
;

37 
	msigm≠
;

38 
	mpid
;

39 
	m¥io
;

40 
	mtick
;

41 
	m°©e
;

42 
pcb_°
 *
	mhód
,*
	mèû
;

43 
pcb_°
 *
	m√xt
;

44 
maû_°
 
	mmaû
;

45 }
	tPCB
,
	tTASK
;

47 
	#PL_MAX
 5

	)

48 
	#TS_MASK
 7

	)

50 
	#TS_RUN
 0

	)

51 
	#TS_PND
 1

	)

52 
	#TS_SEND
 2

	)

53 
	#TS_RECV
 3

	)

54 
	#TS_HANG
 4

	)

56 
	#MAX_TASKS
 (256)

	)

58 
TASK
* 
èsk_°
[];

	@include/ecasey/rtc.h

1 #i‚de‡
__RTC_H__


2 
	#__RTC_H__


	)

4 
	s_sy°ime
 {

5 
	myór
;

6 
	mm⁄
;

7 
	md©e
;

8 
	mday
;

9 
	mhour
;

10 
	mmö
;

11 
	m£c
;

12 }
	tsy°m_°
;

	@include/ecasey/sysno.h

1 #i‚de‡
__SYSNO__


2 
	#__SYSNO__


	)

6 
	#SYS_GET_TICK
 0x00000000

	)

7 
	#SYS_UART_WRITE
 0x00000001

	)

8 
	#SYS_LCD_WRITE
 0x00000002

	)

9 
	#SYS_PAUSE
 0x00000003

	)

10 
	#SYS_GETTIME
 0x00000004

	)

11 
	#SYS_SETTIME
 0x00000005

	)

12 
	#SYS_GETADC
 0x00000006

	)

13 
	#SYS_GETPOS
 0x00000007

	)

14 
	#SYS_RW_NAND
 0x00000008

	)

15 
	#SYS_GETCHS
 0x00000009

	)

16 
	#SYS_SYNC_TL
 0x0000000A

	)

18 
	#MAX_SYSCALL
 (256)

	)

	@include/errno.h

1 #i‚de‡
__ERRNO_H__


2 
	#__ERRNO_H__


	)

4 
	#ENO
 (0)

	)

5 
	#ENOPATH
 (1)

	)

6 
	#EPDUP
 (2)

	)

7 
	#ENOSRC
 (3)

	)

8 
	#EBADRD
 (4)

	)

9 
	#EBADWR
 (5)

	)

10 
	#ENOPERM
 (6)

	)

11 
	#EOBUSY
 (7)

	)

12 
	#EOFREE
 (8)

	)

13 
	#EOPNFAILD
 (9)

	)

14 
	#EEMPTY
 (10)

	)

15 
	#ENOTEMPT
 (11)

	)

16 
	#EDIR
 (12)

	)

17 
	#ENOTD
 (13)

	)

18 
	#EBADFD
 (14)

	)

19 
	#EOINVALID
 (15)

	)

20 
	#ENOFD
 (16)

	)

21 
	#EBADFSCALL
 (17)

	)

22 
	#ENOTELF
 (18)

	)

23 
	#EOUNDEF
 (19)

	)

24 
	#EONOSURPOT
 (20)

	)

25 
	#EOISFULL
 (21)

	)

	@include/fcntl.h

1 #i‚de‡
__FCNTL_H__


2 
	#__FCNTL_H__


	)

4 
	#O_ACCMODE
 0x0003

	)

5 
	#O_RDONLY
 0x0000

	)

6 
	#O_WRONLY
 0x0001

	)

7 
	#O_RDWR
 0x0002

	)

8 
	#O_CREAT
 0x0040

	)

9 
	#O_EXCL
 0x0080

	)

10 
	#O_NOCTTY
 0x0100

	)

11 
	#O_TRUNC
 0x0200

	)

12 
	#O_APPEND
 0x0400

	)

13 
	#O_NONBLOCK
 0x0800

	)

14 
	#O_NDELAY
 
O_NONBLOCK


	)

	@include/stdarg.h

6 #i‚de‡
__ARG_H__


7 
	#__ARG_H__


	)

9 * 
	tva_li°
;

10 
	#_INTSIZEOF
(
n
Ë((“)+()-1)&~((Ë- 1))

	)

11 
	#va_°¨t
(
≠
,
v
Ë◊∞(
va_li°
)&v + 
	`_INTSIZEOF
(v))

12 
	#va_¨g
(
≠
,
t
Ë(*— *)(◊∞+
	`_INTSIZEOF
(t)) - _INTSIZEOF(t)))

13 
	#va_íd
(
≠
Ë◊∞(
va_li°
)0)

14 

	)

	@include/stdio.h

1 #i‚de‡
__STDIO_H__


2 
	#__STDIO_H__


	)

6 
¥ötf
 (c⁄° *
fmt
,...);

	@include/string.h

6 #i‚de‡
__STRING_H__


7 
	#__STRING_H__


	)

9 
	~<°d¨g.h
>

11 #i‚de‡
NULL


12 
	#NULL
 (*)0

	)

14 
	#NULL
 0

	)

17 
	#Max
(
x
,
y
Ë((x)>(yË? (x):(y))

	)

18 
	#Mö
(
x
,
y
Ë((x)<(yË? (x):(y))

	)

20 
°æí
 ( c⁄° *
°r
 );

21 * 
°rˇt
 ( * 
de°
,c⁄° *
§c
 );

22 * 
°r˝y
 ( *
de°
,c⁄° *
§c
 );

23 
°rcmp
 ( c⁄° *
°r1
,c⁄° *
°r2
 );

24 
°∫cmp
 ( c⁄° *
°r1
,c⁄° *
°r2
,
Àn
 );

25 * 
°∫˝y
 ( *
de°
,c⁄° *
§c
,
Àn
 );

26 
©oi
 ( c⁄° *
§c
 ) ;

27 * 
ôﬂ
 ( 
de˚m
,*
buf
,
ba£
 ) ;

28 
•rötf
 ( * 
dbuf
,c⁄° * 
fmt
,... );

29 
v•rötf
 ( * 
dbuf
,c⁄° * 
fmt
,
va_li°
 
va_p
 ) ;

30 
i¢um
 ( 
ch
 ) ;

31 
°πﬁ
 ( c⁄° *
§c
,**
îr_pos
,
ba£
 );

33 
ölöe
 * 
mem˝y
(* 
de°
,c⁄° * 
§c
, 
size
);

34 
ölöe
 * 
memmove
(* 
de°
,* 
§c
, 
cou¡
);

35 
ölöe
 
memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
cou¡
);

36 
ölöe
 * 
memchr
(c⁄° * 
cs
,
c
,
cou¡
);

37 
ölöe
 * 
mem£t
(* 
s
,
c
,
cou¡
);

39 
v•rötf
 ( * 
dbuf
,c⁄° * 
fmt
,
va_li°
 
va_p
 );

	@include/sys/stat.h

1 #i‚de‡
__SYS_STAT_H__


2 
	#__SYS_STAT_H__


	)

4 
	~<sys/ty≥s.h
>

10 
	#S_IFMT
 00170000

	)

11 
	#S_IFREG
 0100000

	)

12 
	#S_IFBLK
 0060000

	)

13 
	#S_IFDIR
 0040000

	)

14 
	#S_IFCHR
 0020000

	)

15 
	#S_IFIFO
 0010000

	)

18 
	#S_ISUID
 0004000

	)

19 
	#S_ISGID
 0002000

	)

20 
	#S_ISVTX
 0001000

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

28 
	#S_IRWXU
 00700

	)

29 
	#S_IRUSR
 00400

	)

30 
	#S_IWUSR
 00200

	)

31 
	#S_IXUSR
 00100

	)

33 
	#S_IRWXG
 00070

	)

34 
	#S_IRGRP
 00040

	)

35 
	#S_IWGRP
 00020

	)

36 
	#S_IXGRP
 00010

	)

38 
	#S_IRWXO
 00007

	)

39 
	#S_IROTH
 00004

	)

40 
	#S_IWOTH
 00002

	)

41 
	#S_IXOTH
 00001

	)

43 
	#I_TYPE
 0170000

	)

44 
	#I_DIRECTORY
 0040000

	)

45 
	#I_REGULAR
 0100000

	)

46 
	#I_BLOCK_SPECIAL
 0060000

	)

47 
	#I_CHAR_SPECIAL
 0020000

	)

48 
	#I_NAMED_PIPE
 0010000

	)

49 
	#I_SET_UID_BIT
 0004000

	)

50 
	#I_SET_GID_BIT
 0002000

	)

52 
	s°©
 {

53 
u16
 
	m°_dev
;

54 
u32
 
	m°_öo
;

55 
u16
 
	m°_mode
;

56 
u16
 
	m°_∆ök
;

57 
u16
 
	m°_uid
;

58 
u16
 
	m°_gid
;

59 
u16
 
	m°_rdev
;

60 
u32
 
	m°_size
;

61 
u32
 
	m°_©ime
;

62 
u32
 
	m°_mtime
;

63 
u32
 
	m°_˘ime
;

	@include/sys/types.h

1 #i‚de‡
__TYPES_H__


2 
	#__TYPES_H__


	)

6 
	ti8
;

7 
	ti16
;

8 
	ti32
;

9 
	tu8
;

10 
	tu16
;

11 
	tu32
;

13 #ifde‡
__WIN32__


14 
	t__öt64
 
	tu64
;

15 
__öt64
 
	ti64
;

17 
	tu64
;

18 
	ti64
;

22 
	tboﬁ
;

23 
	#Ál£
 0

	)

24 
	#åue
 1

	)

26 
	#LOCAL
 

	)

27 
	#INLINE
 
ölöe


	)

28 
	#RO
 c⁄°

	)

29 
	#VAR
 vﬁ©ûe

	)

30 
	#__VAR__
 
__vﬁ©ûe__


	)

32 
	#high
(
x
Ë()((()(x))>>8)

	)

33 
	#low
(
x
Ë()(x)

	)

34 
	#size
(
x
Ë((x))

	)

35 
	#gëw
(
±r
Ë(*(*)’å))

	)

36 
	#gëb
(
±r
Ë(*(*)’å))

	)

37 
	#gëdw
(
±r
Ë(*(*)’å))

	)

38 
	#gëdd
(
±r
Ë(*(*)’å))

	)

	@kernel/clock.c

1 
	~<2440/2440addr.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<sys/ty≥s.h
>

5 
u32
 
	gtPCLK
,

6 
	gtHCLK
,

7 
	gtFCLK
,

8 
	gtCPU_FREQ
,

9 
	gtUPLL
,

10 
	gtUCLK
 ;

13 
	$ßve_˝u_bus_‰eq
 ()

15 
u32
 
vÆ
;

16 
u8
 
m
, 
p
, 
s
;

18 
vÆ
 = 
rMPLLCON
;

19 
m
 = (
vÆ
>>12)&0xff;

20 
p
 = (
vÆ
>>4)&0x3f;

21 
s
 = 
vÆ
&3;

26 
m
 += 8;

27 
p
 += 2;

28 
tFCLK
 = (2*
m
*(
FIN
/100))/(
p
*(1<<
s
))*100;

30 
vÆ
 = 
rCLKDIVN
;

31 
m
 = (
vÆ
>>1)&3;

32 
p
 = 
vÆ
&1;

33 
vÆ
 = 
rCAMDIVN
;

34 
s
 = 
vÆ
>>8;

35 
m
)

37 0: 
tHCLK
 = 
tFCLK
; ;

38 1: 
tHCLK
 = 
tFCLK
>>1; ;

40 if(
s
&2Ë
tHCLK
 = 
tFCLK
>>3;

41 
tHCLK
 = 
tFCLK
>>2;

44 if(
s
&1Ë
tHCLK
 = 
tFCLK
/6;

45 
tHCLK
 = 
tFCLK
/3;

49 
tPCLK
 = (0 =
p
Ë? (
tHCLK
) : (tHCLK>>1);

51 
tCPU_FREQ
 = (
tHCLK
Ë? (
tFCLK
Ë: (
s
&0x10);

52 
vÆ
 = 
rUPLLCON
;

53 
m
 = (
vÆ
>>12)&0xff;

54 
p
 = (
vÆ
>>4)&0x3f;

55 
s
 = 
vÆ
&3;

57 
tUPLL
 = ((
m
+8)*
FIN
)/((
p
+2)*(1<<
s
));

59 
tUCLK
 = ((
rCLKDIVN
>>3)&0xFFË? (
tUPLL
>>1) :ÅUPLL;

60 
	}
}

	@kernel/drv/adc.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/maû.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<sys/ty≥s.h
>

7 
u32
 
	$sys_adc
 (
maû_°
 *
m
)

9 i‡(!
m
)

11 
u32
 
ch
 = (u32)(
m
->
§c
);

13 
rADCCON
 = (1<<14Ë| (
PRSCVL
 << 6Ë| ((
ch
 & 7) << 3);

14 
rADCTSC
 &= ~(1<<2);

16 
rADCCON
 |= (1<<0);

17 
rADCCON
 & 0x01);

19 !(
rADCCON
 & (1<<15)));

21  (
rADCDAT0
 & 0x3FF);

22 
	}
}

	@kernel/drv/blk/blk_drv.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/kî√l.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<eˇ£y/maû.h
>

6 
	~<eˇ£y/fs.h
>

7 
	~<°rög.h
>

9 
	#BAD_BLK_FLAG
 (0x33)

	)

11 
i32
 
«nd_ª£t
 ();

12 
i32
 
	$«nd_ª£t
 ()

14 
	`NF_CE_ON
 ();

15 
	`NF_CLR_RB
 ();

16 
	`NF_CMD
 (
NF_RESET
);

17 
	`NF_WAIT_RB
 ();

18 
	`NF_CE_OFF
 ();

20 
	}
}

22 
u32
 
	$«nd_ªad_∑ge
 (*
to
,
u32
 
°¨t_addr
)

24 i‡(!
to
)  (0);

25 
u8
 *
p
 = (u8*)
to
;

26 
i32
 
i
 ;

27 
	`NF_CE_ON
 ();

28 
	`NF_CLR_RB
 ();

29 
	`NF_CMD
 (
NF_READ1
);

30 
	`NF_ADDR
 (0x00);

31 
	`NF_ADDR
 (0x00);

32 
	`NF_ADDR
((
°¨t_addr
>>0)&0xFF);

33 
	`NF_ADDR
((
°¨t_addr
>>8)&0xFF);

34 
	`NF_ADDR
((
°¨t_addr
>>16)&0xFF);

35 
	`NF_CMD
 (
NF_READ2
);

36 
	`NF_WAIT_RB
 ();

37 
i
 = 0; i < 
BYTES_PER_PAGE
 ; i ++)

38 
p
 [
i
] = 
	`«nd_ªad_byã
 ();

39 
	`NF_CE_OFF
 ();

41 
	}
}

44 
u32
 
	$c›y_«nd_to_sdøm
 (
u32
 
sdøm_addr
,u32 
«nd_addr
,u32 
img_size
)

46 
i32
 
∑ges
 = ((
img_size
 & 0x7FFË!0Ë+ (img_sizê>> 11),
i
 = 0;

47 
i
 = 0 ; i < 
∑ges
 ; i ++,
sdøm_addr
 += 2048 )

48 
	`«nd_ªad_∑ge
 ((*)
sdøm_addr
,(
«nd_addr
 >> 11Ë+ 
i
);

50 
	}
}

52 
i8
 
	$«nd_gë_id
 ()

54 
i8
 
pMID
,
pDID
,
tmp
;

56 
	`NF_CE_ON
();

57 
	`NF_CLR_RB
();

58 
	`NF_CMD
(
NF_READ_ID
);

59 
	`NF_ADDR
(0x00);

60 
pMID
 = 
	`«nd_ªad_byã
();

61 
pDID
 = 
	`«nd_ªad_byã
();

62 
tmp
 = 
	`«nd_ªad_byã
();

63 
tmp
 = 
	`«nd_ªad_byã
();

64 
tmp
 = 
	`«nd_ªad_byã
();

65 
	`NF_CE_OFF
();

66  (
pDID
);

67 
	}
}

70 
u8
 
	$«ndx_wrôe_byã
 (
u32
 
∑ge_ƒ
,u32 
addr
,
u8
 
d©
)

72 
u8
 
°©
;

74 
	`NF_CE_ON
 ();

75 
	`NF_CLR_RB
();

76 
	`NF_CMD
(
NF_PAGE_WRITE1
);

77 
	`NF_ADDR
(0x00);

78 
	`NF_ADDR
(0x00);

79 
	`NF_ADDR
((
∑ge_ƒ
)&0xff);

80 
	`NF_ADDR
((
∑ge_ƒ
>>8)&0xff);

81 
	`NF_ADDR
((
∑ge_ƒ
>>16)&0xff);

82 
	`NF_CMD
(
NF_RANDOM_WRITE
);

83 
	`NF_ADDR
((
i8
)(
addr
&0xff));

84 
	`NF_ADDR
((
i8
)((
addr
>>8)&0x0f));

85 
	`«nd_wrôe_byã
(
d©
);

86 
	`NF_CMD
(
NF_PAGE_WRITE2
);

87 
	`NF_CMD
(
NF_READ_STATUS
);

88 !((
°©
 = 
	`«nd_ªad_byã
 ()) & 0x40));

89 
	`NF_CE_OFF
 ();

90  (0 =(
°©
&0x01));

91 
	}
}

92 
u8
 
	$«ndx_ªad_byã
 (
u32
 
∑ge_ƒ
,u32 
addr
)

94 
u8
 
°©
;

95 
	`NF_CE_ON
 ();

96 
	`NF_CLR_RB
();

97 
	`NF_CMD
(
NF_READ1
);

98 
	`NF_ADDR
(0x00);

99 
	`NF_ADDR
(0x00);

100 
	`NF_ADDR
((
∑ge_ƒ
)&0xff);

101 
	`NF_ADDR
((
∑ge_ƒ
>>8)&0xff);

102 
	`NF_ADDR
((
∑ge_ƒ
>>16)&0xff);

103 
	`NF_CMD
(
NF_READ2
);

104 
	`NF_WAIT_RB
();

105 
	`NF_CMD
(
NF_RANDOM_READ1
);

106 
	`NF_ADDR
((
i8
)(
addr
&0xff));

107 
	`NF_ADDR
((
i8
)((
addr
>>8)&0x0f));

108 
	`NF_CMD
(
NF_RANDOM_READ2
);

109 
°©
 = 
	`«nd_ªad_byã
 ();

110 
	`NF_CE_OFF
 ();

111  (
°©
);

112 
	}
}

115 
u8
 
	$«ndx_is_badblk
 (
u32
 
block
)

118  (0xFF !
	`«ndx_ªad_byã
 ((
block
<<6),2048 + 6 ));

119 
	}
}

124 
u8
 
	$«ndx_m¨k_badblk
 (
u32
 
block
)

126  (
	`«ndx_wrôe_byã
 (
block
<<6, 2048+6, 
BAD_BLK_FLAG
));

127 
	}
}

130 
i8
 
	$«ndx_ªad_∑ge
 (
u8
 *
to
,
u32
 
size
,u32 
∑ge_ƒ
)

132 i‡(!
to
 || !
size
)

134 
u32
 
i
,
j
,
mecc0
,
£cc
;

136 
	`NF_RSTECC
 ();

137 
	`NF_MECC_U∆ock
 ();

138 
	`NF_CE_ON
 ();

139 
	`NF_CLR_RB
();

140 
	`NF_CMD
(
NF_READ1
);

141 
	`NF_ADDR
(0x00);

142 
	`NF_ADDR
(0x00);

143 
	`NF_ADDR
((
∑ge_ƒ
) & 0xff);

144 
	`NF_ADDR
((
∑ge_ƒ
>>8)&0xff);

145 
	`NF_ADDR
((
∑ge_ƒ
>>16)&0xff);

146 
	`NF_CMD
(
NF_READ2
);

147 
	`NF_WAIT_RB
();

148 i‡(
size
 >
BYTES_PER_PAGE
)

149 
size
 = 
BYTES_PER_PAGE
;

150 
i
 = 0,
j
 = 0; i < 
BYTES_PER_PAGE
; i++) {

151 i‡(
j
 < 
size
)

152 
to
[
j
++] = 
	`«nd_ªad_byã
 ();

154 
	`NF_MECC_Lock
();

155 
	`NF_SECC_U∆ock
();

156 
mecc0
 = 
	`NF_RDMECC0
();

157 
rNFMECCD0
 = ((
mecc0
&0xff00)<<8)|(mecc0&0xff);

158 
rNFMECCD1
 = ((
mecc0
&0xff000000)>>8)|((mecc0&0xff0000)>>16);

159 
	`NF_SECC_Lock
();

160 
£cc
 = 
	`NF_RDSECC
 ();

161 
rNFSECCD
=((
£cc
&0xff00)<<8)|(secc&0xff);

162 
	`NF_CE_OFF
();

163  ((
rNFESTAT0
&0xf));

164 
	}
}

167 
i8
 
	$«ndx_wrôe_∑ge
 (
u32
 
∑ge_ƒ
,
u8
 *
§c
,u32 
size
)

169 
u32
 
i
,
j
, 
mecc0
,
£cc
;

170 
i8
 
°©
;

171 
i32
 
dly
 = 1000;

173 i‡(
	`«ndx_is_badblk
 (
∑ge_ƒ
>>6Ë|| !
§c
 || !
size
)

175 
	`NF_RSTECC
();

176 
	`NF_MECC_U∆ock
();

177 
	`NF_CE_ON
 ();

178 
	`NF_CLR_RB
();

179 
	`NF_CMD
(
NF_PAGE_WRITE1
);

180 
	`NF_ADDR
(0x00);

181 
	`NF_ADDR
(0x00);

182 
	`NF_ADDR
((
∑ge_ƒ
) & 0xff);

183 
	`NF_ADDR
((
∑ge_ƒ
>>8)&0xff);

184 
	`NF_ADDR
((
∑ge_ƒ
>>16)&0xff);

185 i‡(
size
 >
BYTES_PER_PAGE
)

186 
size
 = 
BYTES_PER_PAGE
;

187 
i
 = 0,
j
 = 0; i < 
BYTES_PER_PAGE
; i++)

188 i‡(
j
 < 
size
)

189 
	`«nd_wrôe_byã
(
§c
[
j
++]);

190 
	`NF_MECC_Lock
();

191 
mecc0
 = 
	`NF_RDSECC
 ();

192 
	`NF_SECC_U∆ock
();

193  
i
 = 0; i < 4; i++,
mecc0
 >>= 8 )

194 
	`«nd_wrôe_byã
 (
mecc0
&0xFF);

195 
	`NF_SECC_Lock
();

196 
£cc
 = 
	`NF_RDSECC
();

197 
	`«nd_wrôe_byã
 (
£cc
&0xFF);

198 
	`«nd_wrôe_byã
 ((
£cc
>>8)&0xFF);

199 
	`NF_CMD
(
NF_PAGE_WRITE2
);

200 
dly
 --);

201 
	`NF_CMD
(
NF_READ_STATUS
);

202 !((
°©
 = 
	`«nd_ªad_byã
 ()) & 0x40));

203 
	`NF_CE_OFF
 ();

204 i‡(
°©
 & 0x1){

205 i‡(
	`«ndx_m¨k_badblk
 (
∑ge_ƒ
>>6))

210 
	}
}

214 
i8
 
	$«ndx_îa£_blk
 (
u32
 
blk_ƒ
)

216 
i8
 
°©
;

217 
i32
 
dly
 = 1000;

219 i‡(
	`«ndx_is_badblk
 (
blk_ƒ
))

221 
	`NF_CE_ON
 ();

222 
	`NF_CLR_RB
 ();

223 
	`NF_CMD
 (
NF_BLK_ERASE1
);

224 
	`NF_ADDR
((
blk_ƒ
<<6) & 0xff);

225 
	`NF_ADDR
((
blk_ƒ
>>2) & 0xff);

226 
	`NF_ADDR
((
blk_ƒ
>>10) & 0xff);

227 
	`NF_CMD
 (
NF_BLK_ERASE2
);

228 
dly
 --);

229 
	`NF_CMD
 (
NF_READ_STATUS
);

230 !((
°©
 = 
	`«nd_ªad_byã
 ()) & 0x40));

231 
	`NF_CE_OFF
 ();

232 i‡(
°©
 & 0x1){

233 i‡(
	`«ndx_m¨k_badblk
 (
blk_ƒ
))

238 
	}
}

240 
	s_é_ˇche_°
 {

241 
i16
 
	mblkno
;

242 
i8
 *
	mbuf
;

243 
i8
 
	mdút
;

244 
u32
 
	m©ime
;

245 }
	té_ˇche_°
;

247 
LOCAL
 
é_ˇche_°
 *
	gé_ˇche
 = (*)0;

249 
	s_m≠_èb_°
 {

250 
i16
 
	mvÆid
;

251 
i16
 
	mdút
;

252 
i16
 
	mgood_blk
[
BLKS_PER_NANDF
];

253 
i16
 
	mgood_˙t
;

254 
i16
 
	mbad_blk
[
MAX_BAD_BLKS
];

255 
i16
 
	mbad_˙t
;

256 }
	tm≠_èb_°
;

258 
	#MAP_TAB_BLK_NO
 4

	)

259 
LOCAL
 
m≠_èb_°
 *
	gm≠_èb
 = (*)0;

261 
INLINE
 
i16
 
	$l2pblkno
 (
i16
 
lblkno
)

263 i‡(
lblkno
 < 0 ||Üblknÿ>
m≠_èb
->
good_˙t
)

265  (
m≠_èb
->
good_blk
[
lblkno
]);

266 
	}
}

267 
i8
 
«ndx_ªad_∑ge
 (
u8
 *
to
,
u32
 
size
,u32 
∑ge_ƒ
);

269 
i8
 
	$gë_m≠_èb
 ()

271 
i8
 
°©e
,*
p
 ;

272 
i32
 
i
 = 0,
j
,
k
 ;

274 
m≠_èb
 = (
m≠_èb_°
*)(
MAP_TAB
);

275 
p
 = (
i8
*)(
MAP_TAB
);

280 
k
 = (
m≠_èb_°
);

281 
k
 > 0) {

282 
j
 = 
BYTES_PER_PAGE
;

283 i‡(
j
 > 
k
) j = k;

284 
k
 -
j
;

285 i‡((
°©e
 = 
	`«ndx_ªad_∑ge
 ((
u8
*)(
p
 + (
i
 << 11)),
j
,(
MAP_TAB_BLK_NO
<<6)+i)))

286  (
°©e
);

287 
i
 ++;

290 i‡(
m≠_èb
->
vÆid
 == (-1)) {

291 
	`¥ötk
 ( "$ > fresh map_tab,rebuilding.... !\n" );

292 
i
 = 48,
j
 = 
k
 = 0; i < 
BLKS_PER_NANDF
; i++) {

293 i‡(
	`«ndx_is_badblk
 (
i
)) {

294 
m≠_èb
->
bad_blk
[
j
 ++] = 
i
;

297 
m≠_èb
->
good_blk
[
k
 ++] = 
i
;

299 
m≠_èb
->
good_˙t
 = 
k
;

300 
m≠_èb
->
bad_˙t
 = 
j
;

301 
m≠_èb
->
dút
 = m≠_èb->
vÆid
 = 1;

303  (
°©e
);

304 
	}
}

305 
i8
 
«ndx_wrôe_∑ge
 (
u32
 
∑ge_ƒ
,
u8
 *
§c
,u32 
size
);

308 
i8
 
	$put_m≠_èb
 ()

310 
i8
 
°©e
 = 0;

311 
i32
 
i
 = 0,
j
,
k
 ;

313 
m≠_èb
 = (
m≠_èb_°
*)(
MAP_TAB
);

314 
i8
 *
p
 = (i8*)(
MAP_TAB
);

316 i‡(1 !
m≠_èb
->
dút
)

317  (
°©e
);

322 
k
 = (
m≠_èb_°
);

323 
k
 > 0) {

324 
j
 = 
BYTES_PER_PAGE
;

325 i‡(
j
 > 
k
) j = k;

326 
k
 -
j
;

327 i‡((
°©e
 = 
	`«ndx_wrôe_∑ge
 ((
MAP_TAB_BLK_NO
<<6)+
i
,(
u8
*)(
p
 + (ò<< 11)),
j
)))

328  (
°©e
);

329 
i
 ++;

331 
m≠_èb
->
dút
 = -1;

332  (
°©e
);

333 
	}
}

335 
i8
 
	$dump_m≠_èb
 ()

337 
i32
 
i
 = 0;

338 
i8
 
°©e
 ;

340 i‡((
°©e
 = 
	`gë_m≠_èb
 ()))

341  (
°©e
);

342 
i
 = 0 ; i < 
m≠_èb
->
bad_˙t
 ;i++)

343 
	`¥ötk
 ( "# > Bad blockÇ∏[ %08d ] \n",
m≠_èb
->
bad_blk
[
i
]);

344  (
°©e
);

345 
	}
}

348 
i8
 
	$ªad_blk
 (*
buf
,
i32
 
blk_ƒ
)

350 
i32
 
i
 = 0;

351 
i8
 *
p
 = (i8*)
buf
,
°©e
;

353 
i
 = 0; i < 
PAGES_PER_BLK
 ; i++) {

354 i‡((
°©e
 = 
	`«ndx_ªad_∑ge
 ((
u8
*)
p
,
BYTES_PER_PAGE
,(
blk_ƒ
 << 6Ë+ 
i
)))

355  (
°©e
);

356 
p
 +
BYTES_PER_PAGE
;

358  (
°©e
);

359 
	}
}

362 
LOCAL
 
i8
 
	$wrôe_blk
 (
i32
 
blk_ƒ
,*
§c
)

364 
i32
 
i
 = 0;

365 
i8
 *
p
 = (i8*)
§c
,
°©e
;

367 i‡((
°©e
 = 
	`«ndx_îa£_blk
 (
blk_ƒ
)))

368  (
°©e
);

369 
i
 = 0; i < 
PAGES_PER_BLK
; i++) {

370 i‡((
°©e
 = 
	`«ndx_wrôe_∑ge
 ((
blk_ƒ
<<6)+
i
,(
u8
*)
p
,
BYTES_PER_PAGE
)))

371  (
°©e
);

372 
p
 +
BYTES_PER_PAGE
;

375 
	}
}

377 
i32
 
	$blk_drv_öô
 ()

379 
i32
 
i
,
tmp
;

381 
	`¥ötk
 ( "$ > N™d fœsh : PID : 0x%X \n",
	`«nd_gë_id
 () );

383 
é_ˇche
 = (
é_ˇche_°
*)(
TL_CACHE_HEAD
);

385 
	`dump_m≠_èb
 ();

387 
i
 = 0,
tmp
 = 
TL_BUFFER
; i < 
CACHE_ST_NR
 ; i ++) {

388 
é_ˇche
[
i
].
blkno
 = -1;

389 
é_ˇche
[
i
].
buf
 = (
i8
*)
tmp
;

390 
é_ˇche
[
i
].
dút
 = 0;

391 
tmp
 +
BLK_BUF_SIZE
;

394 
	}
}

396 
i32
 
∑nic
 (
i8
 *
fmt
,...);

398 
	#NAND_BLK_SFT
 (5Ë

	)

399 
	#NAND_BLK_MASK
 (31)

	)

401 
LOCAL
 
i16
 
	$sync_é_ˇche
 ()

403 
i16
 
mö
 = 0,
i
 = 0;

405 
i
 = 1 ; i < 8 ; i++)

406 i‡(
é_ˇche
 [
mö
].
©ime
 >Ål_ˇchê[
i
].atime)

407 
mö
 = 
i
;

408 i‡(
	`wrôe_blk
 (
é_ˇche
[
mö
].
blkno
,(*Èl_ˇchê[mö].
buf
))

410  (
mö
);

411 
	}
}

413 
i32
 
	$sys_rw_«nd
 (
maû_°
 *
m
)

415 
u32
 
rw
,
fblkno
,
blkno
,*
p
 = (u32*)
m
->
§c
,
i
;

416 *
buf
,*
§c
,*
to
;

418 
rw
 = 
p
[0];

419 
fblkno
 = 
p
[1];

420 
buf
 = (*)
p
[2];

422 
blkno
 = 
fblkno
 >> 
NAND_BLK_SFT
;

423 i‡((
blkno
 = 
	`l2pblkno
 (blkno)) < 0)

425 
i
 = 0; i < 
CACHE_ST_NR
 ; i++) {

426 i‡(
é_ˇche
 [
i
].
blkno
 == blkno &&Ål_cache [i].blkno != (-1))

427 
_BLK_CPY
;

429 
i
 = 0; i < 
CACHE_ST_NR
 ; i++) {

430 i‡(
é_ˇche
 [
i
].
blkno
 == (-1)) {

431 
é_ˇche
 [
i
].
blkno
 = blkno;

435 i‡(
i
 >
CACHE_ST_NR
)

436 
i
 = 
	`sync_é_ˇche
 ();

437 i‡(
	`ªad_blk
 (
é_ˇche
 [
i
].
buf
,
blkno
))

439 
_BLK_CPY
:

440 i‡(
rw
 =
READ
) {

441 
§c
 = (*)
é_ˇche
 [
i
].
buf
 + ((
fblkno
 & 
NAND_BLK_MASK
Ë<< 
BLK_SIZE_SFT
);

442 
to
 = 
buf
;

444 
to
 = (*)
é_ˇche
 [
i
].
buf
 + ((
fblkno
 & 
NAND_BLK_MASK
Ë<< 
BLK_SIZE_SFT
);

445 
§c
 = 
buf
;

446 
é_ˇche
 [
i
].
dút
 = 
åue
;

448 
	`mem˝y
 (
to
,
§c
,
BLK_SIZE
);

449  (
BLK_SIZE
);

450 
	}
}

452 
i32
 
	$sys_sync_é
 ()

454 
i16
 
i
 = 0;

456 
i
 = 0 ; i < 8 ; i++) {

457 i‡(
é_ˇche
 [
i
].
blkno
 !(-1Ë&&Ål_ˇchê[i].
dút
) {

458 i‡(
	`wrôe_blk
 (
é_ˇche
[
i
].
blkno
,(*Èl_ˇchê[i].
buf
))

460 
é_ˇche
 [
i
].
dút
 = 
Ál£
;

464 
	}
}

	@kernel/drv/chr/tty.c

1 
	~<2440/drvs.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<as£π.h
>

4 
	~<eˇ£y/pcb.h
>

5 
	~<2440/ˇche.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<°rög.h
>

8 
	~<eˇ£y/maû.h
>

10 
i32
 
	g¶ìp_pid
 = 0;

12 
	#CHS_BUF_SIZE
 1024

	)

13 
u8
 
	gchs_buf
 [
CHS_BUF_SIZE
];

14 
u32
 
	gchs_˙t
 = 0;

16 
i32
 
scheduÀ
 ();

18 
i32
 
¶ìp_pid
;

19 
¶ìp_èsk
 (
TASK
 *
èsk
);

20 
wake_èsk
 (
TASK
 *
èsk
);

22 
u32
 
NR_TASKS
;

23 
TASK
 *
cuºít_p
;

24 
TASK
* 
èsk_°
[];

25 
u32
 
__ticks
;

27 
	$u¨t_ªcv
 ()

29 
i8
 
ch
;

31 
rSUBSRCPND
 |= (1<<0);

32 
rSRCPND
 |= (1<<28);

33 
rINTPND
 |= (1<<28);

35 
ch
 = 0xFF & 
rURXH0
;

37 i‡(
ch
 ='\r' || 
chs_˙t
 >
CHS_BUF_SIZE
) {

38 
ch
 = '\n';

39 i‡(
¶ìp_pid
 || 
èsk_°
 [¶ìp_pid]->
°©e
 =
TS_HANG
) {

40 
	`wake_èsk
 (
èsk_°
 [
¶ìp_pid
]);

41 
¶ìp_pid
 = 0;

44 i‡(
ch
 == 0x08) {

45 i‡(
chs_˙t
) {

46 
	`u¨t_£ndc
 (0x08);

47 
	`u¨t_£ndc
 (' ');

48 
	`u¨t_£ndc
 (0x08);

49 
chs_˙t
 --;

50 
chs_buf
 [
chs_˙t
] = '\0';

53 } i‡(
ch
 == 0x1b) {

56 
chs_buf
 [
chs_˙t
 ++] = 
ch
;

57 
chs_buf
 [
chs_˙t
] = '\0';

58 
	`u¨t_£ndc
 (
ch
);

59 
	}
}

61 
u32
 
	$sys_gëchs
 (
maû_°
 *
m
)

63 i‡(!
m
 || !m->
Àn
)

65 i‡(!
chs_˙t
) {

66 
cuºít_p
->
°©e
 = 
TS_HANG
;

67 
cuºít_p
->
ªgs
.
pc
 -= 4;

68 
¶ìp_pid
 = 
cuºít_p
->
pid
;

69 
	`scheduÀ
 ();

72 i‡(
m
->
Àn
 > 
chs_˙t
)

73 
m
->
Àn
 = 
chs_˙t
 - 1;

74 
	`mem˝y
 ((*)
m
->
§c
,
chs_buf
,m->
Àn
);

75 
chs_˙t
 = 0;

76  (
m
->
Àn
);

77 
	}
}

	@kernel/drv/dma/dma.c

1 
	~<2440/drvs.h
>

2 
	~<sys/ty≥s.h
>

5 
i32
 
	$dma_c⁄f
 ()

8 
	}
}

	@kernel/drv/keys.c

1 
	~<2440/drvs.h
>

2 
	~<as£π.h
>

3 
	~<2440/drvs.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<sys/ty≥s.h
>

7 
LOCAL


8 
	$key3_¥oc
 ()

10 
	`¥ötk
 ( "3" );

11 
rSRCPND
 |= (1<<2);

12 
rINTPND
 |= (1<<2);

13 
	}
}

15 
LOCAL


16 
	$key1_¥oc
 ()

18 
rSRCPND
 |= (1<<1);

19 
rINTPND
 |= (1<<1);

20 
	}
}

22 
LOCAL


23 
	$key2_¥oc
 ()

25 
rEINTPEND
 |= 1<<4;

26 
rSRCPND
 |= (1<<4);

27 
rINTPND
 |= (1<<4);

28 
	}
}

31 
LOCAL


32 
	$key4_¥oc
 ()

34 
rSRCPND
 |= (1<<0);

35 
rINTPND
 |= (1<<0);

36 
	}
}

38 
	$keys_öå_c⁄f
 ()

41 
rGPFCON
 &= ~((3<<0)|(3<<2)|(3<<4)|(3<<8));

42 
rGPFCON
 |= ((2<<0)|(2<<2)|(2<<4)|(2<<8));

45 
rEXTINT0
 &= ~((7<<0)|(7<<4)|(7<<8)|(7<<16));

46 
rEXTINT0
 |= ((3<<0)|(3<<4)|(3<<8)|(3<<16));

48 
rINTMOD
 &= ~(0x17);

50 
pISR_EINT0
 = (
u32
)
key4_¥oc
;

51 
pISR_EINT1
 = (
u32
)
key1_¥oc
;

52 
pISR_EINT2
 = (
u32
)
key3_¥oc
;

53 
pISR_EINT4_7
(
u32
)
key2_¥oc
;

56 
rSRCPND
 |= 0x17;

57 
rINTPND
 |= 0x17;

58 
rEINTPEND
 |= (1<<4);

61 
rINTMSK
 &= ~0x17;

62 
rEINTMASK
 &= ~(1<<4);

63 
	}
}

	@kernel/drv/lcd/fontlib.c

4 
	~<sys/ty≥s.h
>

32723 
RO
 
u8
 
	g__VGA
[] = {

	@kernel/drv/lcd/lcd.c

1 
	~<2440/drvs.h
>

2 
	~<°d¨g.h
>

3 
	~<°rög.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<sys/ty≥s.h
>

7 
LOCAL
 
	$lcd_p‹t_öô
 ()

9 
rGPCCON
 = 0xAAAA02A8;

10 
rGPCUP
 = 0xFFFFFFFF;

12 
rGPDCON
 = 0xAAAAAAAA;

13 
rGPDUP
 = 0xFFFFFFFF;

14 
	}
}

15 
LOCAL
 
	$lcd_mode_öô
 ()

17 
rLCDCON1
 = 
LCD_PIXCLK
 | 
LCD_MMODE
 | 
LCD_PNRMODE
 |
LCD_BPPMODE
 | 
LCD_DISABLE
;

18 
rLCDCON2
 = 
LCD_UPPER_MARGIN
 | 
LCD_LINE_VAL
 | 
LCD_LOWER_MARGIN
 | 
LCD_VPWR_LEN
 ;

19 
rLCDCON3
 = 
LCD_LEFT_MARGIN
 | 
LCD_COLS_VAL
 | 
LCD_RIGHT_MARGIN
 ;

20 
rLCDCON4
 = 
LCD_HPWR_LEN
 ;

21 
rLCDCON5
 = 
LCD_BPP24BL
 | 
LCD_FRM565
 | 
LCD_INVVCLK
 | 
LCD_INVVLINE


22 | 
LCD_INVFRAME
 | 
LCD_INVVD
 | 
LCD_INVVDEN
 | 
LCD_INVPWREN


23 | 
LCD_INVLEND
 | 
LCD_ENPWREN
 | 
LCD_ENLEND
 | 
LCD_BSWP
 | 
LCD_HSWP
;

24 
	}
}

25 
	#M5D
(
n
Ë(“)&0x1fffff)

	)

26 
	#LCD_BUF
 (
	`v2p
(
LCD_BUFFER
))

	)

27 
u16
 (*
	tPLCD_BUF
)[
LCD_XSIZE
];

28 
LOCAL
 
PLCD_BUF
 
	glcd_buf
;

30 
LOCAL
 
	$lcd_buff_öô
 ()

32 
lcd_buf
 = (
PLCD_BUF
)(
LCD_BUFFER
);

34 
rLCDSADDR1
 = ((
LCD_BUF
>>22)<<21Ë| ((
	`M5D
(LCD_BUF>>1))<<0);

35 
rLCDSADDR2
 = 
	`M5D
((
LCD_BUF
 + 
LCD_WIDTH
 * 
LCD_HEIGHT
 * 2)>>1);

36 
rLCDSADDR3
 = 
LCD_WIDTH
;

37 
	}
}

39 
	$lcd_öô
 ()

41 
	`lcd_p‹t_öô
 ();

42 
	`lcd_mode_öô
 ();

43 
	`lcd_buff_öô
 ();

45 
rLCDINTMSK
 |= 0x03;

46 
rTCONSEL
 &= ~7;

47 
rTPAL
 = 0x00;

48 
rTCONSEL
 &= ~((1<<4)|1);

49 
rLCDCON1
 |= 0x01;

51 
	}
}

53 
	$lcd_blush
–
u16
 
c
)

55 
u32
 
x
,
y
 ;

57  
y
 = 0 ; y < 
SCR_YSIZE
 ; y++ ){

58  
x
 = 0 ; x < 
SCR_XSIZE
 ; x++ )

59 
lcd_buf
[
y
][
x
] = 
c
 ;

61 
	}
}

63 
	$døw_m≠
 (
i32
 
x°¨t
,i32 
y°¨t
,i32 
width
,i32 
height
,
RO
 
u8
 *
bmp
)

65 
i32
 
x
,
y
,
c
;

66 
i32
 
i
 = 0;

68  
y
 = 0 ; y < 
height
 ; y++ ){

69  
x
 = 0 ; x < 
width
 ; x++ ){

70 
c
 = 
bmp
[
i
+1] | (bmp[i]<<8) ;

71 i‡––(
x°¨t
+
x
Ë< 
SCR_XSIZE
Ë&& ( (
y°¨t
+
y
Ë< 
SCR_YSIZE
) )

72 
lcd_buf
[
y°¨t
+
y
][
x°¨t
+
x
] = 
c
 ;

73 
i
 += 2;

76 
	}
}

78 
	$put_pix
 (
u32
 
x
,u32 
y
,u32 
c
)

80 i‡––
x
 < 
SCR_XSIZE
Ë&& ( 
y
 < 
SCR_YSIZE
) )

81 
lcd_buf
[
y
][
x
] = 
c
 ;

82 
	}
}

85 
u8
 
__VGA
[];

86 
	$lcd_put_ascii
(
u32
 
x
,u32 
y
,
u8
 
ch
,u32 
c
,u32 
bk_c
,u32 
°
)

88 
u16
 
i
,
j
;

89 
u8
 *
pZK
,
mask
,
buf
;

91 
pZK
 = &
__VGA
[
ch
*16];

92  
i
 = 0 ; i < 16 ; i++ ) {

93 
mask
 = 0x80;

94 
buf
 = 
pZK
[
i
];

95  
j
 = 0 ; j < 8 ; j++ ) {

96 if–
buf
 & 
mask
 )

97 
	`put_pix
(
x
+
j
,
y
+
i
,
c
);

99 if–!
°
 )

100 
	`put_pix
(
x
+
j
,
y
+
i
,
bk_c
);

101 
mask
 = mask >> 1;

104 
	}
}

106 
LOCAL
 
u32
 
	gpix_pos
 = 0;

108 
i32
 
	$lcd_putch
 (
u32
 
c
,u32 
bk_c
,u32 
°
,
i8
 
ch
)

110 
ch
)

113 
pix_pos
 = (pix_po†/ 
LCD_XSIZE
 + 1) * LCD_XSIZE;

116 
pix_pos
 +4 * 
LCD_ASCII_X
;

119 
pix_pos
 -
LCD_ASCII_X
;

122 
	`lcd_put_ascii
 (
pix_pos
%
LCD_XSIZE
,’ix_pos/LCD_XSIZE)*
LCD_ASCII_Y
,
ch
,
c
,
bk_c
,
°
);

123 
pix_pos
 +
LCD_ASCII_X
;

126  (
ch
);

127 
	}
}

129 
i32
 
	$lcd_¥ötf
 (
u32
 
c
,u32 
bk_c
,u32 
°
,
i8
 *
fmt
,...)

131 
va_li°
 
≠
;

132 
i32
 
i
 = 0 ;

133 
i8
 
°rög
[1024] = {0},*
p
 = 0;

134 
p
 = 
°rög
;

136 
	`va_°¨t
(
≠
,
fmt
);

137 
i
 = 
	`v•rötf
(
°rög
,
fmt
,
≠
);

139 *
p
)

140 
	`lcd_putch
 (
c
,
bk_c
,
°
,*
p
++);

141 
	`va_íd
(
≠
);

142  (
i
);

143 
	}
}

145 
u32
 
	$lcd_gŸoxy
 (
i32
 
x
,i32 
y
)

147 
pix_pos
 = (
x
 * 
LCD_ASCII_X
 + 
y
 * 
LCD_XSIZE
 );

148  (
pix_pos
);

149 
	}
}

	@kernel/drv/led.c

1 
	~<2440/2440addr.h
>

2 
	~<sys/ty≥s.h
>

4 
	$Àd_c⁄f
 ()

6 
rGPBCON
 &= ~((3<<10)|(3<<12)|(3<<14)|(3<<16));

7 
rGPBCON
 |= ((1<<10)|(1<<12)|(1<<14)|(1<<16));

8 
	}
}

10 
	$Àd_›t
 (
i32
 
Àd_ƒ
,i32 
vÆ
)

12 
Àd_ƒ
 &= 3;

13 
vÆ
 = (val > 0);

14 
Àd_ƒ
 += 5;

16 i‡(
rGPBDAT
 & (1 << 
Àd_ƒ
)) {

17 i‡(!
vÆ
)

18 
rGPBDAT
 &~(1<<
Àd_ƒ
);

20 i‡(
vÆ
)

21 
rGPBDAT
 |(1<<
Àd_ƒ
);

23 
	}
}

	@kernel/drv/rtc.c

1 
	~<2440/drvs.h
>

2 
	~<°rög.h
>

3 
	~<eˇ£y/maû.h
>

4 
	~<eˇ£y/sy¢o.h
>

5 
	~<eˇ£y/πc.h
>

6 
	~<sys/ty≥s.h
>

8 
i8
* 
	$gë_d©e
 (
i8
 *
buf„r
,
u32
 
size
)

10 i‡(
size
 < 30Ë 
NULL
;

12 
rRTCCON
 |= 0x01;

14 
	`•rötf
 ( 
buf„r
,"20%02d-%02d-%02d DAY:%d %02d:%02d:%02d ",

15 
	`BCD2O
(
rBCDYEAR
),BCD2O(
rBCDMON
),BCD2O(
rBCDDATE
),

16 
	`BCD2O
(
rBCDDAY
),

17 
	`BCD2O
(
rBCDHOUR
),BCD2O(
rBCDMIN
),BCD2O(
rBCDSEC
) );

18 
rRTCCON
 &= ~0x01;

20 
buf„r
 [
size
-1] ='\0';

21  (
buf„r
);

22 
	}
}

24 
i32
 
	$sys_gëtime
 (
maû_°
 *
m
)

26 i‡(!
m
 || (
rRTCCON
 & 0x01))

28 i‡(!
m
->
§c
 || !m->
Àn
)

30 
sy°m_°
 *
p
 = (sy°m_°*)(
m
->
§c
);

32 
p
->
yór
 = 
	`BCD2O
(
rBCDYEAR
);

33 
p
->
m⁄
 = 
	`BCD2O
(
rBCDMON
);

34 
p
->
d©e
 = 
	`BCD2O
(
rBCDDATE
);

35 
p
->
day
 = 
	`BCD2O
(
rBCDDAY
);

36 
p
->
hour
 = 
	`BCD2O
(
rBCDHOUR
);

37 
p
->
mö
 = 
	`BCD2O
(
rBCDMIN
);

38 
p
->
£c
 = 
	`BCD2O
(
rBCDSEC
);

40 
rRTCCON
 &= ~0x01;

42 
	}
}

44 
i32
 
	$sys_£âime
 (
maû_°
 *
m
)

46 i‡(!
m
 || (
rRTCCON
 & 0x01))

48 i‡(!
m
->
§c
 || !m->
Àn
)

50 
sy°m_°
 *
p
 = (sy°m_°*)(
m
->
§c
);

52 
rBCDYEAR
 = 
	`O2BCD
(
p
->
yór
);

53 
rBCDMON
 = 
	`O2BCD
(
p
->
m⁄
);

54 
rBCDDATE
 = 
	`O2BCD
(
p
->
d©e
);

55 
rBCDDAY
 = 
	`O2BCD
(
p
->
day
);

56 
rBCDHOUR
 = 
	`O2BCD
(
p
->
hour
);

57 
rBCDMIN
 = 
	`O2BCD
(
p
->
mö
);

58 
rBCDSEC
 = 
	`O2BCD
(
p
->
£c
);

60 
rRTCCON
 &= ~0x01;

62 
	}
}

	@kernel/drv/touchpl.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<eˇ£y/maû.h
>

6 
	~<sys/ty≥s.h
>

9 
LOCAL
 
u16
 
	gx
,
	gy
;

12 
	#waô_down
(Ë{
rADCTSC
 = 0xD3 | (0<<8);}

	)

13 
	#waô_up
(Ë{
rADCTSC
 = 0xD3 | (1<<8);}

	)

14 
	#auto_xy
(Ë{
rADCTSC
 = (1<<3Ë| (1<<2);}

	)

16 
LOCAL
 
	$touch_¥c
 ()

18 i‡(
rADCDAT0
 & (1<<15)) {

19 
	`waô_down
 ();

21 
	`auto_xy
 ();

22 
rADCCON
 |= 0x01;

24 
	}
}

26 
LOCAL
 
	$adc_¥c
 ()

28 
x
 = 
rADCDAT0
 & 0x3FF;

29 
y
 = 
rADCDAT1
 & 0x3FF;

30 
	`waô_up
 ();

31 
	}
}

33 
LOCAL


34 
	$adc_touch_¥c
 ()

36 i‡(
rSUBSRCPND
 & (1<<9)) {

37 
	`touch_¥c
 ();

38 
rSUBSRCPND
 |= (1<<9);

40 i‡(
rSUBSRCPND
 & (1<<10)){

41 
	`adc_¥c
 ();

42 
rSUBSRCPND
 |= (1<<10);

44 
rSRCPND
 |= (1<<31);

45 
rINTPND
 |= (1<<31);

46 
	}
}

49 
	$touch∂_öô
 ()

52 
rADCCON
 = (1<<14)|(
PRSCVL
<<6);

53 
rADCDLY
 = 50000;

54 
	`waô_down
 ();

56 
rSRCPND
 |= (1<<31);

57 
rSUBSRCPND
 |= (1<<9);

58 
rSUBSRCPND
 |= (1<<10);

59 
rINTPND
 |= (1<<31);

61 
pISR_ADC
 = (
u32
)&
adc_touch_¥c
;

63 
rINTSUBMSK
 &= ~(1<<9);

64 
rINTSUBMSK
 &= ~(1<<10);

65 
rINTMSK
 &= ~(1<<31);

66 
	}
}

68 
u32
 
	$sys_gëpos
 (
maû_°
 *
m
)

70 i‡(!
m
)  (0);

71 *(
u16
 *)(
m
->
§c
Ë
x
;

72 *(
u16
 *)(
m
->
§c
+2Ë
y
;

74 
	}
}

	@kernel/drv/usb/usbm.c

1 
	~<2440/drvs.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<as£π.h
>

4 
	~<eˇ£y/pcb.h
>

5 
	~<2440/ˇche.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<°rög.h
>

	@kernel/except.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/kî√l.h
>

4 
	~<°rög.h
>

5 
	~<eˇ£y/pcb.h
>

6 
	~<sys/ty≥s.h
>

8 
TASK
 *
cuºít_p
 ;

9 
i32
 
∑nic
 (*
fmt
,...);

11 
	$do_undef_ö°ru˘i⁄
 ()

13 
u32
 
addr
 = 
cuºít_p
->
ªgs
.
pc
;

14 
	`∑nic
 ( "undeföedÉx˚±i⁄ : 0x%0x !\¿",
addr
 );

15 
	}
}

17 
do_sys_ˇŒ
 ();

19 
	$do_¥e„˘h_abt
 ()

21 
u32
 
addr
 = 
cuºít_p
->
ªgs
.
pc
;

22 
	`∑nic
 ( "pre-fetchábort :"

25 
cuºít_p
->
pid
,

26 
addr
 );

27 
	}
}

29 
	$do_ª£rved
 ()

31 
	`∑nic
 ( "reserved !\n" );

32 
	}
}

34 
	$do_fiq
 ()

36 
	`∑nic
 ( "fiq isÇot supportedÇow !!\n" );

37 
	}
}

	@kernel/exit.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/kî√l.h
>

5 
i32
 
	$sys_exô
 (
i32
 
exô_code
)

9 
	}
}

	@kernel/ipc/kmail.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/maû.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<eˇ£y/pcb.h
>

6 
	~<sys/ty≥s.h
>

8 
	#READ
 1

	)

9 
	#WRITE
 0

	)

15 
TASK
 *
cuºít_p
;

17 
LOCAL
 
i32
 
	$åy_to_£nd
 (
maû_°
 *
m
)

19 
maû_°
 *
√xt
 = &(
èsk_°
[
m
->
to
]->
maû
);

20 
√xt
->
to
 !
NO_TASK
) {

21 i‡(
m
 =
√xt
)  (1);

22 
√xt
 = &((
èsk_°
 [√xt->
to
])->
maû
);

25 
	}
}

27 
	$dumpm
 (
maû_°
 *
m
)

29 
	`¥ötk
 ("fromÖid = %d \n"

34 ,
m
->
‰om
,m->
to
,m->
msg
.
umsg
,m->
§c
,m->
Àn


36 
	}
}

38 
i32
 
do_sys_msg
 (
maû_°
 *
m
);

39 
swôch_to
 (
TASK
 *
to
);

41 
i32
 
	$sys_£ndm
 (
maû_°
 *
m
)

43 i‡(!
m
)  (0);

44 
m
->
‰om
 = 
cuºít_p
->
pid
;

45 i‡(
m
->
to
 < 0 || m->tÿ> 
MAX_TASKS


46 || 
m
->
‰om
 =m->
to
 || !m->‰om || !
èsk_°
[m->to])

48 i‡(!
m
->
to
)

49  (
m
->
msg
.
ªt
 = 
	`do_sys_msg
 (m));

50 i‡(
	`åy_to_£nd
 (
m
)) {

51 
	`¥ötk
 ( "ipc:Üoop mail send denied !\n" );

54 
cuºít_p
->
maû
 = *
m
;

56 
PCB
 *
p
 = 
èsk_°
[
m
->
to
];

57 i‡(!
p
->
hód
) {

58 
p
->
èû
 =Ö->
hód
 = 
cuºít_p
;

59 
p
->
èû
->
√xt
 = (*)0;

62 
p
->
èû
->
√xt
 = 
cuºít_p
;

63 
p
->
èû
 = 
cuºít_p
;

65 
cuºít_p
->
°©e
 = 
TS_SEND
;

66 
	`swôch_to
 (
èsk_°
[
m
->
to
]);

67 
m
->
msg
.
ªt
 = 1;

69 
	}
}

71 
i32
 
	$phy§w
 (
i32
 
rw
,
u8
 *
addr1
,i32 
pid
,

72 
u8
 *
addr2
,
i32
 
size
)

74 i‡(
pid
 < 0 ||Öid > 
MAX_TASKS


75 || !
èsk_°
[
pid
] || 
size
 < 0 || !
addr1
 || !
addr2
)

78 
VAR
 
u32
 *
∑ge_dú
,*
∑ge_tbl
,*
∑ge
,
vaddr
 = (u32)
addr2
;

79 
i32
 
l1_idx
,
l2_idx
,
off£t
,
˙t
 = 0,
ch¨s
 = 0;

80 
u8
 *
p
 = (*)0;

82 
∑ge_dú
 = (
VAR
 
u32
*)(
èsk_°
[
pid
]->
âb_ba£
);

83 
off£t
 = (
vaddr
 & 0xFFF);

84 
size
 > 0) {

85 
l1_idx
 = 
vaddr
 >> 20;

86 
l2_idx
 = (
vaddr
 >> 12) & 0xFF;

88 
ch¨s
 = 0x1000 - 
off£t
;

89 i‡(
ch¨s
 > 
size
)

90 
ch¨s
 = 
size
;

91 
size
 -
ch¨s
 ;

92 
˙t
 +
ch¨s
;

94 i‡(!(
∑ge_dú
[
l1_idx
] & ~0x3FF))

97 
∑ge_tbl
 = (
VAR
 
u32
 *)(
	`p2v
(
∑ge_dú
 [
l1_idx
] & ~0x3FF));

98 i‡(!(
∑ge_tbl
[
l2_idx
] & ~0xFFF)) ;

100 
∑ge
 = (
VAR
 
u32
 *)(
	`p2v
(
∑ge_tbl
 [
l2_idx
] & ~0xFFF));

101 
p
 = (
u8
*)
∑ge
 + 
off£t
;

102 i‡(
rw
 =
READ
)

103 
ch¨s
 -- > 0Ë*
addr1
 ++ = *
p
 ++;

105 
ch¨s
 -- > 0Ë*
p
 ++ = *
addr1
 ++;

108 
off£t
 = 0;

109 
vaddr
 += 0x1000;

111  (
˙t
);

112 
	}
}

114 
i32
 
scheduÀ
 ();

117 
i32
 
	$sys_ªcvm
 (
maû_°
 *
m
)

119 i‡(!
m
)  (0);

120 
i32
 
‰om
 = 
m
->from;

121 i‡(
‰om
 =
TASK_ANY
) {

122 
TASK
 *
hód
 = 
cuºít_p
->head;

123 i‡(!
hód
) {

124 
cuºít_p
->
°©e
 = 
TS_RECV
;

125 
cuºít_p
->
ªgs
.
pc
 -= 4;

126 
	`scheduÀ
 ();

130 i‡(!
m
->
§c
 || !m->
Àn
) {

131 
	`¥ötk
 ( "ipc :Ñecvm buffer isÉmpty !\n" );

135 
m
->
Àn
 = 
	`phy§w
 (
READ
,m->
§c
,
hód
->
pid
,

136 
hód
->
maû
.
§c
,hód->maû.
Àn
);

137 
m
->
msg
.
umsg
 = 
hód
->
maû
.msg.umsg;

138 
m
->
‰om
 = 
hód
->
pid
;

141 
	`¥ötk
 ( "uniqueÑecvm isÇot implemted !\n" );

144 i‡(
‰om
 <0 || from > 
MAX_TASKS
 || !
èsk_°
[from])

147 
	}
}

149 
i32
 
	$sys_ª∂ym
 (
maû_°
 *
m
)

151 i‡(!
m
)  (0);

152 
m
->
‰om
 = 
cuºít_p
->
pid
;

153 i‡(
m
->
to
 < 0 || m->tÿ> 
MAX_TASKS


154 || 
m
->
‰om
 =m->
to
 || !m->‰om || !
èsk_°
[m->to])

156 
TASK
 *
p
 = 
cuºít_p
->
hód
;

157 i‡(!
p
)

160 i‡(!
m
->
§c
 || !m->
Àn
) {

161 
	`¥ötk
 ( "ipc :Ñeplym buffer isÉmpty !\n" );

164 
p
->
maû
.
msg
.
ªt
 = 
m
->msg.
umsg
;

166 
m
->
msg
.
ªt
 = 
	`phy§w
 (
WRITE
,m->
§c
,
p
->
pid
,

167 
p
->
maû
.
§c
,p->maû.
Àn
);

169 
p
->
°©e
 = 
TS_RUN
;

170 
p
->
maû
.
to
 = 
NO_TASK
;

171 
cuºít_p
->
hód
 = 
p
->
√xt
;

173 i‡(
p
->
√xt
 == (*)0) {

174 
cuºít_p
->
hód
 = cuºít_p->
èû
 = (*)0;

175 
cuºít_p
->
√xt
 = (*)0;

179 
	}
}

182 
i32
 
	$sys_po°m
 (
maû_°
 *
m
)

185 
	}
}

187 
i32
 
	$sys_pickm
 (
maû_°
 *
m
)

190 
	}
}

	@kernel/kmain.c

1 
	~<2440/drvs.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<as£π.h
>

4 
	~<eˇ£y/pcb.h
>

5 
	~<2440/ˇche.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<°rög.h
>

9 
PCB
 *
	gcuºít_p
 = (*)0;

10 
TASK
 *
èsk_°
[];

11 
LOCAL
 
IdÀ
 ();

13 
u32
 
NR_TASKS
 ;

14 
ª°¨t
 ();

15 
°¨t_mmu
 ();

16 
u¨t_i32r_c⁄f
 (
u32
 
¥c
);

17 
u¨t_ªcv
 ();

18 
i32
 
u¨t_¥ötf
 (
RO
 
i8
 *
fmt
,...);

19 
i32
 
öô_mm≠
 ();

20 
öô_i32r_ve˘‹
 ();

21 
öô_èsk_°
 ();

22 
öô_timî
 (
i32
 
ƒ
);

23 
öô_maû
 ();

24 
ªbuûd_mmu
 ();

25 
öô_∑ge_m≠
 ();

26 
keys_i32r_c⁄f
 ();

27 
£tup_sysˇŒs
 ();

28 
blk_drv_öô
 ();

29 
öô_èsk
 (
u32
,u32);

30 
i32
 
¸óãp
 (
RO
 
i8
*,i32,i32);

32 
u32
 
tPCLK
,

33 
tHCLK
,

34 
tFCLK
,

35 
tCPU_FREQ
,

36 
tUPLL
,

37 
tUCLK
 ;

39 
öô_öå_ve˘‹
 ();

40 
i8
* 
gë_d©e
 (i8 *
buf„r
,
u32
 
size
);

41 
u¨t_öå_c⁄f
 (
u32
 
¥c
);

42 
keys_öå_c⁄f
 ();

43 
ªad_ømdisk
 ();

45 
	$kî√l_°¨t
 ()

47 
	`¥ötk
 ( "$ > Yes,weáre in kernel spaceÇow !\n" );

48 
	`ªbuûd_mmu
 ();

49 
	`¥ötk
 ( "$ > MMUÑebuilt done ! !\n" );

51 
	`ßve_˝u_bus_‰eq
 ();

52 
	`¥ötk
 ("$ > CPU FRQ : %d MHZ ,PCLK : %d MHZ ,HCLK : %d MHZ ,UCLK : %d MHZ !\n",

53 
tCPU_FREQ
/1000000,
tPCLK
/1000000,
tHCLK
/1000000,
tUCLK
/1000000);

55 
	`c›y_«nd_to_sdøm
 (
VECTOR_TBL
,
VECT_IMG
,
VECT_SIZE
);

56 
	`£t_high_ve˘‹
 ();

57 
	`¥ötk
 ( "$ > High vector init done !\n" );

59 
	`mem£t
 ((*)
KERNEL_SPACE_START
,0,0x1000);

60 
	`öô_∑ge_m≠
 ();

61 
	`¥ötk
 ( "$ >Öage map init done !\n" );

63 
	`öô_öå_ve˘‹
 ();

64 
	`¥ötk
 ( "$ > vector interruptÅable init done !\n");

66 
	`öô_timî
 (0);

67 
	`¥ötk
 ( "$ > Timer 0 init done !\n");

69 
i8
 
tm
[40] = {0};

70 
	`gë_d©e
 (
tm
,40);

71 
	`¥ötk
 ( "$ > RTC : cuºíàtime: %s\n",
tm
 );

73 
	`keys_öå_c⁄f
 ();

74 
	`¥ötk
 ( "$ > Keys hit i32r init done !\n");

76 
	`öô_èsk_°
 ();

77 
	`¥ötk
 ( "$ >Åask structs init done !\n");

79 
	`£tup_sysˇŒs
 ();

80 
	`¥ötk
 ( "$ > sys callÅables init done !\n");

82 
	`u¨t_öå_c⁄f
 ((
u32
)
u¨t_ªcv
);

83 
	`¥ötk
 ( "$ > key hit input okÇow ! !\n");

85 
	`lcd_öô
 ();

86 
	`¥ötk
 ( "$ > TFT init done !\n" );

87 
	`lcd_blush
 (0xFF2F);

90 
	`touch∂_öô
 ();

91 
	`¥ötk
 ( "$ > TouchÖannel init done !\n" );

93 
	`blk_drv_öô
 ();

94 
	`¥ötk
 ( "$ > blk driver init done !\n" );

97 
	`öô_èsk
 (
KERNEL_TTB
,(
u32
)&
IdÀ
);

98 
	`¥ötk
 ( "$ > idleÅask init done !\n");

100 
	`¥ötk
 ( "$ >Öid = %d i†¸óãd! \n",
	`¸óãp
 ("fs",4,0));

101 
	`¥ötk
 ( "$ >Öid = %d i†¸óãd! \n",
	`¸óãp
 ("sh",4,0));

103 
	`¥ötk
 ( "$ >ÑeadÑamdisk image !\n" );

104 
	`ªad_ømdisk
 ();

106 
k_ªíãr
 = 1;

107 
cuºít_p
 = 
èsk_°
[0];

108 
	`ª°¨t
 ();

109 
	}
}

111 
	$IdÀ
 ()

114 
	}
}

	@kernel/kmalloc.c

1 
	~<2440/p‹ts.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

11 
	sli°_hód
 {

12 
li°_hód
 *
	m√xt
, *
	m¥ev
;

20 
LOCAL
 
INLINE
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

22 
li°
->
√xt
 =Üist;

23 
li°
->
¥ev
 =Üist;

24 
	}
}

33 
LOCAL
 
INLINE
 
	$__li°_add
(
li°_hód
 *
√w_l°
,

34 
li°_hód
 *
¥ev
,

35 
li°_hód
 *
√xt
)

37 
√xt
->
¥ev
 = 
√w_l°
;

38 
√w_l°
->
√xt
 =Çext;

39 
√w_l°
->
¥ev
 =Örev;

40 
¥ev
->
√xt
 = 
√w_l°
;

41 
	}
}

46 
LOCAL
 
INLINE
 
	$li°_add
(
li°_hód
 *
√w_l°
, li°_hód *
hód
)

48 
	`__li°_add
(
√w_l°
, 
hód
, hód->
√xt
);

49 
	}
}

54 
LOCAL
 
INLINE
 
	$li°_add_èû
(
li°_hód
 *
√w_l°
, li°_hód *
hód
)

56 
	`__li°_add
(
√w_l°
, 
hód
->
¥ev
, head);

57 
	}
}

66 
LOCAL
 
INLINE
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

68 
√xt
->
¥ev
 =Örev;

69 
¥ev
->
√xt
 =Çext;

70 
	}
}

75 
LOCAL
 
INLINE
 
	$li°_dñ
(
li°_hód
 * 
íåy
)

77 
	`__li°_dñ
(
íåy
->
¥ev
,íåy->
√xt
);

78 
	}
}

88 
LOCAL
 
INLINE
 
	$li°_ªmove_chaö
(
li°_hód
 *
ch
,li°_hód *
˘
)

91 
ch
->
¥ev
->
√xt
=
˘
->next;

92 
˘
->
√xt
->
¥ev
=
ch
->prev;

93 
	}
}

101 
LOCAL
 
INLINE
 
	$li°_add_chaö
(
li°_hód
 *
ch
,li°_hód *
˘
,li°_hód *
hód
)

103 
ch
->
¥ev
=
hód
;

104 
˘
->
√xt
=
hód
->next;

105 
hód
->
√xt
->
¥ev
=
˘
;

106 
hód
->
√xt
=
ch
;

107 
	}
}

114 
LOCAL
 
INLINE
 
	$li°_add_chaö_èû
(
li°_hód
 *
ch
,li°_hód *
˘
,li°_hód *
hód
)

116 
ch
->
¥ev
=
hód
->prev;

117 
hód
->
¥ev
->
√xt
=
ch
;

118 
hód
->
¥ev
=
˘
;

119 
˘
->
√xt
=
hód
;

120 
	}
}

125 
LOCAL
 
INLINE
 
i32
 
	$li°_em±y
(
RO
 
li°_hód
 *
hód
)

127  
hód
->
√xt
 == head;

128 
	}
}

130 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
u32
Ë&((TYPE *)0)->MEMBER)

	)

136 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

137 
RO
 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

138 (
ty≥
 *)–(
i8
 *)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

140 
	#li°_íåy
(
±r
,
ty≥
,
membî
) \

141 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

143 
	#li°_f‹_óch
(
pos
, 
hód
) \

144 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

147 
	#_MEM_END
 
MAP_AREA_END


	)

148 
	#_MEM_START
 
MAP_AREA_START


	)

150 
	#PAGE_SHIFT
 (12)

	)

151 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
)

	)

152 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

154 
	#KERNEL_MEM_END
 (
_MEM_END
)

	)

158 
	#KERNEL_PAGING_START
 ((
_MEM_START
+(~
PAGE_MASK
))&((PAGE_MASK))Ë

	)

159 
	#KERNEL_PAGING_END
 (
KERNEL_MEM_END
)

	)

164 
	#KERNEL_PAGE_NUM
 (
PAGE_STRUCTS_NR
)

	)

168 
	#KERNEL_PAGE_END
 (
PAGE_STRUCTS_START
+
PAGE_STRUCTS_SIZE
)

	)

169 
	#KERNEL_PAGE_START
 (
PAGE_STRUCTS_START
)

	)

172 
	#PAGE_AVAILABLE
 0x00

	)

173 
	#PAGE_DIRTY
 0x01

	)

174 
	#PAGE_PROTECT
 0x02

	)

175 
	#PAGE_BUDDY_BUSY
 0x04

	)

176 
	#PAGE_IN_CACHE
 0x08

	)

179 
	s∑ge
 {

180 
u32
 
	mvaddr
;

181 
u32
 
	mÊags
;

182 
i32
 
	m‹dî
;

183 
u32
 
	mcou¡î
;

184 
kmem_ˇche
 *
	mˇchï
;

185 
li°_hód
 
	mli°
;

188 
	#MAX_BUDDY_PAGE_NUM
 (9)

189 
	#AVERAGE_PAGE_NUM_PER_BUDDY
 (
KERNEL_PAGE_NUM
/
MAX_BUDDY_PAGE_NUM
)

	)

190 
	#PAGE_NUM_FOR_MAX_BUDDY
 ((1<<
MAX_BUDDY_PAGE_NUM
)-1)

	)

192 
li°_hód
 *
	g∑ge_buddy
 = (*)0;

196 
∑ge
 *
	$vút_to_∑ge
(
u32
 
addr
)

198 
u32
 
i
;

199 
i
=((
addr
)-
KERNEL_PAGING_START
)>>
PAGE_SHIFT
;

200 if(
i
>
KERNEL_PAGE_NUM
)

201  
NULL
;

202  (
∑ge
 *)
KERNEL_PAGE_START
+
i
;

203 
	}
}

205 
	$öô_∑ge_m≠
()

207 
∑ge_buddy
 = (
li°_hód
*)(
KERNEL_PAGE_END
);

209 
i32
 
i
;

210 
∑ge
 *
pg
=(∑gê*)
KERNEL_PAGE_START
;

212 
i
=0;i<
MAX_BUDDY_PAGE_NUM
;i++)

213 
	`INIT_LIST_HEAD
(&
∑ge_buddy
[
i
]);

214 
i
=0;i<(
KERNEL_PAGE_NUM
);
pg
++,i++){

216 
pg
->
vaddr
=
KERNEL_PAGING_START
+
i
*
PAGE_SIZE
;

217 
pg
->
Êags
=
PAGE_AVAILABLE
;

218 
pg
->
cou¡î
=0;

219 
	`INIT_LIST_HEAD
(&(
pg
->
li°
));

221 if(
i
<(
KERNEL_PAGE_NUM
&(~
PAGE_NUM_FOR_MAX_BUDDY
))){

226 if((
i
&
PAGE_NUM_FOR_MAX_BUDDY
)==0)

227 
pg
->
‹dî
=
MAX_BUDDY_PAGE_NUM
-1;

229 
pg
->
‹dî
=-1;

230 
	`li°_add_èû
(&(
pg
->
li°
),&
∑ge_buddy
[
MAX_BUDDY_PAGE_NUM
-1]);

233 
pg
->
‹dî
=0;

234 
	`li°_add_èû
(&(
pg
->
li°
),&
∑ge_buddy
[0]);

237 
	}
}

242 
	#BUDDY_END
(
x
,
‹dî
Ë((x)+(1<<(‹dî))-1)

	)

243 
	#NEXT_BUDDY_START
(
x
,
‹dî
Ë((x)+(1<<(‹dî)))

	)

244 
	#PREV_BUDDY_START
(
x
,
‹dî
Ë((x)-(1<<(‹dî)))

	)

248 
∑ge
 *
	$gë_∑ges_‰om_li°
(
i32
 
‹dî
)

250 
i32
 
√w‹dî
=
‹dî
;

251 
∑ge
 *
pg
;

252 
li°_hód
 *
é°
,*
é°1
;

253 ;
√w‹dî
<
MAX_BUDDY_PAGE_NUM
;neworder++){

254 if(
	`li°_em±y
(&
∑ge_buddy
[
√w‹dî
])){

257 
pg
=
	`li°_íåy
(
∑ge_buddy
[
√w‹dî
].
√xt
,
∑ge
,
li°
);

258 
é°
=&(
	`BUDDY_END
(
pg
,
√w‹dî
)->
li°
);

259 
é°
->
√xt
->
¥ev
=&
∑ge_buddy
[
√w‹dî
];

260 
∑ge_buddy
[
√w‹dî
].
√xt
=
é°
->next;

261 
OUT_OK
;

264  
NULL
;

265 
OUT_OK
:

266 
√w‹dî
--;√w‹dî>=
‹dî
;neworder--){

267 
é°1
=&(
	`BUDDY_END
(
pg
,
√w‹dî
)->
li°
);

268 
é°
=&(
pg
->
li°
);

269 
pg
=
	`NEXT_BUDDY_START
’g,
√w‹dî
);

270 
	`li°_íåy
(
é°
,
∑ge
,
li°
)->
‹dî
=
√w‹dî
;

271 
	`li°_add_chaö_èû
(
é°
,
é°1
,&
∑ge_buddy
[
√w‹dî
]);

273 
pg
->
Êags
|=
PAGE_BUDDY_BUSY
;

274 
pg
->
‹dî
=order;

275  
pg
;

276 
	}
}

278 
	$put_∑ges_to_li°
(
∑ge
 *
pg
,
i32
 
‹dî
)

280 
∑ge
 *
çªv
,*
äext
;

281 if(!(
pg
->
Êags
&
PAGE_BUDDY_BUSY
))

283 
pg
->
Êags
&=~(
PAGE_BUDDY_BUSY
);

285 ;
‹dî
<
MAX_BUDDY_PAGE_NUM
;order++){

286 
äext
=
	`NEXT_BUDDY_START
(
pg
,
‹dî
);

287 
çªv
=
	`PREV_BUDDY_START
(
pg
,
‹dî
);

288 if((!(
äext
->
Êags
&
PAGE_BUDDY_BUSY
))&&—√xt->
‹dî
==order)){

289 
pg
->
‹dî
++;

290 
äext
->
‹dî
=-1;

291 
	`li°_ªmove_chaö
(&(
äext
->
li°
),&(
	`BUDDY_END
—√xt,
‹dî
)->list));

292 
	`BUDDY_END
(
pg
,
‹dî
)->
li°
.
√xt
=&(
äext
->list);

293 
äext
->
li°
.
¥ev
=&(
	`BUDDY_END
(
pg
,
‹dî
)->list);

295 }if((!(
çªv
->
Êags
&
PAGE_BUDDY_BUSY
))&&—¥ev->
‹dî
==order)){

296 
pg
->
‹dî
=-1;

298 
	`li°_ªmove_chaö
(&(
pg
->
li°
),&(
	`BUDDY_END
’g,
‹dî
)->list));

299 
	`BUDDY_END
(
çªv
,
‹dî
)->
li°
.
√xt
=&(
pg
->list);

300 
pg
->
li°
.
¥ev
=&(
	`BUDDY_END
(
çªv
,
‹dî
)->list);

302 
pg
=
çªv
;

303 
pg
->
‹dî
++;

309 
	`li°_add_chaö
(&(
pg
->
li°
),&((
äext
-1)->li°),&
∑ge_buddy
[
‹dî
]);

310 
	}
}

312 *
	$∑ge_addªss
(
∑ge
 *
pg
)

314  (*)(
pg
->
vaddr
);

315 
	}
}

317 
∑ge
 *
	$Æloc_∑ges
(
u32
 
Êag
,
i32
 
‹dî
)

319 
∑ge
 *
pg
;

320 
i32
 
i
;

321 
pg
=
	`gë_∑ges_‰om_li°
(
‹dî
);

322 if(
pg
==
NULL
)

323  
NULL
;

324 
i
=0;i<(1<<
‹dî
);i++){

325 (
pg
+
i
)->
Êags
|=
PAGE_DIRTY
;

327  
pg
;

328 
	}
}

330 
	$‰ì_∑ges
(
∑ge
 *
pg
,
i32
 
‹dî
)

332 
i32
 
i
;

333 
i
=0;i<(1<<
‹dî
);i++)

334 (
pg
+
i
)->
Êags
&=~
PAGE_DIRTY
;

335 
	`put_∑ges_to_li°
(
pg
,
‹dî
);

336 
	}
}

338 *
	$gë_‰ì_∑ges
(
u32
 
Êag
,
i32
 
‹dî
)

340 
∑ge
 *Öage;

341 
∑ge
 = 
	`Æloc_∑ges
(
Êag
, 
‹dî
);

342 i‡(!
∑ge
)

343  
NULL
;

344 *
addr
 = 
	`∑ge_addªss
 (
∑ge
);

345 
	`mem£t
 (
addr
,0,1<<(12+
‹dî
));

346  (
addr
);

347 
	}
}

349 
	$put_‰ì_∑ges
(*
addr
,
i32
 
‹dî
)

351 
	`‰ì_∑ges
(
	`vút_to_∑ge
((
u32
)
addr
),
‹dî
);

352 
	}
}

354 
u32
 
	$föd_‰ì_∑ge
 ()

356  ((
u32
)
	`gë_‰ì_∑ges
 (0,0));

357 
	}
}

359 
u32
 
	$föd_‰ì_∑ge_dú
 ( )

361 
i32
 
addr
,
‹dî
 = 2;

363 (0x3FFF & (
addr
 = (
u32
)
	`gë_‰ì_∑ges
 (0,
‹dî
))))

364 
	`put_‰ì_∑ges
 ((*)
addr
,
‹dî
);

365  (
addr
);

366 
	}
}

369 
i32
 
	$gë_‹dî
 (
u32
 
size
)

371 i‡(!
size
)  (-1);

372 
i32
 
‹dî
 = 0;

373  (1<<(
‹dî
+12)Ë< 
size
 ) order ++;

374 i‡(
‹dî
 > 9)

376  (
‹dî
);

377 
	}
}

	@kernel/page/abt.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<2440/p‹ts.h
>

4 
	~<2440/ˇche.h
>

5 
	~<as£π.h
>

7 
LOCAL


8 
u32
 
	$gë_f§_ty≥
 ()

10 
u32
 
f§_ty≥
;

11 
__asm__
 
	`__VAR__
 (

13 :"Ù"(
f§_ty≥
)

15  (
f§_ty≥
);

16 
	}
}

18 
LOCAL


19 
u32
 
	$gë_f§_addr
 ()

21 
u32
 
f§_addr
;

22 
__asm__
 
	`__VAR__
 (

24 :"Ù"(
f§_addr
)

26  (
f§_addr
);

27 
	}
}

29 
	$i32
 (*
	tFSR_PROC
Ë(
	tRO
 
	ti8
 *
	tdesc
,
	tu32
 
	tty≥
,u32 
	taddr
);

31 
	sf§_°ru˘
 {

32 
i32
 
f§_idx
;

33 
FSR_PROC
 
f§_¥oc
;

34 
i8
* 
desc
;

37 
i32
 
	`do_ve˘_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

38 
i32
 
	`do_Æign_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

39 
i32
 
	`do_ãrm_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

40 
i32
 
	`do_ext_abt
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

41 
i32
 
	`do_£˘_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

42 
i32
 
	`do_∑ge_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
);

43 
i32
 
	`do_å™s_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
vaddr
);

44 
i32
 
	`do_≥rm_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
vaddr
);

46 
LOCAL
 
f§_°ru˘
 
f§_°
 [] = {

47 {0x00,
do_ve˘_Áu…
, "vectorÉxception"},

48 {0x01,
do_Æign_Áu…
,"alignment fault" },

49 {0x02,
do_ãrm_Áu…
, "terminalÉxception"},

50 {0x03,
do_Æign_Áu…
,"alignment fault"},

51 {0x04,
do_ext_abt
, "sectionÉxternalábort onÜine-fetch"},

52 {0x05,
do_£˘_Áu…
, "sectionÅranslation fault"},

53 {0x06,
do_ext_abt
, "pageÉxternalábort onÜine-fetch"},

54 {0x07,
do_∑ge_Áu…
, "pageÅranslation fault"},

55 {0x08,
do_ext_abt
, "sectionÉxternalábort onÇon-linefetch"},

56 {0x09,
do_£˘_Áu…
, "section domain fault"},

57 {0x0A,
do_ext_abt
, "pageÉxternalábort onÇon-translation "},

58 {0x0B,
do_∑ge_Áu…
, "page domain fault "},

59 {0x0C,
do_å™s_Áu…
,"level 1Åranslation fault"},

60 {0x0D,
do_≥rm_Áu…
, "sectionÖermission fault"},

61 {0x0E,
do_å™s_Áu…
,"l2Åranslation fault"},

62 {0x0F,
do_≥rm_Áu…
, "pageÖermission fault"}

63 
	}
};

69 
	$do_d©a_abt
 ()

71 
u32
 
addr
 = 
	`gë_f§_addr
 ();

72 
u32
 
f§
 = 
	`gë_f§_ty≥
 ();

73 
u32
 
domaö
,
ty≥
;

75 
ty≥
 = 
f§
 & 0xF;

76 
domaö
 = (
f§
>>4)& 0x0F;

77 (*
f§_°
 [
ty≥
].
f§_¥oc
Ë(f§_°[ty≥].
desc
,ty≥,
addr
);

78 
	}
}

	@kernel/page/dabt.S

1 
	~<2440/p‹ts.h
>

2 .
globÆ
 
	g_do_d©a_abt


3 .
do_d©a_abt
,
úë


4 .
ãxt


5 .
code
 32

7 
_do_d©a_abt
:

8 
ldr
 
•
,=
cuºít_p


9 
ldr
 
•
,[sp]

10 
add
 
•
,sp,#68

11 
sub
 
Ã
,Ã,#0
x08


12 
°mdb
 
•
!,{
r0
-
r12
,
Ã
}

13 
mrs
 
r1
,
•§


14 
mrs
 
r2
,
˝§


15 
push
 {
r1
}

16 
m§
 
˝§_c
,#SYS_MODE|
NO_INTR


17 
mov
 
r3
,
Ã


18 
mov
 
r4
,
•


19 
m§
 
˝§
,
r2


20 
push
 {
r3
-
r4
}

21 
m§
 
˝§_c
,#SVC_MODE|
NO_INTR


22 
ldr
 
•
,=
KERNEL_STACK


23 
push
 {
r0
-
r3
}

24 
ldr
 
Ã
,=
úë


25 
ldr
 
pc
,=
do_d©a_abt


26 
b
 .

	@kernel/page/fault.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<2440/p‹ts.h
>

4 
	~<2440/ˇche.h
>

5 
	~<eˇ£y/pcb.h
>

6 
	~<eˇ£y/kî√l.h
>

7 
	~<sys/ty≥s.h
>

9 
TASK
 *
cuºít_p
;

10 
i32
 
∑nic
 (
RO
 
i8
 *
fmt
,...);

12 
i32
 
	$do_ve˘_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
)

14 
	`∑nic
 ( "∑nic! %s,ty≥ %d ,add∏0x%0x \n",
desc
,
ty≥
,
addr
 );

16 
	}
}

18 
i32
 
	$do_Æign_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
)

20 
	`∑nic
 ( "∑nic! %s,ty≥ %d ,add∏0x%0x \n",
desc
,
ty≥
,
addr
 );

22 
	}
}

24 
i32
 
	$do_ãrm_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
)

26 
	`∑nic
 ( "∑nic! %s,ty≥ %d ,add∏0x%0x \n",
desc
,
ty≥
,
addr
 );

29 
	}
}

31 
i32
 
	$do_ext_abt
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
addr
)

33 
	`∑nic
 ( "∑nic! %s,ty≥ %d ,add∏0x%0x \n",
desc
,
ty≥
,
addr
 );

36 
	}
}

37 
u32
 
föd_‰ì_∑ge
 ();

38 *
w‹d£t
 (*
s
,
u32
 
w
,
i32
 
szõ
);

43 
sync_dˇches
 ();

45 
TASK
 *
cuºít_p
;

46 
i32
 
	$do_∑ge_Áu…
 (
RO
 
i8
 *
s
,
u32
 
ty≥
,u32 
vaddr
)

48 i‡(!(
	`VMA_AREA
(
vaddr
)))

49 
	`∑nic
 ( "add∏0x%0x i†nŸ i¿VMA AREA !\n",
vaddr
 );

50 
VAR
 
u32
 *
∑ge_dú
 = (*)0,*
∑ge_tbl
 = (*)0;

51 
u32
 
∑ge
 = 0,
i
;

52 
u32
 
l1_idx
 = 
vaddr
>>20,
l2_idx
 = (vaddr >> 12) & 0xFF;

53 
∑ge_dú
 = (
VAR
 
u32
 *)(
cuºít_p
->
âb_ba£
);

55 i‡(!(
∑ge_dú
[
l1_idx
] & ~(0x3FF)Ë&& (
ty≥
 == 0x0B)) {

56 
i
 = 
l1_idx
 & ~3;

62 i‡((
∑ge_dú
[
i
+0] & ~0x3FF) || (page_dir[i+1] & ~0x3FF)

63 || (
∑ge_dú
[
i
+2] & ~0x3FF) || (page_dir[i+3] & ~0x3FF) )

65 
	`∑nic
 ( "page dir corrupts withÜ1_idx %d ,l2_idx %d !\n"

66 ,
l1_idx
,
l2_idx
 );

68 i‡(!(
∑ge
 = 
	`föd_‰ì_∑ge
 ()))

69 
	`∑nic
 ( "no more freeÖage !\n" );

70 
	`w‹d£t
 ((*)
∑ge
,
AP_FAULT_ALL
|
CB
|
TTB1_SPG
,0x1000);

71 
∑ge
 = 
	`v2p
(page);

72 
∑ge_dú
[
i
+0] = (
∑ge
 + 0x000)|
DOMAIN_SYS
|
TTB0_COARSE
;

73 
∑ge_dú
[
i
+1] = (
∑ge
 + 0x400)|
DOMAIN_SYS
|
TTB0_COARSE
;

74 
∑ge_dú
[
i
+2] = (
∑ge
 + 0x800)|
DOMAIN_SYS
|
TTB0_COARSE
;

75 
∑ge_dú
[
i
+3] = (
∑ge
 + 0xC00)|
DOMAIN_SYS
|
TTB0_COARSE
;

77 i‡(!(
∑ge
 = 
	`föd_‰ì_∑ge
 ()))

78 
	`∑nic
 ( "no more freeÖage !\n" );

79 
∑ge
 = 
	`v2p
(page);

80 
∑ge_tbl
 = (
VAR
 
u32
*)(
	`p2v
((
∑ge_dú
[
l1_idx
] & ~(0x3FF))));

81 
∑ge_tbl
 [
l2_idx
] = 
∑ge
|
AP_RW_ALL
|
CB
|
TTB1_SPG
;

83 } i‡((
∑ge_dú
[
l1_idx
] & ~(0x3FF)Ë&& (
ty≥
 == 0x0F)) {

84 
∑ge_tbl
 = (
VAR
 
u32
*Ë(
	`p2v
((
∑ge_dú
[
l1_idx
] & ~(0x3FF))));

85 i‡(!(
∑ge
 = 
	`föd_‰ì_∑ge
 ()))

86 
	`∑nic
 ( "no more freeÖage !\n" );

87 
∑ge
 = 
	`v2p
(page);

88 
∑ge_tbl
 [
l2_idx
] = 
∑ge
|
AP_RW_ALL
|
CB
|
TTB1_SPG
;

90 
	`∑nic
 ( "bad bad bad !Öid : %d ,address 0x%0xÜr = 0x%0x \n"

91 ,
cuºít_p
->
pid
,
vaddr
,cuºít_p->
ªgs
.
Ã
 );

96 
	`sync_dˇches
 ();

97 
	`övÆid©e_éb
 (
vaddr
);

99 
	}
}

101 
i32
 
	$do_£˘_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
vaddr
)

103 
	`∑nic
 ( "∑ni¯! %s,ty≥ = %d,add∏0x%0xÖid = %d \n",
desc
,
ty≥
,
vaddr
,
cuºít_p
->
pid
);

105 
	}
}

107 
i32
 
	$do_å™s_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
vaddr
)

109 
	`∑nic
 ( "∑ni¯! %s,ty≥ = %d,add∏0x%0xÖid = %d \n",
desc
,
ty≥
,
vaddr
,
cuºít_p
->
pid
);

111 
	}
}

113 
i32
 
	$do_≥rm_Áu…
 (
RO
 
i8
 *
desc
,
u32
 
ty≥
,u32 
vaddr
)

115 
	`∑nic
 ( "∑ni¯! %s,ty≥ = %d,add∏0x%0xÖid = %d \n",
desc
,
ty≥
,
vaddr
,
cuºít_p
->
pid
);

117 
	}
}

125 
i32
 
∑nic
 (
RO
 
i8
 *
fmt
,...);

126 
u32
 
föd_‰ì_∑ge
 ();

128 
	$m≠_vaddr2∑ddr
 (
u32
 
âb_ba£
,u32 
vaddr
,u32 
∑ddr
,u32 
≠
,
i32
 
Êush
)

130 i‡–(
∑ddr
 & 0xFFFË|| (
vaddr
 & 0xFFF))

131 
	`∑nic
 ("åyögÅÿm≠Ç⁄-4Kálignmíàvadd∏0x%0x \n",
vaddr
);

133 
VAR
 
u32
 *
∑ge_dú
 = (*)0,*
∑ge_tbl
 = (*)0;

134 
u32
 
∑ge
 = 0,
i
;

135 
u32
 
l1_idx
 = 
vaddr
>>20,
l2_idx
 = (vaddr>>12)&0xFF;

137 
∑ge_dú
 = (
VAR
 
u32
 *)
âb_ba£
;

138 i‡(!(
∑ge_dú
[
l1_idx
] & ~(0x3FF))) {

139 
i
 = 
l1_idx
 & ~3;

145 i‡((
∑ge_dú
[
i
+0] & ~0x3FF) || (page_dir[i+1] & ~0x3FF)

146 || (
∑ge_dú
[
i
+2] & ~0x3FF) || (page_dir[i+3] & ~0x3FF) )

148 
	`∑nic
 ( "page dir corrupts withÜ1_idx %d ,l2_idx %d !\n"

149 ,
l1_idx
,
l2_idx
 );

151 i‡(!(
∑ge
 = 
	`föd_‰ì_∑ge
 ()))

152 
	`∑nic
 ( "no more freeÖage !\n" );

153 
	`w‹d£t
 ((*)
∑ge
,
AP_FAULT_ALL
|
CB
|
TTB1_SPG
,0x1000);

154 
∑ge
 = 
	`v2p
(page);

155 
∑ge_dú
[
i
+0] = (
∑ge
 + 0x000)|
DOMAIN_SYS
|
TTB0_COARSE
;

156 
∑ge_dú
[
i
+1] = (
∑ge
 + 0x400)|
DOMAIN_SYS
|
TTB0_COARSE
;

157 
∑ge_dú
[
i
+2] = (
∑ge
 + 0x800)|
DOMAIN_SYS
|
TTB0_COARSE
;

158 
∑ge_dú
[
i
+3] = (
∑ge
 + 0xC00)|
DOMAIN_SYS
|
TTB0_COARSE
;

160 
∑ge_tbl
 = (
VAR
 
u32
*)(
	`p2v
((
∑ge_dú
[
l1_idx
] & ~(0x3FF))));

161 
∑ge_tbl
 [
l2_idx
] = 
∑ddr
|
≠
|
CB
|
TTB1_SPG
;

163 
∑ge_tbl
 = (
VAR
 
u32
*)(
	`p2v
((
∑ge_dú
[
l1_idx
] & ~(0x3FF))));

164 
∑ge_tbl
 [
l2_idx
] = 
∑ddr
|
≠
|
CB
|
TTB1_SPG
;

169 i‡(
Êush
) {

170 
	`sync_dˇches
 ();

171 
	`övÆid©e_éb
 (
vaddr
);

173 
	}
}

	@kernel/ramdisk.c

1 
	~<2440/drvs.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<as£π.h
>

4 
	~<eˇ£y/pcb.h
>

5 
	~<2440/ˇche.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<°rög.h
>

10 
i8
 
ªad_blk
 (*
buf
,
i32
 
blk_ƒ
);

12 
	$ªad_ømdisk
 ()

14 
i32
 
i
 = 0,
blkno
 = 
RAMDISK_IMG_BLK_NO
;

15 *
to
 = (*)
RAMDSK_BUFFER
;

17 
i
 = 0 ; i < (
RAMDSK_SIZE
>>
BLK_BUF_SIZE_SFT
Ë; i++,
blkno
 ++) {

18 
	`ªad_blk
 (
to
,
blkno
);

19 
to
 +
BLK_BUF_SIZE
;

21 
	`°r˝y
 ((*)(
RAMDSK_BUFFER
+
RAMDSK_SIZE
-0x1000),"hello world");

22 
	}
}

	@kernel/sched.c

1 
	~<eˇ£y/pcb.h
>

2 
	~<2440/2440addr.h
>

3 
	~<2440/drvs.h
>

4 
	~<eˇ£y/kî√l.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

8 
u32
 
NR_TASKS
;

9 
TASK
 *
cuºít_p
;

10 
TASK
* 
èsk_°
[];

11 
u32
 
__ticks
;

13 
i32
 
lcd_gŸoxy
 (i32 
x
,i32 
y
);

14 
ch™ge_âb_ba£
 (
u32
 
âb_ba£
);

16 
	$swôch_to
 (
TASK
 *
to
)

18 i‡(
to
 =
cuºít_p
)  ;

20 
cuºít_p
 = 
to
;

21 
cuºít_p
->
°©e
 = 
TS_RUN
;

22 
	`ch™ge_âb_ba£
 (
	`v2p
(
cuºít_p
->
âb_ba£
));

23 
	}
}

30 
i32
 
	$scheduÀ
 ()

32 
i32
 
i
 = 0,
j
 = 0 ,
maxi
 = 0;

34  
i
 = 1; i < 
MAX_TASKS
 && 
j
 < 
NR_TASKS
; i ++) {

35 i‡(!
èsk_°
[
i
] || 
TS_RUN
 !èsk_°[i]->
°©e
)

37 
j
 ++ ;

38 i‡(
èsk_°
[
i
]->
tick
 >èsk_°[
maxi
]->tick)

39 
maxi
 = 
i
;

41 i‡(!
èsk_°
[
maxi
]->
tick
) {

42 
i
 = 0,
j
 = 0; i < 
MAX_TASKS
 && j < 
NR_TASKS
; i ++) {

43 i‡(!
èsk_°
[
i
])

45 
j
 ++;

46 
èsk_°
 [
i
]->
tick
 =Åask_°[i]->
¥io
;

48 
maxi
 = 0;

50 
	`swôch_to
 (
èsk_°
[
maxi
]);

51  (
maxi
);

52 
	}
}

54 
	$¶ìp_èsk
 (
TASK
 *
èsk
)

56 i‡(!
èsk
 || 
TS_RUN
 !èsk->
°©e
 )  ;

57 
èsk
->
°©e
 = 
TS_HANG
;

58 
	`scheduÀ
 ();

59 
	}
}

61 
	$wake_èsk
 (
TASK
 *
èsk
)

63 i‡(!
èsk
 || 
TS_RUN
 =èsk->
°©e
 )  ;

64 
èsk
->
°©e
 = 
TS_RUN
;

65 
	`scheduÀ
 ();

66 
	}
}

68 
	$__do_timî0
 ()

70 i‡(
cuºít_p
->
tick
 > 0)

71 
cuºít_p
->
tick
 --;

73 
__ticks
 ++;

74 
	`scheduÀ
 ();

76 
rSRCPND
 |= (1<<10);

77 
rINTPND
 |= (1<<10);

78 
	}
}

	@kernel/signal.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

	@kernel/start.S

1 
	~<2440/p‹ts.h
>

2 .
globÆ
 
	g_°¨t


4 .
globÆ
 
	g_do_undef_ö°ru˘i⁄
,
	g_do_sys_ˇŒ
,
	g_do_¥e„tch_abt


5 .
globÆ
 
	g_do_ª£rved
,
	g_do_úq
,
	g_do_fiq


7 .
globÆ
 
	gk_ªíãr
,
	gª°¨t
,
	gúë


9 .
kî√l_°¨t
,
cuºít_p


10 .
ãxt


11 .
code
 32

12 
_°¨t
:

13 
bl
 
˛ór_bss


14 
ldr
 
•
,=
KERNEL_STACK


15 
ldr
 
pc
,=
kî√l_°¨t


16 
b
 .

19 
˛ór_bss
:

20 
ldr
 
r0
, 
bss_°¨t


21 
ldr
 
r1
, 
bss_íd


22 
mov
 
r2
, #0
x00


24 
˛r
:
°r
 
r2
, [
r0
]

25 
add
 
r0
,Ñ0, #4

26 
cmp
 
r0
, 
r1


27 
bÀ
 
˛r


28 
mov
 
pc
,
Ã


30 .
ma¸o
 
SAVE_CONTEXT
 
SWI_F


31 
ldr
 
•
,=
cuºít_p


32 
ldr
 
•
,[sp]

33 
add
 
•
,sp,#68

34 .i‡(\
SWI_F
 == 0)

35 
sub
 
Ã
,Ã,#0
x04


36 .
ídif


37 
°mdb
 
•
!,{
r0
-
r12
,
Ã
}

38 
mrs
 
r1
,
•§


39 
mrs
 
r2
,
˝§


40 
push
 {
r1
}

41 
m§
 
˝§_c
,#SYS_MODE|
NO_INTR


42 
mov
 
r3
,
Ã


43 
mov
 
r4
,
•


44 
m§
 
˝§
,
r2


45 
push
 {
r3
-
r4
}

46 
mov
 
r0
,
Ã


47 
m§
 
˝§_c
,#SVC_MODE|
NO_INTR


48 
ldr
 
•
,=
KERNEL_STACK


49 
push
 {
r0
-
r3
}

50 
ldr
 
Ã
,=
úë


51 .
ídm


53 .
ma¸o
 
SET_ISR_PROC
 
ISR_PROC


54 
ldr
 
pc
,=\
ISR_PROC


55 .
ídm


59 
_do_sys_ˇŒ
:

60 
SAVE_CONTEXT
 1

61 
ldr
 
r0
,[r0,#-4]

62 
bic
 
r0
,r0,#0
xFF000000


63 
bl
 
do_sys_ˇŒ


66 
úë
:

67 
p›
 {
r0
-
r3
}

68 
ª°¨t
:

69 
ldr
 
•
,=
cuºít_p


70 
ldr
 
•
,[sp]

71 
ª_ª°¨t
:

72 
p›
 {
r3
-
r4
}

73 
mrs
 
r2
,
˝§


74 
m§
 
˝§_c
,
SYS_MODE
|
NO_INTR


75 
mov
 
Ã
,
r3


76 
mov
 
•
,
r4


77 
m§
 
˝§
,
r2


78 
p›
 {
r1
}

79 
m§
 
•§
,
r1


80 
ldmü
 
•
!,{
r0
-
r12
,
pc
}^

82 
_do_undef_ö°ru˘i⁄
:

83 
SAVE_CONTEXT
 0

84 
SET_ISR_PROC
 
do_undef_ö°ru˘i⁄


85 
_do_ª£rved
:

86 
SAVE_CONTEXT
 0

87 
SET_ISR_PROC
 
do_ª£rved


88 
_do_¥e„tch_abt
:

89 
SAVE_CONTEXT
 0

90 
SET_ISR_PROC
 
do_¥e„˘h_abt


91 
_do_fiq
:

92 
SAVE_CONTEXT
 0

93 
SET_ISR_PROC
 
do_fiq


94 
_do_úq
:

95 
SAVE_CONTEXT
 0

96 
SET_ISR_PROC
 
do_úq


104 
k_ªíãr
: .0

105 
bss_°¨t
: .
w‹d
 
_bss_°¨t


106 
bss_íd
: .
w‹d
 
_bss_íd


	@kernel/swi.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<eˇ£y/kî√l.h
>

4 
	~<eˇ£y/pcb.h
>

5 
	~<eˇ£y/maû.h
>

6 
	~<eˇ£y/sy¢o.h
>

7 
	~<sys/ty≥s.h
>

9 
	$u32
 (*
	tSYS_CALL
Ë(
	tu32
,u32,u32,u32);

10 
LOCAL
 
SYS_CALL
 
sys_ˇŒ_tbl
[
MAX_SYSCALL
] = {0
	}
};

11 
TASK
 *
cuºít_p
;

16 
	$do_sys_ˇŒ
 (
u32
 
sys_no
)

18 
SYS_CALL
 
sys_ˇŒ
 = (SYS_CALL)
sys_ˇŒ_tbl
[
sys_no
];

19 
u32
 
a
,
b
,
c
,
d
;

21 
a
 = 
cuºít_p
->
ªgs
.
r0
;

22 
b
 = 
cuºít_p
->
ªgs
.
r1
;

23 
c
 = 
cuºít_p
->
ªgs
.
r2
;

24 
d
 = 
cuºít_p
->
ªgs
.
r3
;

26 (*
sys_ˇŒ
Ë(
a
,
b
,
c
,
d
);

27 
	}
}

29 
	#£t_sys_ˇŒ
(
ƒ
,
ˇŒ
Ë
sys_ˇŒ_tbl
[ƒ] = 
	)
ˇŒ

31 
u32
 
	g__ticks
 = 0;

33 
i32
 
lcd_putch
 (
u32
 
c
,u32 
bk_c
,u32 
°
,
i8
 
ch
);

35 
i32
 
	$sys_lcd_wrôe
 (
maû_°
 *
m
)

37 
u8
 *
p
 = (u8*)
m
->
§c
;

38 
i32
 
size
 = 
m
->
Àn
;

40 
size
 --)

41 
	`lcd_putch
 (0,0xFFFF,0, *
p
++);

42  (
size
);

43 
	}
}

45 
i32
 
	$sys_u¨t_wrôe
 (
maû_°
 *
m
)

47 
u8
 *
p
 = (u8*)
m
->
§c
;

48 
i32
 
size
 = 
m
->
Àn
;

50 
size
 --)

51 
	`u¨t_£ndc
 (*
p
++);

52  (
size
);

53 
	}
}

55 
¶ìp_èsk
 (
TASK
 *
èsk
);

57 
i32
 
	$sys_∑u£
 ()

59 
	`¶ìp_èsk
 (
cuºít_p
);

61 
	}
}

63 
maû_°
* 
sys_£ndm
 (maû_° *
m
);

64 
maû_°
* 
sys_po°m
 (maû_° *
m
);

65 
maû_°
* 
sys_ªcvm
 (maû_° *
m
);

66 
maû_°
* 
sys_ª∂ym
(maû_° *
m
);

68 
LOCAL


69 
	$bad_swi
 ()

71 
	`¥ötk
 ( "$ > bad swiÇr !\n" );

72 
	}
}

74 
	$£tup_sysˇŒs
 ()

76 
i32
 
i
 = 0 ;

78 
i
 = 0 ; i < 
MAX_SYSCALL
 ; i ++ )

79 
sys_ˇŒ_tbl
 [
i
] = (
SYS_CALL
)
bad_swi
;

81 
	`£t_sys_ˇŒ
 (0x03,(
SYS_CALL
)
sys_∑u£
);

82 
	`£t_sys_ˇŒ
 (0x80,(
SYS_CALL
)
sys_£ndm
);

83 
	`£t_sys_ˇŒ
 (0x81,(
SYS_CALL
)
sys_po°m
);

84 
	`£t_sys_ˇŒ
 (0x82,(
SYS_CALL
)
sys_ªcvm
);

85 
	`£t_sys_ˇŒ
 (0x83,(
SYS_CALL
)
sys_ª∂ym
);

86 
	}
}

87 
i32
 
sys_gëtime
 (
maû_°
 *
m
);

88 
i32
 
sys_£âime
 (
maû_°
 *
m
);

89 
u32
 
sys_adc
 (
maû_°
 *
m
);

90 
u32
 
sys_gëpos
 (
maû_°
 *
m
);

91 
i32
 
sys_rw_«nd
 (
maû_°
 *
m
);

92 
i32
 
sys_gëchs
 (
maû_°
 *
m
);

93 
i32
 
sys_sync_é
 ();

95 
i32
 
	$do_sys_msg
 (
maû_°
 *
m
)

97 i‡(!
m
)

99 
m
->
msg
.
umsg
)

101 
SYS_GET_TICK
:

102  (
__ticks
);

103 
SYS_UART_WRITE
:

104  (
	`sys_u¨t_wrôe
 (
m
));

105 
SYS_LCD_WRITE
:

106  (
	`sys_lcd_wrôe
(
m
));

107 
SYS_PAUSE
:

108  (
	`sys_∑u£
 ());

109 
SYS_GETTIME
:

110  (
	`sys_gëtime
 (
m
));

111 
SYS_SETTIME
:

112  (
	`sys_£âime
 (
m
));

113 
SYS_GETADC
:

114  (
	`sys_adc
 (
m
));

115 
SYS_GETPOS
:

116  (
	`sys_gëpos
(
m
));

117 
SYS_RW_NAND
:

118  (
	`sys_rw_«nd
 (
m
));

119 
SYS_GETCHS
:

120  (
	`sys_gëchs
 (
m
));

121 
SYS_SYNC_TL
:

122  (
	`sys_sync_é
 ());

125 
	}
}

	@kernel/task.c

1 
	~<2440/2440addr.h
>

2 
	~<eˇ£y/pcb.h
>

3 
	~<2440/p‹ts.h
>

4 
	~<2440/drvs.h
>

5 
	~<2440/ˇche.h
>

6 
	~<eˇ£y/kî√l.h
>

7 
	~<sys/ty≥s.h
>

10 
u32
 
	gNR_TASKS
 = 0;

11 
TASK
* 
	gèsk_°
[
MAX_TASKS
] = {0};

13 
	$öô_èsk_°
 ()

15 
i32
 
i
 = 0;

16 ; 
i
 < 
MAX_TASKS
; i ++)

17 
èsk_°
[
i
] = 0;

18 
	}
}

19 
LOCAL


20 
i32
 
	$föd_‰ì_pid
 ()

22 
i32
 
i
 = 0;

23 ; 
i
 < 
MAX_TASKS
; i ++){

24 i‡(!
èsk_°
[
i
])

25  (
i
);

28 
	}
}

30 
sync_dˇches
 ();

32 
	$ch™ge_âb_ba£
 (
u32
 
âb_ba£
)

34 
asm
 
	`VAR
 ("" ::: "memory");

35 
	`sync_dˇches
 ();

36 
	`døö_wb
 ();

37 
	`övÆid©e_iˇche
 ();

38 
	`övÆid©e_dˇches
 ();

39 
	`£t_âb_ba£
(
âb_ba£
);

40 
asm
 
	`VAR
 ("nop" );

41 
asm
 
	`VAR
 ("nop" );

42 
	`övÆid©e_ébs
();

43 
	}
}

45 
	#TTB_IS_ERR
(
x
Ë(((x)&0x03Ë=0x00)

	)

46 
	#TTB_IS_CPG_TBL
(
x
Ë(((x)&0x03Ë=0x01)

	)

47 
	#TTB_IS_SEG_TBL
(
x
Ë(((x)&0x03Ë=0x02)

	)

48 
	#TTB_IS_FPG_TBL
(
x
Ë(((x)&0x03Ë=0x03)

	)

49 
	#TTB_EMPTY
(
x
Ë(((x)&~0x3FFË=0)

	)

51 
i32
 
∑nic
 (
i8
 *
fmt
,...);

52 
u32
 
föd_‰ì_∑ge
 ();

53 *
w‹d£t
 (*
s
,
u32
 
w
,
i32
 
size
);

55 
	$sh¨e_kî√l_•a˚
 (
u32
 
de°_âb
,u32 
vaddr
,u32 
size
)

57 i‡((
size
 & 0xFFFFFË|| (
vaddr
 & 0xFFFFF))

58 
	`∑nic
 ( "tryingÅo copyÖageÅables withÇon-1Málignment !\n" );

59 
VAR
 
u32
 *
_‰om_∑ge_dú
,*
_to_∑ge_dú
;

61 
_‰om_∑ge_dú
 = (
VAR
 
u32
 *)(
KERNEL_TTB
);

62 
_to_∑ge_dú
 = (
VAR
 
u32
 *)
de°_âb
;

63 
u32
 
l1_idx
,
i
 = 0,
j
 = 0,
k
 = 0,
∑ge
;

64 
VAR
 
u32
 *
_to_∑ge_tbl
,*
_‰om_∑ge_tbl
;

66 
k
 = 0 ,
size
 >>20 ; k < sizê; k ++,
vaddr
 += 0x100000 ) {

67 
l1_idx
 = 
vaddr
>>20;

68 i‡–
	`TTB_EMPTY
 (
_‰om_∑ge_dú
[
l1_idx
]) )

70 i‡–
	`TTB_IS_SEG_TBL
 (
_‰om_∑ge_dú
 [
l1_idx
]) )

71 
_to_∑ge_dú
[
l1_idx
] = 
_‰om_∑ge_dú
 [l1_idx];

72 i‡–
	`TTB_IS_CPG_TBL
 (
_‰om_∑ge_dú
[
l1_idx
]) ) {

73 i‡–!(
_to_∑ge_dú
[
l1_idx
] & ~0x3FF) ) {

74 
i
 = 
l1_idx
 & ~3;

75 i‡((
_to_∑ge_dú
[
i
+0] & ~0x3FF) || (_to_page_dir[i+1] & ~0x3FF)

76 || (
_to_∑ge_dú
[
i
+2] & ~0x3FF) || (_to_page_dir[i+3] & ~0x3FF) )

78 
	`∑nic
 ( "∑gêdú c‹ru±†wôhÜ1_idx %d !\n",
l1_idx
 );

80 i‡(!(
∑ge
 = 
	`föd_‰ì_∑ge
 ()))

81 
	`∑nic
 ( "no more freeÖage !\n" );

82 
	`w‹d£t
 ((*)
∑ge
,
AP_FAULT_ALL
|
CB
|
TTB1_SPG
,0x1000);

83 
∑ge
 = 
	`v2p
(page);

84 
_to_∑ge_dú
[
i
+0] = (
∑ge
+0x000)|
DOMAIN_SYS
|
TTB0_COARSE
;

85 
_to_∑ge_dú
[
i
+1] = (
∑ge
+0x400)|
DOMAIN_SYS
|
TTB0_COARSE
;

86 
_to_∑ge_dú
[
i
+2] = (
∑ge
+0x800)|
DOMAIN_SYS
|
TTB0_COARSE
;

87 
_to_∑ge_dú
[
i
+3] = (
∑ge
+0xC00)|
DOMAIN_SYS
|
TTB0_COARSE
;

89 
_‰om_∑ge_tbl
 = (
VAR
 
u32
*)(
	`p2v
((
_‰om_∑ge_dú
[
l1_idx
] & ~0x3FF)));

90 
_to_∑ge_tbl
 = (
VAR
 
u32
*)(
	`p2v
((
_to_∑ge_dú
[
l1_idx
] & ~0x3FF)));

92 
j
 = 0 ; j < 256 ; j++ )

93 i‡(
_‰om_∑ge_tbl
[
j
] & ~0xFFF)

94 
_to_∑ge_tbl
[
j
] = 
_‰om_∑ge_tbl
[j];

97 
	}
}

98 
m≠_vaddr2∑ddr
 (
u32
 
âb_ba£
,u32 
vaddr
,u32 
∑ddr
,u32 
≠
,
i32
 
Êush
);

99 
	$öô_èsk
 (
u32
 
âb
,u32 
img_íåy
)

101 
i32
 
pid
 = -1;

102 i‡–(
pid
 = 
	`föd_‰ì_pid
 ()) < 0 ) {

103 
	`¥ötk
 ( "no moreÖcb slotávilable ! \n" );

106 
TASK
 *
pcb
 = (TASK*)
	`föd_‰ì_∑ge
 ();

107 i‡(!
pcb
) {

108 
	`¥ötk
 ( "no more freeÖageávilable ! \n" );

111 
pcb
->
ªgs
.
•
 = 
USR_SP
 + 
USR_SP_SIZE
;

112 
pcb
->
ªgs
.
•§
 = 
SYS_MODE
|
NO_FIQ
;

113 
pcb
->
ªgs
.
pc
 = 
img_íåy
;

115 
pcb
->
°©e
 = 
TS_RUN
;

116 
pcb
->
pid
 =Öid;

117 
pcb
->
tick
 =Öcb->
¥io
 = 1;

118 
pcb
->
âb_ba£
 = 
âb
;

119 
pcb
->
hód
 =Öcb->
èû
 =Öcb->
√xt
 = (*)0;

120 
pcb
->
maû
.
to
 = 
NO_TASK
;

123 
u32
 
∑ge
 = 
	`föd_‰ì_∑ge
 ();

124 
	`m≠_vaddr2∑ddr
 (
âb
,
USR_SP
,
	`v2p
(
∑ge
),
AP_RW_ALL
,1);

125 
èsk_°
 [
pid
] = 
pcb
;

126 
NR_TASKS
 ++ ;

127 
	}
}

129 
u32
 
föd_‰ì_∑ge_dú
 ( );

130 
i32
 
°rcmp
 ( 
RO
 
i8
 *
°r1
,RO i8 *
°r2
 ) ;

131 
i32
 
gë_‹dî
 (
u32
 
size
);

132 *
gë_‰ì_∑ges
(
u32
 
Êag
,
i32
 
‹dî
);

134 
i32
 
	$¸óãp
 (
RO
 
i8
 *
«me
,
i32
 
¥io
,i32 
°©e
)

136 
i32
 
pid
 = -1;

137 i‡–(
pid
 = 
	`föd_‰ì_pid
 ()) < 0 ) {

138 
	`¥ötk
 ( "no moreÖcb slotávilable ! \n" );

141 
TASK
 *
pcb
 = (TASK*)
	`föd_‰ì_∑ge
 ();

143 
pcb
->
ªgs
.
•
 = 
USR_SP
 + 
USR_SP_SIZE
;

144 
pcb
->
ªgs
.
•§
 = 
USR_MODE
|
NO_FIQ
;

145 
pcb
->
ªgs
.
pc
 = 
USR_ENTRY
;

147 
u32
 
∑ge_dú
 ;

148 
∑ge_dú
 = 
	`föd_‰ì_∑ge_dú
 ();

149 
	`w‹d£t
 ((*)
∑ge_dú
,
DOMAIN_FAULT
|
NCNB
|
TTB0_COARSE
,
TTB_SIZE
);

150 
pcb
->
âb_ba£
 = 
∑ge_dú
;

151 
pcb
->
°©e
 = sèã & 
TS_MASK
;

152 
pcb
->
pid
 =Öid;

153 
pcb
->
¥io
 =Öcb->
tick
 =Öriÿ% 
PL_MAX
;

154 
pcb
->
hód
 =Öcb->
èû
 =Öcb->
√xt
 = (*)0;

155 
pcb
->
maû
.
to
 = 
NO_TASK
;

158 
	`sh¨e_kî√l_•a˚
 (
∑ge_dú
,
KERNEL_SPACE_START
,
KERNEL_SPACE_SIZE
);

160 
i32
 
i
 = 0,
‹dî
 = -1;

161 
u32
 
∑ge
,
vaddr
,
∑ddr
;

163 i‡(0 =
	`°rcmp
 (
«me
,"fs") ) {

164 
pcb
->
ªgs
.
•§
 = 
SYS_MODE
 | 
NO_FIQ
;

165 i‡((
‹dî
 = 
	`gë_‹dî
 (
FS_IMG_SIZE
)) < 0)

166 
	`∑nic
 ( "no more freeÖages !\n" );

167 i‡(!(
∑ge
 = (
u32
)
	`gë_‰ì_∑ges
 (0,
‹dî
)))

168 
	`∑nic
 ( "no more freeÖages !\n" );

169 
vaddr
 = 
USR_ENTRY
,
∑ddr
 = 
	`v2p
(
∑ge
);

170 
	`c›y_«nd_to_sdøm
 (
∑ge
,
FS_IMG
,
FS_IMG_SIZE
);

171 
i
 = 0 ; i < (
FS_IMG_SIZE
>>12Ë; i++,
vaddr
 +0x1000,
∑ddr
 += 0x1000)

172 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
vaddr
,
∑ddr
,
AP_RW_ALL
,0);

174 
∑ddr
 = 
	`v2p
(
FS_BUFFER
),
vaddr
 = 
USR_FS_BUFFER
;

175 
i
 = 0 ; i < (
FS_BUFFER_SIZE
>>12Ë; i++,
vaddr
 +0x1000,
∑ddr
 += 0x1000)

176 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
vaddr
,
∑ddr
,
AP_RW_ALL
,0);

178 
∑ddr
 = 
	`v2p
(
RAMDSK_BUFFER
),
vaddr
 = 
USR_RAMDSK_BUFFER
;

179 
i
 = 0 ; i < (
RAMDSK_SIZE
>>12Ë; i++,
vaddr
 +0x1000,
∑ddr
 += 0x1000)

180 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
vaddr
,
∑ddr
,
AP_RW_ALL
,0);

181 } i‡(0 =
	`°rcmp
 (
«me
,"sh") ) {

182 
pcb
->
ªgs
.
•§
 = 
SYS_MODE
 | 
NO_FIQ
;

183 i‡–(
‹dî
 = 
	`gë_‹dî
 (
SH_IMG_SIZE
)) < 0)

184 
	`∑nic
 ( "no more freeÖages !\n" );

185 i‡(!(
∑ge
 = (
u32
)
	`gë_‰ì_∑ges
 (0,
‹dî
)))

186 
	`∑nic
 ( "no more freeÖages !\n" );

187 
	`c›y_«nd_to_sdøm
 (
∑ge
,
SH_IMG
,
SH_IMG_SIZE
);

188 
vaddr
 = 
USR_ENTRY
,
∑ddr
 = 
	`v2p
(
∑ge
);

189 
i
 = 0 ; i < (
SH_IMG_SIZE
>>12Ë; i++,
vaddr
 +0x1000,
∑ddr
 += 0x1000)

190 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
vaddr
,
∑ddr
,
AP_RW_ALL
,0);

193 i‡((
‹dî
 = 
	`gë_‹dî
 (
USR_SP_SIZE
)) < 0)

194 
	`∑nic
 ( "buddy order wrong !\n" );

195 i‡(!(
∑ge
 = (
u32
)
	`gë_‰ì_∑ges
 (0,
‹dî
)))

196 
	`∑nic
 ( "no more freeÖages !\n" );

198 
vaddr
 = 
USR_SP
,
∑ddr
 = 
	`v2p
(
∑ge
);

199 
i
 = 0 ; i < (
USR_SP_SIZE
>>12Ë; i++,
vaddr
 +0x1000,
∑ddr
 += 0x1000)

200 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
vaddr
,
∑ddr
,
AP_RW_ALL
,0);

202 
∑ge
 = 
	`föd_‰ì_∑ge
 ();

203 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
SEND_BUF
,
	`v2p
(
∑ge
),
AP_USR_RO_ALL
,0);

206 
∑ge
 = 
	`föd_‰ì_∑ge
 ();

207 
	`m≠_vaddr2∑ddr
 (
∑ge_dú
,
RECV_BUF
,
	`v2p
(
∑ge
),
AP_USR_RO_ALL
,0);

209 
èsk_°
 [
pid
] = 
pcb
;

210 
NR_TASKS
 ++ ;

211  (
pid
);

212 
	}
}

214 
INLINE
 * 
mem£t
(* 
s
,
i8
 
c
,
i32
 
cou¡
);

215 
m≠_∑ge_dú
 (
u32
 
∑ddr
,u32 
vaddr
,u32 
size
,

216 
u32
 
âb_ba£
,u32 
∑ge_dú_©å
,

217 
u32
 
∑ge_tbl
,u32 
∑ge_tbl_©å
);

218 
m≠_£g_dú
 (
u32
 
∑ddr
,u32 
vaddr
,u32 
size
,

219 
u32
 
âb_ba£
,u32 
∑ge_dú_©å
);

221 
	$ªbuûd_mmu
 ()

223 
	`mem£t
 ((*)
KERNEL_TTB
,0,
TTB_SIZE
);

224 
	`m≠_∑ge_dú
(
RAM_START
,

225 
KERNEL_SPACE_START
,

226 
RAM_SIZE
,

227 
	`v2p
(
KERNEL_TTB
),

228 
DOMAIN_SYS
|
TTB0_COARSE
 ,

229 
	`v2p
(
KERNEL_PAGE_TBL
),

230 
AP_USR_RO_ALL
 | 
CB
 | 
TTB1_SPG
 );

232 
	`m≠_£g_dú
 (0x48000000,
PORTS_MAP_START
,0x18000000,

233 
	`v2p
(
KERNEL_TTB
),
NORMAL_SEG_ATTR
);

236 
u32
 
ve˘_∑ge_tbl
 = 
	`v2p
(
VECT_PAGE_TBL
);

237 
u32
 
ve˘_∑ge
 = 
	`v2p
(
VECT_PAGE
);

238 
u32
 
vaddr
 = 0xFFFF0000;

240 
VAR
 
u32
 *
∑ge_dú
 = (VAR u32*)(
	`v2p
(
KERNEL_TTB
));

241 
∑ge_dú
 [ 
vaddr
 >> 20 ] = 
ve˘_∑ge_tbl
 | 
DOMAIN_SYS
 | 
TTB0_COARSE
 ;

242 
VAR
 
u32
 *
∑ge_tbl
 = (VAR u32*)
ve˘_∑ge_tbl
;

243 
∑ge_tbl
 [ (
vaddr
 >> 12Ë& 0xFF ] = 
ve˘_∑ge
 | 
AP_RW_ALL
 |
CB
|
TTB1_SPG
;

245 
	`ch™ge_âb_ba£
 (
	`v2p
(
KERNEL_TTB
));

246 
	}
}

	@kernel/timer.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<sys/ty≥s.h
>

5 
__do_timî0
 ();

8 
	$öô_timî
 (
i32
 
ƒ
)

10 
rTCFG0
 &= ~(0xFF<<0);

11 
rTCFG0
 |= 0xF9;

13 
rTCFG1
 &= ~(0x0F);

14 
rTCFG1
 |= 0x03;

16 
rTCNTB0
 = 125;

17 
rTCMPB0
 = 0;

19 
rSRCPND
 |= (1<<10);

20 
rINTPND
 |= (1<<10);

22 
pISR_TIMER0
 = (
u32
)
__do_timî0
;

24 
rINTMSK
 &= ~(1<<10);

26 
rTCON
 &= ~0x0F;

27 
rTCON
 |= (1<<1);

31 
rTCON
 &= ~0x0F;

32 
rTCON
 |= 0x09;

33 
	}
}

	@kernel/vector.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<2440/p‹ts.h
>

4 
	~<sys/ty≥s.h
>

6 
LOCAL
 
u32
 *
	gúq_èbÀ
 = (u32*)(0x00);

8 
	$n›
 ()

11 
	}
}

13 
_do_undef_ö°ru˘i⁄
 ();

14 
_do_sys_ˇŒ
 ();

15 
_do_¥e„tch_abt
 ();

16 
_do_d©a_abt
 ();

17 
_do_ª£rved
 ();

18 
_do_úq
 ();

19 
_do_fiq
 ();

21 
	$öô_öå_ve˘‹
 ()

23 
i32
 
i
 = 1 ;

25 
úq_èbÀ
 = (
u32
*)(
_ISR_STARTADDRESS
);

27 
úq_èbÀ
 [1] = (
u32
)
_do_undef_ö°ru˘i⁄
;

28 
úq_èbÀ
 [2] = (
u32
)
_do_sys_ˇŒ
;

29 
úq_èbÀ
 [3] = (
u32
)
_do_¥e„tch_abt
;

30 
úq_èbÀ
 [4] = (
u32
)
_do_d©a_abt
;

31 
úq_èbÀ
 [5] = (
u32
)
_do_ª£rved
;

32 
úq_èbÀ
 [6] = (
u32
)
_do_úq
;

33 
úq_èbÀ
 [7] = (
u32
)
_do_fiq
;

35  
i
 = 8 ;i < 256 ; i ++)

36 
úq_èbÀ
 [
i
] = (
u32
Ë(&
n›
);

37 
	}
}

39 
	$£t_úq
 (
i32
 
úq_ƒ
,
u32
 
func
)

41 i‡(
úq_ƒ
 >= 0 && irq_nr < 256)

42 
úq_èbÀ
 [
úq_ƒ
] = 
func
;

43 
	}
}

45 
	$un£t_úq
 (
i32
 
úq_ƒ
)

47 i‡(
úq_ƒ
 >= 0 && irq_nr < 256)

48 
úq_èbÀ
 [
úq_ƒ
] = (
u32
)&
n›
 ;

49 
	}
}

51 
	$i32
 (*
	tIRQ_FUNC
) ();

53 
i32
 
	$do_úq
 ()

55 
i32
 
úq_ƒ
 = 
rINTOFFSET
;

56 
úq_ƒ
 += 8;

57 
u32
 
íåy
 = *((u32*)((
_ISR_STARTADDRESS
 + (
úq_ƒ
 << 2))));

58 
IRQ_FUNC
 
func
 = (IRQ_FUNC)
íåy
;

59  (
	`func
 ());

60 
	}
}

	@lib/assert.c

1 
	~<°rög.h
>

2 
	~<as£π.h
>

4 
	~<2440/drvs.h
>

7 
	$as£π_Áû
 (c⁄° * 
ex¥essi⁄
,

8 c⁄° * 
loˇl_fûe
,

9 c⁄° * 
ba£_fûe
,

10 
löe_ƒ
 )

12 
	`lcd_¥ötf
 (0,0xFFFF,0,"assert( %s ) failed!!!\nlocal file: %s,base_file: %s,line: %u",

13 
ex¥essi⁄
,
loˇl_fûe
,
ba£_fûe
,
löe_ƒ
 ) ;

15 
	`__asm__
 ("b .");

16 
	}
}

	@lib/klib/mmu.c

1 
	~<2440/2440addr.h
>

2 
	~<2440/drvs.h
>

3 
	~<2440/p‹ts.h
>

4 
	~<2440/ˇche.h
>

5 
	~<as£π.h
>

6 
	~<°rög.h
>

7 
	~<eˇ£y/kî√l.h
>

8 
	~<sys/ty≥s.h
>

11 
	$m≠_£g_dú
 (
u32
 
∑ddr
,u32 
vaddr
,u32 
size
,

12 
u32
 
âb_ba£
,u32 
∑ge_dú_©å
)

14 i‡(
size
 & 0xFFFFF)

16 
VAR
 
u32
 *
_∑ge_dú
 = (VAR u32*)
âb_ba£
;

17 
_∑ge_dú
 +(
vaddr
 >> 20);

18 
u32
 
i
 = 0,
ƒ
 = 
size
 >> 20;

20 ;
i
 < 
ƒ
 ; i++,
∑ddr
 += 0x100000)

21 
_∑ge_dú
[
i
] = 
∑ge_dú_©å
| (
∑ddr
 & 0xFFF00000);

22 
	}
}

25 
	$m≠_∑ge_tbl
 (
u32
 
∑ge_tbl
,u32 
∑ge_tbl_©å
,u32 
∑ddr
)

27 
i32
 
i
 = 0;

28 
VAR
 
u32
 *
_∑ge_tbl
 = (VAR u32*Ë
∑ge_tbl
;

30 ; 
i
 < 256 ; i++,
∑ddr
 += 0x1000)

31 
_∑ge_tbl
[
i
] = 
∑ge_tbl_©å
 | 
∑ddr
;

32 
	}
}

35 
	$m≠_∑ge_dú
 (
u32
 
∑ddr
,u32 
vaddr
,u32 
size
,

36 
u32
 
âb_ba£
,u32 
∑ge_dú_©å
,

37 
u32
 
∑ge_tbl
,u32 
∑ge_tbl_©å
)

39 i‡(
size
 & 0xFFFFF)  ;

41 
VAR
 
u32
 *
_∑ge_dú
 = (VAR u32*)(
âb_ba£
);

42 
_∑ge_dú
 +(
vaddr
>>20);

43 
u32
 
i
 = 0,
ƒ
 = 
size
 >> 20;

44 
VAR
 
u32
 
_∑ge_tbl
 = 
∑ge_tbl
;

46 ; 
i
 < 
ƒ
 ; i++,
_∑ge_tbl
 +0x400,
∑ddr
 += 0x100000)

48 
_∑ge_dú
 [
i
] = 
∑ge_dú_©å
 | 
_∑ge_tbl
;

49 
	`m≠_∑ge_tbl
 (
_∑ge_tbl
,
∑ge_tbl_©å
,
∑ddr
);

51 
	}
}

53 *
	$w‹d£t
 (*
s
,
u32
 
w
,
i32
 
size
)

55 
u32
 *
p
 = (u32*)
s
;

56 (
size
 -4Ë>0Ë*
p
 ++ = 
w
;

57  (
s
);

58 
	}
}

61 
	$°¨t_mmu
 ()

63 
	`w‹d£t
 ((*)
TTB_BASE
,
DOMAIN_FAULT
|
NCNB
|
TTB0_COARSE
,
TTB_SIZE
);

65 
	`m≠_£g_dú
 (0x00,0x00,0x4000000,
TTB_BASE
,
NORMAL_SEG_ATTR
);

68 
	`m≠_∑ge_dú
(
RAM_START
,RAM_START,4<<20 ,

69 
TTB_BASE
,

70 
DOMAIN_SYS
|
TTB0_COARSE
 ,

71 
PAGE_TBL_P
,

72 
AP_RW_ALL
 | 
CB
 | 
TTB1_SPG
 );

74 
	`m≠_£g_dú
 (0x40000000,0x40000000,0x18000000,
TTB_BASE
,
NORMAL_SEG_ATTR
);

77 
	`m≠_∑ge_dú
(
RAM_START
,
KERNEL_SPACE_START
,4<<20 ,

78 
TTB_BASE
,

79 
DOMAIN_SYS
|
TTB0_COARSE
 ,

80 
PAGE_TBL_V
,

81 
AP_RW_ALL
 | 
CB
 | 
TTB1_SPG
 );

86 
	`m≠_£g_dú
 (0x48000000,
PORTS_MAP_START
,0x18000000,
TTB_BASE
,
NORMAL_SEG_ATTR
);

89 
	`övÆid©e_idˇche
 ();

90 
	`døö_wb
 ();

91 
	`övÆid©e_ébs
();

92 
	`£t_âb_ba£
(
TTB_BASE
);

93 
	`£t_domaö
 (0x55555550|(
SYS_PL
<<2)|(
FAULT_PL
<<0));

94 
	`£t_robö_ª∂a˚mít
 ();

95 
	`£t_lôée_ídün
 ();

96 
	`£t_low_ve˘‹
 ();

97 
	`Æign_Áu…_⁄
 ();

98 
	`mmu_⁄
();

99 
	`iˇche_⁄
();

100 
	`dˇche_⁄
();

101 
	}
}

103 
	$sync_dˇches
 ()

105 
i32
 
i
 = 0,
j
 = 0;

107 
j
 = 0;j < 8;j ++){

108 
i
 = 0;i < 64; i++)

109 
	`˛r_övÆid©e_dˇche
 ( (
i
<<26)|(
j
<<5));

111 
	}
}

	@lib/klib/panic.c

1 
	~<2440/2440addr.h
>

2 
	~<eˇ£y/kî√l.h
>

3 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

6 
RO
 
u8
 *
u¨t_£nds
 (RO u8 *
s
);

8 
i32
 
	$∑nic
 (
RO
 
i8
 *
fmt
,...)

10 
va_li°
 
≠
;

11 
i32
 
i
 = 0 ;

12 
u8
 
°rög
[1024+1] = {0};

14 
	`va_°¨t
(
≠
,
fmt
);

15 
i
 = 
	`v•rötf
((
i8
*)
°rög
,
fmt
,
≠
);

16 
	`u¨t_£nds
(
°rög
);

17 
	`va_íd
(
≠
);

19 
	`__˛i
 ();

22  (
i
);

23 
	}
}

	@lib/klib/uart.c

6 
	~<eˇ£y/pcb.h
>

7 
	~<2440/2440addr.h
>

8 
	~<2440/drvs.h
>

9 
	~<eˇ£y/kî√l.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

13 
LOCAL
 
i32
 
	gu¨t_no
 = 0;

19 
	$u£_u¨t
 (
i32
 
u¨t
)

21 i‡(
u¨t
 < 0 || uart > 3)  ;

22 
u¨t_no
 = 
u¨t
;

23 
	}
}

25 
	$u¨t_c⁄f
 (
i32
 
u¨t
,
u32
 
p˛k
,u32 
baud
)

27 i‡(
u¨t
 < 0 || uart > 3)  ;

28 
u32
 
baud_øã
;

30 i‡(
p˛k
 =0Ëp˛k = 
PCLK
;

31 i‡(
baud
 =0Ëbaud = 
BAUD_RATE
;

33 
u¨t_no
 = 
u¨t
 ;

34 
baud_øã
 = (
u32
Ë(
PCLK
 / (
BAUD_RATE
 << 4)) - 1;

36 i‡(
u¨t_no
 == 0) {

37 
rGPHCON
 &= ~((3<<4)|(3<<6));

38 
rGPHCON
 |= ((2<<4)|(2<<6));

39 
rGPHUP
 |= 0x0C;

40 
rULCON0
 = 0x03;

41 
rUCON0
 = 0x05;

42 
rUFCON0
 = 0x00;

43 
rUMCON0
 = 0x00;

44 
rUBRDIV0
 = 
baud_øã
;

45 } i‡(
u¨t_no
 == 1) {

50 
	}
}

52 
u8
 
	$u¨t_£ndc
 (
u8
 
ch
)

54 i‡(
u¨t_no
 == 0) {

55 i‡(
ch
 == '\n') {

56 !(
rUTRSTAT0
 & 0x02));

57 
rUTXH0
 = '\r';

59  !(
rUTRSTAT0
 & 0x02) );

60 
rUTXH0
 = 
ch
;

61 } i‡(
u¨t_no
 == 1) {

62 i‡(
ch
 == '\n') {

63 !(
rUTRSTAT1
 & 0x02));

64 
rUTXH1
 = '\r';

66  !(
rUTRSTAT1
 & 0x02) );

67 
rUTXH1
 = 
ch
;

69 i‡(
ch
 == '\n') {

70 !(
rUTRSTAT2
 & 0x02));

71 
rUTXH2
 = '\r';

73  !(
rUTRSTAT2
 & 0x02) );

74 
rUTXH2
 = 
ch
;

77 
	}
}

79 
u8
 
	$u¨t_ªcvc
 ()

81 i‡(
u¨t_no
 == 0) {

82 !(
rUTRSTAT0
 & 0x01));

83  (0xFF & 
rURXH0
);

84 } i‡(
u¨t_no
 == 1) {

85 !(
rUTRSTAT1
 & 0x01));

86  (0xFF & 
rURXH1
);

88 !(
rUTRSTAT2
 & 0x01));

89  (0xFF & 
rURXH2
);

92 
	}
}

94 
RO
 
i8
* 
	$u¨t_£nds
 (
RO
 
i8
 *
s
)

96 
i8
 *
p
 = (i8*)
s
;

98 *
p
Ë
	`u¨t_£ndc
 (*p++);

100  (
s
);

101 
	}
}

103 
i32
 
	$u¨t_¥ötf
(
RO
 
i8
 *
fmt
,...)

105 
va_li°
 
≠
;

106 
i32
 
i
 = 0 ;

107 
i8
 
°rög
[1024+1] = {0};

109 
	`va_°¨t
(
≠
,
fmt
);

110 
i
 = 
	`v•rötf
(
°rög
,
fmt
,
≠
);

111 
	`u¨t_£nds
(
°rög
);

112 
	`va_íd
(
≠
);

114  (
i
);

115 
	}
}

117 
	$u¨t_öå_c⁄f
 (
u32
 
¥c
)

119 
rSRCPND
 |= (1<<28);

120 
rSUBSRCPND
 |= (1<<0);

121 
rINTPND
 |= (1<<28);

123 
pISR_UART0
 = (
u32
)
¥c
;

125 
rINTSUBMSK
 &= ~(1<<0);

126 
rINTMSK
 &= ~(1<<28);

127 
	}
}

	@lib/libc.c

1 
	~<°d¨g.h
>

2 
	~<°rög.h
>

3 
	~<eˇ£y/maû.h
>

4 
	~<eˇ£y/sy¢o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<eˇ£y/πc.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/ty≥s.h
>

10 
i32
 
£ndm
 (i32 
to
,
u32
 
umsg
,*
§c
,u32 
Àn
);

11 
LOCAL
 
i32
 
	$_gë_ticks
 ()

13  (
	`£ndm
 (0,
SYS_GET_TICK
,"",0));

14 
	}
}

16 
LOCAL
 
i32
 
	$_u¨t_wrôe
 (*
addr
,
u32
 
size
)

18 i‡(!
addr
 || !
size
)

20  (
	`£ndm
 (0,
SYS_UART_WRITE
,
addr
,
size
));

21 
	}
}

23 
LOCAL
 
i32
 
	$_lcd_wrôe
 (*
addr
,
u32
 
size
)

25 i‡(!
addr
 || !
size
)

27  (
	`£ndm
 (0,
SYS_LCD_WRITE
,
addr
,
size
));

28 
	}
}

30 
i32
 
	$∑u£
 ()

32  (
	`£ndm
 (0,
SYS_PAUSE
,"",0));

33 
	}
}

35 
i32
 
	$¥ötf
 (
RO
 
i8
 *
fmt
,...)

37 
va_li°
 
≠
 = (*)0;

38 
i32
 
i
 = 0 ;

39 
i8
 
°rög
[1024] = {0};

40 
	`va_°¨t
(
≠
,
fmt
);

41 
i
 = 
	`v•rötf
(
°rög
,
fmt
,
≠
);

42 
	`va_íd
 (
≠
);

43 
	`_u¨t_wrôe
 ( (*)
°rög
,
i
);

44  (
i
);

45 
	}
}

47 
i32
 
	$x¥ötf
 (
RO
 
i8
 *
fmt
,...)

49 
va_li°
 
≠
 = (*)0;

50 
i32
 
i
 = 0 ;

51 
i8
 
°rög
[1024] = {0};

52 
	`va_°¨t
(
≠
,
fmt
);

53 
i
 = 
	`v•rötf
(
°rög
,
fmt
,
≠
);

54 
	`va_íd
 (
≠
);

55 
	`_lcd_wrôe
 ( (*)
°rög
,
i
);

56  (
i
);

57 
	}
}

59 
	$dñay_ms
 (
i32
 
ms
)

61 
i32
 
t
 = 
	`_gë_ticks
 ();

62 ((
	`_gë_ticks
 (Ë- 
t
Ë* 10Ë< 
ms
);

63 
	}
}

65 
	$dñay_£c
 (
i32
 
£c
)

67 
i32
 
t
 = 
	`_gë_ticks
 ();

68 ((
	`_gë_ticks
 (Ë- 
t
Ë/ 100Ë< 
£c
);

69 
	}
}

71 
i32
 
	$gëtime
 (
sy°m_°
 *
t
)

73 i‡(!
t
)

75  (
	`£ndm
 (0,
SYS_GETTIME
,
t
,(
sy°m_°
)));

76 
	}
}

78 
i32
 
	$£âime
 (
sy°m_°
 *
t
)

80 i‡(!
t
)

82  (
	`£ndm
 (0,
SYS_SETTIME
,
t
,(
sy°m_°
)));

83 
	}
}

85 
u32
 
	$gëadc
 (
u32
 
ch
)

87  (
	`£ndm
 (0,
SYS_GETADC
,(*)
ch
,0));

88 
	}
}

90 
u32
 
	$gëpos
 (
u16
 *
x
,u16 *
y
)

92 
i8
 
buf
[4];

93 
i32
 
ªt
 = 
	`£ndm
 (0,
SYS_GETPOS
,
buf
,4);

94 *
x
 = 
	`gëw
(
buf
);

95 *
y
 = 
	`gëw
(
buf
+2);

96  (
ªt
);

97 
	}
}

99 
u32
 
	$«nd_rw
 (
u8
 
rw
,
u32
 
blkno
,*
buf
)

101 
u32
 
p
 [3] ,
ªt
;

103 
p
 [0] = (
u32
)
rw
;

104 
p
 [1] = (
u32
)
blkno
;

105 
p
 [2] = (
u32
)
buf
;

107 
ªt
 = 
	`£ndm
 (0,
SYS_RW_NAND
,(*)
p
,(p));

108  (
ªt
);

109 
	}
}

111 
u32
 
	$gëchs
 (
i8
 *
buf
,
u32
 
size
)

113 i‡(!
buf
 || !
size
)

115  (
	`£ndm
 (0,
SYS_GETCHS
,
buf
,
size
));

116 
	}
}

118 
u32
 
	$sync_é
 ()

120  (
	`£ndm
 (0,
SYS_SYNC_TL
,"",0));

121 
	}
}

	@lib/mail.c

1 
	~<eˇ£y/maû.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

11 
i32
 
	$£ndm
 (
i32
 
to
,
u32
 
umsg
,*
§c
,u32 
Àn
)

13 
maû_°
 
m
;

15 
m
.
to
 =Åo;

16 
m
.
msg
.
umsg
 = umsg;

17 
m
.
§c
 = src;

18 
m
.
Àn
 =Üen;

20 
__asm__
 
	`__vﬁ©ûe__
 ( "movÑ0,%0\n"

23 :"r"(&
m
)

26  (
m
.
msg
.
ªt
);

27 
	}
}

29 
i32
 
	$po°m
 (
i32
 
to
,
u32
 
umsg
,*
§c
,u32 
Àn
)

31 
maû_°
 
m
;

33 
m
.
to
 =Åo;

34 
m
.
msg
.
umsg
 = umsg;

35 
m
.
§c
 = src;

36 
m
.
Àn
 =Üen;

38 
__asm__
 
	`__vﬁ©ûe__
 ( "movÑ0,%0\n"

41 :"r"(&
m
)

44  (
m
.
msg
.
ªt
);

45 
	}
}

47 
i32
 
	$ªcvm
 (
i32
 
‰om
,i32 *
£ndî
,
u32
 *
msg
,*
buf
,u32 
size
)

49 i‡(!
buf
 || !
size
)  (0);

51 
maû_°
 
m
;

53 
m
.
‰om
 = from;

54 
m
.
§c
 = 
buf
;

55 
m
.
Àn
 = 
size
;

57 
__asm__
 
	`__vﬁ©ûe__
 ( "movÑ0,%0\n"

60 :"r"(&
m
)

63 *
£ndî
 = 
m
.
‰om
;

64 *
msg
 = 
m
.msg.
umsg
;

65  (
m
.
Àn
);

66 
	}
}

68 
i32
 
	$ª∂ym
 (
i32
 
to
,
u32
 
umsg
,*
§c
,u32 
Àn
)

70 
maû_°
 
m
;

72 
m
.
to
 =Åo;

73 
m
.
msg
.
umsg
 = umsg;

74 
m
.
§c
 = src;

75 
m
.
Àn
 =Üen;

77 
__asm__
 
	`__vﬁ©ûe__
 ( "movÑ0,%0\n"

80 :"r"(&
m
)

83  (
m
.
msg
.
ªt
);

84 
	}
}

	@lib/string.c

6 
	~<°d¨g.h
>

7 
	~<°rög.h
>

10 
	$øi£
 (
sig
)

13 
	}
}

15 *
	$°r˝y
 (*
de°
,c⁄° *
§c
)

17 *
p
 = 
de°
 ,*
q
 = (*)
§c
;

18 (*
p
 ++ = *
q
 ++)) ;

19  (
de°
);

20 
	}
}

22 *
	$°rˇt
 (* 
de°
,c⁄° *
§c
)

24 *
p
 = 
de°
;

25 
	`°r˝y
 (
p
 + 
	`°æí
(
de°
),
§c
);

27  (
p
);

28 
	}
}

30 
	$©oi
 (c⁄° *
§c
)

32 
de˚m
 = 0 ;

33 *
§c
) {

34 i‡(*
§c
 <= '9' && *src >= 0)

35 
de˚m
 = de˚m * 10 + (*
§c
++ - '0');

39  (
de˚m
) ;

40 
	}
}

42 
	$°∫cmp
 (c⁄° *
°r1
,c⁄° *
°r2
,
Àn
)

44 i‡(!
°r1
 || !
°r2
 || !
Àn
)

46 -- 
Àn
 && (*
°r1
 =*
°r2
) && *str1 && *str2)

47 
°r1
 ++ ,
°r2
 ++ ;

48  (*
°r1
 - *
°r2
) ;

49 
	}
}

51 * 
	$°∫˝y
 (*
de°
,c⁄° *
§c
,
Àn
)

53 *
tmp
 = 
de°
;

54 
Àn
 -- && (*
de°
 ++ = *
§c
 ++ ));

56  (
tmp
);

57 
	}
}

59 
	$°rcmp
 (c⁄° *
°r1
,c⁄° *
°r2
)

61 i‡(!
°r1
 || !
°r2
)

63 *
°r1
 =*
°r2
 && *str1 && *str2)

64 
°r1
 ++ ,
°r2
 ++;

65  (*
°r1
 - *
°r2
) ;

66 
	}
}

68 
	$i¢um
 (
ch
)

70 
codeA
[] = "0123456789abcdef";

71 
codeB
[] = "0123456789ABCDEF";

72 
i
 = 0 ;

74  
i
 = 0 ; 
codeA
[i] ;i ++ )

75 i‡–
codeA
[
i
] =
ch
 || 
codeB
[i] == ch )

76  (
i
);

78 
	}
}

80 
	$°πﬁ
 (c⁄° *
§c
,**
îr_pos
,
ba£
)

82 
ªt
 = 0;

83 
ƒ
 = 0;

85 i‡(!
ba£
)

88  *
§c
 ) {

89 i‡–(-1Ë!(
ƒ
 = 
	`i¢um
 (*
§c
 ++)) ) {

90 
ªt
 =Ñë * 
ba£
 + 
ƒ
;

93 i‡–
îr_pos
 !
NULL
 )

94 (*
îr_pos
Ë(*)
§c
;

95  (
ªt
);

98  ( 
ªt
 ) ;

99 
	}
}

101 
	$°æí
 (c⁄° *
§c
)

103 
Àn
 = 0 ;

104 *
§c
 ++Ë
Àn
 ++;

105  (
Àn
) ;

106 
	}
}

108 *
	$ôﬂ
 (
de˚m
,*
buf
,
ba£
)

110 
tmp
 = 
de˚m
,
ödex
 = 0;

111 
ch
 = 0 ;

115 
ch
 = 
tmp
 % 
ba£
 + 0x30;

116 i‡(
ch
 > 0x39)

117 
ch
 += 0x07;

118 
buf
[
ödex
 ++] = 
ch
;

119 
tmp
 /
ba£
 ;

120 } 
tmp
 != 0);

121 
buf
[
ödex
] = '\0';

123 
tmp
 = 0,
ödex
 -- ;Åmp < index ;Åmp ++ ,index --) {

124 
ch
 = 
buf
[
tmp
] ;

125 
buf
[
tmp
] = buf[
ödex
];

126 
buf
[
ödex
] = 
ch
;

128  (
buf
);

129 
	}
}

131 
	$•rötf
 (* 
dbuf
,c⁄° * 
fmt
,...)

133 
va_li°
 
va_p
 = (*)0;

134 
Àn
 = 0;

136 
	`va_°¨t
 (
va_p
,
fmt
);

137 
Àn
 = 
	`v•rötf
 (
dbuf
,
fmt
,
va_p
);

138 
	`va_íd
 (
va_p
);

139  ( 
Àn
 ) ;

140 
	}
}

142 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

143 
	$skù_©oi
(c⁄° **
s
)

145 
i
=0;

147 
	`is_digô
(**
s
))

148 
i
 = i*10 + *((*
s
)++) - '0';

149  
i
;

150 
	}
}

157 
	#ZEROPAD
 1

	)

158 
	#SIGN
 2

	)

159 
	#PLUS
 4

	)

160 
	#SPACE
 8

	)

161 
	#LEFT
 16

	)

162 
	#SPECIAL
 32

	)

163 
	#SMALL
 64

	)

165 * 
	$numbî
(* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄


166 ,
ty≥
)

168 
c
,
sign
,
tmp
[36];

169 c⁄° *
digôs
="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

170 
i
;

172 i‡(
ty≥
&
SMALL
Ë
digôs
="0123456789abcdefghijklmnopqrstuvwxyz";

173 i‡(
ty≥
&
LEFT
Ëty≥ &~
ZEROPAD
;

174 i‡(
ba£
<2 || base>36)

176 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ' ;

177 i‡(
ty≥
&
SIGN
 && 
num
<0) {

178 
sign
='-';

179 
num
 = -num;

181 
sign
=(
ty≥
&
PLUS
Ë? '+' : (—y≥&
SPACE
) ? ' ' : 0);

183 i‡(
sign
Ë
size
--;

184 i‡(
ty≥
&
SPECIAL
)

186 i‡(
ba£
==16Ë
size
 -= 2;

187 i‡(
ba£
==8Ë
size
--;

190 
i
=0;

191 i‡(
num
==0)

192 
tmp
[
i
++]='0';

193 
num
!=0)

195 
tmp
[
i
++]=
digôs
[ (()
num
)%
ba£
 ];

196 
num
 =(Íum / 
ba£
;

198 i‡(
i
>
¥ecisi⁄
)Örecision=i;

199 
size
 -
¥ecisi⁄
;

200 i‡(!(
ty≥
&(
ZEROPAD
+
LEFT
)))

201 
size
-->0)

202 *
°r
++ = ' ';

203 i‡(
sign
)

204 *
°r
++ = 
sign
;

205 i‡(
ty≥
&
SPECIAL
)

207 i‡(
ba£
==8)

208 *
°r
++ = '0';

209 i‡(
ba£
==16) {

210 *
°r
++ = '0';

211 *
°r
++ = 
digôs
[33];

214 i‡(!(
ty≥
&
LEFT
))

215 
size
-->0)

216 *
°r
++ = 
c
;

217 
i
<
¥ecisi⁄
--)

218 *
°r
++ = '0';

219 
i
-->0)

220 *
°r
++ = 
tmp
[
i
];

221 
size
-->0)

222 *
°r
++ = ' ';

223  
°r
;

224 
	}
}

226 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

228 
Àn
;

229 
i
;

230 * 
°r
;

231 *
s
;

232 *
ù
;

234 
Êags
;

235 
fõld_width
;

236 
¥ecisi⁄
;

239 
quÆifõr
;

241 
°r
=
buf
 ; *
fmt
 ; ++fmt) {

242 i‡(*
fmt
 != '%') {

243 *
°r
++ = *
fmt
;

248 
Êags
 = 0;

249 
ª≥©
:

250 ++
fmt
;

251 *
fmt
)

253 '-': 
Êags
 |
LEFT
; 
ª≥©
;

254 '+': 
Êags
 |
PLUS
; 
ª≥©
;

255 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

256 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

257 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

261 
fõld_width
 = -1;

262 i‡(
	`is_digô
(*
fmt
))

263 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

264 i‡(*
fmt
 == '*') {

266 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

267 i‡(
fõld_width
 < 0) {

268 
fõld_width
 = -field_width;

269 
Êags
 |
LEFT
;

273 
¥ecisi⁄
 = -1;

274 i‡(*
fmt
 == '.') {

275 ++
fmt
;

276 i‡(
	`is_digô
(*
fmt
))

277 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

278 i‡(*
fmt
 == '*') {

280 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

282 i‡(
¥ecisi⁄
 < 0)

283 
¥ecisi⁄
 = 0;

286 
quÆifõr
 = -1;

287 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L') {

288 
quÆifõr
 = *
fmt
;

289 ++
fmt
;

291 *
fmt
) {

293 i‡(!(
Êags
 & 
LEFT
))

294 --
fõld_width
 > 0)

295 *
°r
++ = ' ';

296 *
°r
++ = (Ë
	`va_¨g
(
¨gs
, );

297 --
fõld_width
 > 0)

298 *
°r
++ = ' ';

301 
s
 = 
	`va_¨g
(
¨gs
, *);

302 
Àn
 = 
	`°æí
(
s
);

303 i‡(
¥ecisi⁄
 < 0)

304 
¥ecisi⁄
 = 
Àn
;

305 i‡(
Àn
 > 
¥ecisi⁄
)

306 
Àn
 = 
¥ecisi⁄
;

307 i‡(!(
Êags
 & 
LEFT
))

308 
Àn
 < 
fõld_width
--)

309 *
°r
++ = ' ';

310 
i
 = 0; i < 
Àn
; ++i)

311 *
°r
++ = *
s
++;

312 
Àn
 < 
fõld_width
--)

313 *
°r
++ = ' ';

316 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 8,

317 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

320 i‡(
fõld_width
 == -1) {

321 
fõld_width
 = 8;

322 
Êags
 |
ZEROPAD
;

324 
°r
 = 
	`numbî
(str,

325 (Ë
	`va_¨g
(
¨gs
, *), 16,

326 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

329 
Êags
 |
SMALL
;

331 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 16,

332 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

336 
Êags
 |
SIGN
;

338 
°r
 = 
	`numbî
(°r, 
	`va_¨g
(
¨gs
, ), 10,

339 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

342 
ù
 = 
	`va_¨g
(
¨gs
, *);

343 *
ù
 = (
°r
 - 
buf
);

346 i‡(*
fmt
 != '%')

347 *
°r
++ = '%';

348 i‡(*
fmt
)

349 *
°r
++ = *
fmt
;

351 --
fmt
;

355 *
°r
 = '\0';

356  (
°r
-
buf
);

357 
	}
}

359 
ölöe
 * 
	$mem˝y
(* 
de°
,c⁄° * 
§c
, 
size
)

361 *
q
 = (*)
de°
,*
p
 = (*)
§c
;

362 
size
 --)

363 *
q
 ++ = *
p
 ++;

364  (
de°
);

365 
	}
}

367 
ölöe
 * 
	$mem£t
(* 
s
,
c
,
cou¡
)

369 *
p
 = (*)
s
;

371 
cou¡
 --)

372 *
p
 ++ = 
c
;

373  (
s
);

374 
	}
}

376 
ölöe
 *
	$memmove
 (*
de°
,*
§c
,
cou¡
)

378 i‡(!
de°
 || !
§c
 || !
cou¡
)

380 *
q
 = (*)
de°
;

381 *
p
 = (*)
§c
;

383 i‡(
q
 < 
p
 || q >Ö + 
cou¡
)

384 
cou¡
 --Ë*
q
 ++ = *
p
 ++;

386 
p
 +
cou¡
;

387 
q
 +
cou¡
;

388 
cou¡
 --Ë*
q
 -- = *
p
 --;

390  (
de°
);

391 
	}
}

	@net/main.c

1 
	$maö
 ()

4 
	}
}

	@net/start.S

1 .
globÆ
 
	g_°¨t


2 .
maö


3 .
code
 32

4 .
ãxt


5 
_°¨t
:

6 
bl
 
˛ór_bss


7 
bl
 
maö


8 
b
 .

10 
˛ór_bss
:

11 
ldr
 
r0
, 
bss_°¨t


12 
ldr
 
r1
, 
bss_íd


13 
mov
 
r2
, #0
x00


15 
˛r
:
°r
 
r2
, [
r0
]

16 
add
 
r0
,Ñ0, #4

17 
cmp
 
r0
, 
r1


18 
bÀ
 
˛r


19 
mov
 
pc
,
Ã


22 
bss_°¨t
: .
w‹d
 
_bss_°¨t


23 
bss_íd
: .
w‹d
 
_bss_íd


	@sh/main.c

1 
	~<eˇ£y/kî√l.h
>

2 
	~<eˇ£y/fs.h
>

3 
	~<eˇ£y/maû.h
>

4 
	~<°dio.h
>

5 
	~<eˇ£y/sy¢o.h
>

6 
	~<eˇ£y/πc.h
>

7 
	~<sys/ty≥s.h
>

10 
dñay_£c
 (
£c
);

12 
	$maö
 ()

19 
	`dñay_£c
 (1);

27 
	}
}

	@sh/start.S

1 .
globÆ
 
	g_°¨t


2 .
maö


3 .
code
 32

4 .
ãxt


5 
_°¨t
:

6 
bl
 
maö


7 
b
 .

	@tools/a/main.c

1 
	~<f˙é.h
>

2 
	~<sys/mm™.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/°©.h
>

5 
	~<uni°d.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

10 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

12 
	#BYTES_PER_PAGE
 (2048Ë

	)

13 
	#SP_BYTES_PER_PAGE
 (64Ë

	)

14 
	#PAGES_PER_BLK
 (64Ë

	)

15 
	#BLKS_PER_NANDF
 (2048Ë

	)

17 
	$maö
 (
¨gc
,*
¨gv
[])

19 
fdö
,
i
,
j
,
k
;

20 
buf
[2048] = {0};

21 
	`mem£t
 (
buf
,0xFF,(buf));

23 i‡(
¨gc
 < 2) {

24 
	`Ârötf
 (
°dîr
,"ußgê%†<fûíame> !\n",
¨gv
[0]);

25 
	`exô
 (1);

28 i‡((
fdö
 = 
	`›í
(
¨gv
[1],
O_RDWR
|
O_CREAT
|
O_TRUNC
,
FILE_MODE
)) < 0){

29 
	`¥ötf
("ˇn'à›í %†f‹ wrôög modê!", 
¨gv
[1]);

30 
	`exô
(1);

33 
i
 = 0; i < 
BLKS_PER_NANDF
 ;i ++) {

34 
j
 = 0 ;j < 
PAGES_PER_BLK
; j ++)

35 
	`wrôe
 (
fdö
,
buf
,(buf));

38 
	`˛o£
 (
fdö
);

41 
	}
}

	@tools/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<ty≥s.h
>

6 
	~<fs.h
>

7 
	~<°©.h
>

8 
	~<f˙é.h
>

10 
	#BYTES_PER_PAGE
 (2048Ë

	)

11 
	#SP_BYTES_PER_PAGE
 (64Ë

	)

12 
	#PAGES_PER_BLK
 (64Ë

	)

13 
	#BLKS_PER_NANDF
 (2048Ë

	)

15 
	#d•
 
¥ötf


	)

17 
FILE
 *
	gÂ
,*
	göi
 ;

19 
LOCAL
 
i32
 
	$blk_rw
 (
u8
 
rw
,
u32
 
blk_ƒ
,u32 
blks_˙t
,*
buf
)

21 i‡(!
buf
 || !
blks_˙t
 || 
	`f£ek
 (
Â
,
blk_ƒ
 << 12,
SEEK_SET
))

23 i‡(
rw
 =
WRITE
)

24  (
	`fwrôe
 (
buf
,1,
blks_˙t
<<12,
Â
));

25  (
	`‰ód
 (
buf
,1,
blks_˙t
<<12,
Â
));

26 
	}
}

28 
RO
 
i8
 *
	gfmt
[] = {

35 
	#NR_OBJS
 ((
fmt
)/(fmt[0]))

	)

37 
	$maö
 (
¨gc
,*
¨gv
[])

39 i‡(
¨gc
 != 3) {

40 
	`¥ötf
 ( "ußgê: %†[öput_fûe] [öi_fûe]\n",
¨gv
[0] );

44 i‡(!(
Â
 = 
	`f›í
 (
¨gv
[1],"rb+"))) {

45 
	`Ârötf
 ( 
°dîr
,"rw operation failed !\n" );

49 i‡(!(
öi
 = 
	`f›í
 (
¨gv
[2],"rb"))) {

50 
	`Ârötf
 ( 
°dîr
,"read operation failed !\n" );

53 
u32
 
i
 = 0,
blk_ƒ
 = 2;

54 
u32
 
buf
[
BLK_SIZE
>>2],
tmp
[BLK_SIZE>>2];

55 
MEM_SUPER_BLOCK
 *
sb
 = (MEM_SUPER_BLOCK*)
buf
;

57 
i
 = 0 ; i < 
NR_OBJS
 ; i++)

58 
	`fsˇnf
 (
öi
,
fmt
[
i
],&
buf
[i]);

59 
sb
->
sb_fú°_d©az⁄e
 = 2 + sb->
sb_im≠_blocks
 + sb->
sb_zm≠_blocks
 +

60 ((
sb
->
sb_nöodes
 * (
DEV_INODE
Ë>> 
BLK_SIZE_SFT
));

61 
sb
->
sb_log_z⁄e_size
 = 0;

62 
sb
->
sb_max_size
 = sb->
sb_zm≠_blocks
 * (
BLK_SIZE
 << 3) * BLK_SIZE;

63 
sb
->
sb_magic
 = 
CASEY_MAGIC
;

64 
sb
->
sb_pos
 = 0;

66 
	`blk_rw
 (
WRITE
,1,1,(*)
buf
);

68 
i
 = 0 ; i < 
sb
->
sb_im≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

69 
	`mem£t
 (
tmp
,0,
BLK_SIZE
);

70 i‡(
blk_ƒ
 == 2)

71 
tmp
[0] = 0x01;

72 
	`blk_rw
 (
WRITE
,
blk_ƒ
,1,(*)
tmp
);

74 
i
 = 0 ; i < 
sb
->
sb_zm≠_blocks
 ; i ++ ,
blk_ƒ
 ++) {

75 
	`mem£t
 (
tmp
,0,
BLK_SIZE
);

76 i‡(
blk_ƒ
 =
sb
->
sb_im≠_blocks
 + 2)

77 
tmp
 [0] = 0x01;

78 
	`blk_rw
 (
WRITE
,
blk_ƒ
,1,(*)
tmp
);

80 
	`mem£t
 (
tmp
,0,(tmp));

81 
DEV_INODE
 *
roŸ
 = (DEV_INODE*)
tmp
;

83 
roŸ
->
i_mode
 = 
I_DIRECTORY
;

84 
roŸ
->
i_uid
 = 
UID
;

85 
roŸ
->
i_size
 = 
BLK_SIZE
;

86 
roŸ
->
i_mtime
 = 
CUR_TIME
;

87 
roŸ
->
i_gid
 = 
GID
;

88 
roŸ
->
i_∆öks
 = 2;

89 
roŸ
->
i_magic
 = 
I_MAGIC
;

90 
roŸ
->
i_z⁄e
[0] = 
sb
->
sb_fú°_d©az⁄e
;

91 
	`blk_rw
 (
WRITE
,2+
sb
->
sb_im≠_blocks
+sb->
sb_zm≠_blocks
,1,(*)
tmp
);

93 
	`mem£t
 (
tmp
,0,(tmp));

94 
DIR_ENTRY
 *
bh_de_±r
 = (DIR_ENTRY *)
tmp
;

96 
bh_de_±r
[0].
öode_ƒ
 = 
ROOT_IND_NR
;

97 
bh_de_±r
[0].
«me
[0] = '.';

98 
bh_de_±r
[0].
«me
[1] = '\0';

100 
bh_de_±r
[1].
öode_ƒ
 = 
ROOT_IND_NR
;

101 
bh_de_±r
[1].
«me
[0] = '.';

102 
bh_de_±r
[1].
«me
[1] = '.';

103 
bh_de_±r
[1].
«me
[2] = '\0';

105 
bh_de_±r
[2].
öode_ƒ
 = 
ROOT_IND_NR
;

106 
	`°r˝y
 (
bh_de_±r
[2].
«me
,"LOVE");

108 
	`blk_rw
 (
WRITE
,
sb
->
sb_fú°_d©az⁄e
,1,(*)
tmp
);

110 
	`f˛o£
 (
Â
);

111 
	`f˛o£
 (
öi
);

113 
	}
}

	@
1
.
0
89
1385
boot/high_vect.S
boot/led.c
boot/loader.c
boot/loaderk.c
boot/nand.c
boot/start.S
fs/blk_rw.c
fs/bmap.c
fs/buffer.c
fs/crash.c
fs/errno.c
fs/exec.c
fs/fcntl.c
fs/frw.c
fs/getline.c
fs/inode.c
fs/iocntl.c
fs/main.c
fs/namei.c
fs/open.c
fs/pipe.c
fs/proc.c
fs/ramdisk.c
fs/rw.c
fs/sdcard.c
fs/start.S
fs/stat.c
fs/super.c
include/2440/2440addr.h
include/2440/cache.h
include/2440/drvs.h
include/2440/ports.h
include/asm/ioaddr.h
include/assert.h
include/ecasey/exec.h
include/ecasey/fs.h
include/ecasey/kernel.h
include/ecasey/mail.h
include/ecasey/pcb.h
include/ecasey/rtc.h
include/ecasey/sysno.h
include/errno.h
include/fcntl.h
include/stdarg.h
include/stdio.h
include/string.h
include/sys/stat.h
include/sys/types.h
kernel/clock.c
kernel/drv/adc.c
kernel/drv/blk/blk_drv.c
kernel/drv/chr/tty.c
kernel/drv/dma/dma.c
kernel/drv/keys.c
kernel/drv/lcd/fontlib.c
kernel/drv/lcd/lcd.c
kernel/drv/led.c
kernel/drv/rtc.c
kernel/drv/touchpl.c
kernel/drv/usb/usbm.c
kernel/except.c
kernel/exit.c
kernel/ipc/kmail.c
kernel/kmain.c
kernel/kmalloc.c
kernel/page/abt.c
kernel/page/dabt.S
kernel/page/fault.c
kernel/ramdisk.c
kernel/sched.c
kernel/signal.c
kernel/start.S
kernel/swi.c
kernel/task.c
kernel/timer.c
kernel/vector.c
lib/assert.c
lib/klib/mmu.c
lib/klib/panic.c
lib/klib/uart.c
lib/libc.c
lib/mail.c
lib/string.c
net/main.c
net/start.S
sh/main.c
sh/start.S
tools/a/main.c
tools/main.c
